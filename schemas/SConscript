# vim: filetype=python
# Copyright 2022 Autodesk, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
## load our own python modules
import os
import sys
import filecmp

from utils.system import IS_WINDOWS, IS_DARWIN, IS_LINUX
from utils.pluginfo import update_plug_info

# import build env
Import('env')
myenv = env.Clone()

dylib = 'PATH' if IS_WINDOWS else ('DYLD_LIBRARY_PATH' if IS_DARWIN else 'LD_LIBRARY_PATH')
env_separator = ';' if IS_WINDOWS else ':'

arnoldPythonPath = myenv['ARNOLD_PYTHON'].replace('$ARNOLD_PATH', myenv['ARNOLD_PATH'])
myenv.AppendENVPath('PYTHONPATH', arnoldPythonPath, envname='ENV', sep=env_separator, delete_existing=1)
os.environ['PYTHONPATH'] = myenv['ENV']['PYTHONPATH']
os.putenv('PYTHONPATH', os.environ['PYTHONPATH'])
sys.path.append(arnoldPythonPath)
sys.path.append(os.path.join(env['ROOT_DIR'], 'schemas'))

myenv.AppendENVPath(dylib, os.path.join(myenv['ARNOLD_PATH'], 'bin'), envname='ENV', sep=env_separator, delete_existing=1)
os.environ['PATH'] = myenv['ENV']['PATH']   
os.putenv('PATH', os.environ['PATH'])

# Otherwise generating the node definitions complain about the lack of optix library on centos.
if IS_LINUX:
    os.environ[dylib] = '%s:%s' % (os.environ.get(dylib, ''), myenv['ENV'][dylib])
    os.putenv(dylib, os.environ[dylib])

schemasBuildBase = os.path.join(env['ROOT_DIR'], env['BUILD_BASE_DIR'], 'schemas')
schemasBuildFolder = os.path.join(schemasBuildBase, 'source')

schemaFile = os.path.join(schemasBuildBase, 'schema.usda')
generatedSchema = os.path.join(schemasBuildFolder, 'generatedSchema.usda')

'''
First, call the script createSchemaFiles that will create a file schemas.usda.
It will iterate over all Arnold node types, and will add an entry in the file for its definition.
'''
# OSX's python can't find the createSchemaFile.py unless the full path is given.

python_executable = sys.executable
os.system('%s "%s" "%s"' % (python_executable, os.path.join(env['ROOT_DIR'], 'schemas', 'createSchemaFile.py'), schemasBuildBase))

''' 
At this point we've dynamically created the file schema.usda containing all the node entries and parameter definitions.
We now need to run usdGenSchema (provided in USD distribution) in order to generate lots of C++ files (one for each class).
For now we're not storing these C++ files as they're meant to be generated dynamically, however if we want to add custom
functions in our schema classes, we might want to added these generated cpp files to our repo 
(note that it's possible to add functions that will remain even after usdGenSchema is executed once again)


FIXME Current issues to address the generation of the schema files :
 - We need to double-check if matrix parameters are written the right way
 - arnold compare shader's parameter 'test' is currently skipped, we need to investigate why it's failing
 - we have some conflicts when different parameter names / enum values have the same string with a different case. For example A / a, Ng / ng, etc...
   As a workaround I'm setting all the 1-length tokens to lower case, and I have a special exception for Ng and Ns. But that should be fixed somehow
 - token 'auto' is a problem too, I'm currently calling it 'param_auto' so if there's no other solution we'll need some extra-logic when we read the schema files
 - when I build the schemas, I get "Warning C4273: inconsistent linkage" for every function
'''

myenv = env.Clone()
myenv.AppendENVPath('PYTHONPATH', os.path.join(myenv['USD_LIB'], 'python'), envname='ENV', sep=env_separator, delete_existing=1)
os.environ['PYTHONPATH'] = myenv['ENV']['PYTHONPATH']
os.putenv('PYTHONPATH', os.environ['PYTHONPATH'])
myenv.AppendENVPath('PATH', env['USD_BIN'], envname='ENV', sep=env_separator, delete_existing=1)
# Ensure USD libs will be found when loaded by the python modules
myenv.AppendENVPath(dylib, env['USD_LIB'], envname='ENV', sep=env_separator, delete_existing=1)
os.environ['PATH'] = myenv['ENV']['PATH']   
os.putenv('PATH', os.environ['PATH'])

genSchema = os.path.join(env['USD_BIN'], 'usdGenSchema')

if myenv.get('USDGENSCHEMA_CMD'):
    # A custom usdGenSchema command was provided, let's run it
    genSchema = myenv['USDGENSCHEMA_CMD']

elif not os.path.exists(genSchema):
    raise RuntimeError('Command {} not found. Impossible to generate Schemas'.format(genSchema))

def create_schema(target, source, env):
    if not os.path.exists(schemasBuildFolder):
        os.makedirs(schemasBuildFolder)
    print('Cleaning existing schema files')
    prevFiles = os.listdir(schemasBuildFolder)
    for f in prevFiles:
        os.remove(os.path.join(schemasBuildFolder, f))
    print('Now running usdGenSchema to create the C++ files...')
    cmd = '{genSchema} "{schemaFile}" "{output}"'.format(**{
        'genSchema': genSchema,
        'schemaFile': schemaFile,
        'output': schemasBuildFolder
    })
    print(cmd)
    os.system(cmd)
    update_plug_info(os.path.join(schemasBuildFolder, 'plugInfo.json'))

builder = Builder(action = Action(create_schema, "Flattening schema..."))

myenv.Append(BUILDERS = {'GenerateSchema' : builder})

plugInfo = os.path.join(schemasBuildFolder, 'plugInfo.json')

GENERATE_SCHEMA = myenv.GenerateSchema(generatedSchema, schemaFile)
Return(['GENERATE_SCHEMA', 'plugInfo'])
