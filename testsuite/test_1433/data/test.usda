#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Sphere "sphere1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    rel material:binding = </materials/subnet1>
    double radius = 0.3
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Sphere "sphere2" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    rel material:binding = </materials/subnet2>
    double radius = 0.3
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Sphere "sphere3" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    rel material:binding = </materials/subnet3>
    double radius = 0.3
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Scope "materials"
{
    def Material "subnet1" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        token outputs:surface.connect = </materials/subnet1/universal_shader.outputs:out>
        token outputs:mtlx:surface.connect = </materials/subnet1/mtlx_shader.outputs:out>
        
        def Shader "mtlx_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (0, 1, 0)
            token outputs:out
        }
        def Shader "universal_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:out
        }
    }
    def Material "subnet2" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        token outputs:surface.connect = </materials/subnet2/universal_shader.outputs:out>
        token outputs:arnold:surface.connect = </materials/subnet2/arnold_shader.outputs:out>
        

        def Shader "universal_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:out
        }
        def Shader "arnold_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (0, 1, 0)
            token outputs:out
        }
        
    }
    def Material "subnet3" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        token outputs:surface.connect = </materials/subnet3/universal_shader.outputs:out>
        token outputs:arnold:surface.connect = </materials/subnet3/arnold_shader.outputs:out>
        token outputs:mtlx:surface.connect = </materials/subnet3/mtlx_shader.outputs:out>
        

        def Shader "universal_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:out
        }
        def Shader "arnold_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (0, 1, 0)
            token outputs:out
        }
        def Shader "mtlx_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:out
        }
        
    }
}


def Scope "Render"
{
    def RenderSettings "rendersettings1"
    {
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </persp/perspShape>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = None
        int2 resolution = (160, 120)
        custom int arnold:global:AA_samples = 3
        float arnold:meters_per_unit = 0.01
        float arnold:frame.timeSamples = {
            1: 1,
        }
    }
}

def Xform "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov = [54.432224]
        float2[] primvars:arnold:lens_shift = [(0, 0)]
        float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 28.928568
        matrix4d xformOp:transform = ( (0.7071067690849304, 0, -0.7071067690849304, 0), (-0.33129456639289856, 0.8834522366523743, -0.33129456639289856, 0), (0.6246950626373291, 0.4685212969779968, 0.6246950626373291, 0), (2.428234100341797, 1.8211755752563477, 2.428234100341797, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
