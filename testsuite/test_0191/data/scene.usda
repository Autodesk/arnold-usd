#usda 1.0
(
    endFrame = 1
    startFrame = 1
)

def ArnoldOptions "options"
{
    int arnold:AA_samples = 3
    string arnold:camera = "/persp/perspShape"
    float arnold:frame.timeSamples = {
        1: 1,
    }
    int arnold:GI_diffuse_depth = 1
    int arnold:GI_specular_depth = 1
    int arnold:GI_transmission_depth = 8
    float arnold:meters_per_unit = 0.01
    string arnold:name = "options"
    string[] arnold:outputs = ["RGBA RGBA defaultArnoldFilter/gaussian_filter defaultArnoldDriver/driver_exr.RGBA"]
    string arnold:procedural_searchpath = "C:/Users/blaines.ADS/Documents/maya/projects/default/"
    bool arnold:texture_automip = 0
    bool arnold:texture_per_file_stats = 1
    string arnold:texture_searchpath = "C:/Users/blaines.ADS/Documents/maya/projects/default/sourceimages"
    int arnold:threads = 64
    int arnold:xres = 160
    int arnold:yres = 120
    string primvars:render_layer = "defaultRenderLayer" (
        elementSize = 1
        interpolation = "constant"
    )
}

def "defaultArnoldFilter"
{
    def ArnoldGaussianFilter "gaussian_filter"
    {
        string arnold:name = "defaultArnoldFilter/gaussian_filter"
    }
}

def "defaultArnoldDriver"
{
    def ArnoldDriverTiff "driver_exr_RGBA"
    {
        string arnold:filename = "testrender.tif"
        string arnold:name = "defaultArnoldDriver/driver_exr.RGBA"
    }
}

def Xform "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov = [54.432224]
        float2[] primvars:arnold:lens_shift = [(0, 0)]
        float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 28.928568
        matrix4d xformOp:transform = ( (0.7071067690849304, 0, -0.7071067690849304, 0), (-0.33129456639289856, 0.8834522366523743, -0.33129456639289856, 0), (0.6246950626373291, 0.4685212969779968, 0.6246950626373291, 0), (1.5976048707962036, 1.198203682899475, 1.5976048707962036, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "directionalLight1"
{
    def DistantLight "directionalLightShape1"
    {
        float inputs:angle = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 1
        float inputs:specular = 1
        vector3f[] primvars:arnold:direction = [(0, 0, -1)]
        string primvars:dcc_name = "directionalLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
    }
}

def Xform "pCube1"
{
    def Mesh "pCubeShape1"
    {

  	    uniform bool doubleSided = 1
	    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
	    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
	    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
	    rel material:binding = </materials/lambert1>
	    normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
	        interpolation = "faceVarying"
	    )
	    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
	    texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
	        customData = {
	            dictionary Maya = {
	                token name = "map1"
	            }
	        }
	        interpolation = "faceVarying"
	    )
	    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
	    uniform token subdivisionScheme = "none"
    }
}

def "materials"
{
    def Material "lambert1"
    {
        token outputs:arnold:surface.connect = </lambert1.outputs:surface>
    }
}

def Shader "lambert1"
{
    uniform token info:id = "arnold:lambert"
    float inputs:Kd = 0.8
    color3f inputs:Kd_color = (0.5, 0.5, 0.5)
    string inputs:name = "lambert1"
    token outputs:surface
}

