#usda 1.0
(
    defaultPrim = "floor"
    endTimeCode = 101
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 101
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "testgeometry_sphere_object1" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Sphere "mesh_0"
    {
        
    }
}

def Xform "floor" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1.5, 0), (0, -1.3372678756713867, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        rel material:binding = </materials/arnold_materialbuilder1>
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Scope "materials"
{
    def Material "arnold_materialbuilder1"
    {
        token outputs:arnold:surface.connect = </materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

        def Shader "standard_surface1"
        {
            uniform token info:id = "arnold:standard_surface"
            string inputs:aov_id1 = ""
            string inputs:aov_id2 = ""
            string inputs:aov_id3 = ""
            string inputs:aov_id4 = ""
            string inputs:aov_id5 = ""
            string inputs:aov_id6 = ""
            string inputs:aov_id7 = ""
            string inputs:aov_id8 = ""
            float inputs:base = 1
            color3f inputs:base_color = (0.18, 0.18, 0.18)
            bool inputs:caustics = 0
            float inputs:coat = 0
            float inputs:coat_affect_color = 0
            float inputs:coat_affect_roughness = 0
            float inputs:coat_anisotropy = 0
            color3f inputs:coat_color = (1, 1, 1)
            float inputs:coat_IOR = 1.5
            vector3f inputs:coat_normal = (0, 0, 0)
            float inputs:coat_rotation = 0
            float inputs:coat_roughness = 0.1
            int inputs:dielectric_priority = 0
            float inputs:diffuse_roughness = 0
            float inputs:emission = 0
            color3f inputs:emission_color = (1, 1, 1)
            bool inputs:exit_to_background = 0
            color3f inputs:id1 = (0, 0, 0)
            color3f inputs:id2 = (0, 0, 0)
            color3f inputs:id3 = (0, 0, 0)
            color3f inputs:id4 = (0, 0, 0)
            color3f inputs:id5 = (0, 0, 0)
            color3f inputs:id6 = (0, 0, 0)
            color3f inputs:id7 = (0, 0, 0)
            color3f inputs:id8 = (0, 0, 0)
            float inputs:indirect_diffuse = 1
            float inputs:indirect_specular = 1
            bool inputs:internal_reflections = 1
            float inputs:metalness = 0
            vector3f inputs:normal = (0, 0, 0)
            color3f inputs:opacity = (1, 1, 1)
            float inputs:sheen = 0
            color3f inputs:sheen_color = (1, 1, 1)
            float inputs:sheen_roughness = 0.3
            float inputs:specular = 1
            float inputs:specular_anisotropy = 0
            color3f inputs:specular_color = (1, 1, 1)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation = 0
            float inputs:specular_roughness = 0.2
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy = 0
            color3f inputs:subsurface_color = (1, 1, 1)
            color3f inputs:subsurface_radius = (1, 1, 1)
            float inputs:subsurface_scale = 1
            token inputs:subsurface_type = "randomwalk"
            vector3f inputs:tangent = (0, 0, 0)
            float inputs:thin_film_IOR = 1.5
            float inputs:thin_film_thickness = 0
            bool inputs:thin_walled = 0
            float inputs:transmission = 0
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth = 0
            float inputs:transmission_dispersion = 0
            float inputs:transmission_extra_roughness = 0
            color3f inputs:transmission_scatter = (0, 0, 0)
            float inputs:transmission_scatter_anisotropy = 0
            bool inputs:transmit_aovs = 0
            token outputs:shader
        }
    }
}

def Xform "cameras"
{
    def Camera "render_cam"
    {
        float2 clippingRange = (1, 1000000)
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        custom float houdini:guidescale = 1
        custom bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.8457433091474781, 2.775557561562888e-17, 0.5335899690139173, 0), (0.13528884127797036, 0.9673237044010726, -0.21443362686260367, 0), (-0.5161542254577961, 0.253544573800715, 0.8181075507769601, 0), (-16.264967436649172, 7.604070888396329, 25.780071181752046, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}


def Scope "Render"
{
    def RenderSettings "rendersettings2"
    {
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            2: 2,
        }
        rel camera = </cameras/render_cam>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = None
        int2 resolution = (160, 120)
    }
}


def Scope "lights" (
    kind = "group"
)
{
    def Scope "LGT" (
        kind = "group"
    )
    {
        def Scope "lights" (
            kind = "component"
        )
        {
            def Scope "natural" (
                kind = "component"
            )
            {
                def SphereLight "ml_natural_default_all_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    custom float barndoorbottom = 0
                    custom float barndoorbottomedge = 0
                    custom float barndoorleft = 0
                    custom float barndoorleftedge = 0
                    custom float barndoorright = 0
                    custom float barndoorrightedge = 0
                    custom float barndoortop = 0
                    custom float barndoortopedge = 0
                    color3f inputs:color = (1, 1, 1)
                    float inputs:diffuse = 1
                    bool inputs:enableColorTemperature = 0
                    float inputs:exposure = 11
                    float inputs:intensity = 1
                    bool inputs:normalize = 1
                    string primvars:arnold:aov = "ml_natural_default_all_01" (
                        interpolation = "constant"
                    )
                    custom string[] primvars:arnold:filters = []
                    float primvars:arnold:radius = 0 (
                        interpolation = "constant"
                    )
                    custom string sda:light:type = "point"
                    float inputs:shaping:cone:angle = 45
                    custom float inputs:shaping:cone:factor = 2
                    float inputs:shaping:cone:softness = 0
                    float inputs:specular = 1
                    bool treatAsPoint = 1
                    matrix4d xformOp:transform = ( (0.9992012732544656, -3.1711838571996296e-7, 0.03996017425580005, 0), (0.01561444432176325, 0.9204998749858835, -0.39043074837862785, 0), (-0.036783211594109404, 0.39074285681362403, 0.9197646520680987, 0), (-1.6489159183912698, 8.219490162876305, 21.941723896770682, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def ArnoldUsdLuxLightFilter "default_filter"
                    {
                    }
                }
                def SphereLight "ml_natural_b_all_01" (
                    prepend apiSchemas = ["CollectionAPI:shadowLink"]
                )
                {
                    rel collection:shadowLink:excludes = </floor/mesh_0>
                    uniform token collection:shadowLink:expansionRule = "expandPrims"
                    uniform bool collection:shadowLink:includeRoot = 1
                    rel collection:shadowLink:includes = None
                    color3f inputs:color = (1, 0, 0)
                    float inputs:diffuse = 1
                    bool inputs:enableColorTemperature = 0
                    float inputs:exposure = 8
                    float inputs:intensity = 1
                    bool inputs:normalize = 1
                    string primvars:arnold:aov = "ml_natural_b_all_01" (
                        interpolation = "constant"
                    )
                    custom string[] primvars:arnold:filters = []
                    float primvars:arnold:radius = 0 (
                        interpolation = "constant"
                    )
                    custom string sda:light:type = "point"
                    float inputs:specular = 1
                    bool treatAsPoint = 1
                    matrix4d xformOp:transform = ( (0.6681201809961502, -0.05322788632016558, 0.7421470311626659, 0), (-0.7214044147514002, 0.19788547601084672, 0.6636392158101796, 0), (-0.18218423126840894, -0.9787788976586327, 0.09381244786962316, 0), (0.21174369717406805, -3.094021846657615, 2.091676215611347, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def ArnoldUsdLuxLightFilter "default_filter"
                    {
                    }
                }
            }

            def Scope "practical" (
                kind = "component"
            )
            {
            }

            def Scope "support" (
                kind = "component"
            )
            {
            }
        }
    }
}

