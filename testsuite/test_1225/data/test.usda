#usda 1.0
(
    defaultPrim = "camera1"
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 1030
    framesPerSecond = 24
    metersPerUnit = 0.01
    renderSettingsPrimPath = "/Render/rendersettings1"
    startTimeCode = 1001
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Camera "camera1" (
    kind = "assembly"
)
{
    float2 clippingRange.timeSamples = {
        1001: (0.1, 10000),
    }
    float focalLength.timeSamples = {
        1001: 35,
    }
    float focusDistance.timeSamples = {
        1001: 5,
    }
    float horizontalAperture.timeSamples = {
        1001: 35.999928,
    }
    float horizontalApertureOffset.timeSamples = {
        1001: 0,
        1002: 1.5327489,
        1003: 3.0654979,
        1004: 4.598247,
        1005: 6.1309958,
        1006: 7.663745,
        1007: 9.196494,
        1008: 10.729243,
        1009: 12.2619915,
        1010: 13.794741,
    }
    float verticalAperture.timeSamples = {
        1001: 20.245388,
    }
    float verticalApertureOffset.timeSamples = {
        1001: 0,
        1002: 0.41440764,
        1003: 0.8288153,
        1004: 1.2432228,
        1005: 1.6576306,
        1006: 2.0720382,
        1007: 2.4864457,
        1008: 2.9008534,
        1009: 3.3152611,
        1010: 3.7296686,
    }
    float3 xformOp:rotateXYZ = (-20, -30, 0)
    double3 xformOp:translate = (-2, 1.2, 3)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

def Mesh "pCube1" (
    apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
    rel material:binding = </world/mtl/arnold_materialbuilder1>
    normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
    texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
    uniform token subdivisionScheme = "none"

    def GeomSubset "back"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [2]
    }

    def GeomSubset "bottom"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [3]
    }

    def GeomSubset "front"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [0]
    }

    def GeomSubset "left"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [5]
    }

    def GeomSubset "right"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [4]
    }

    def GeomSubset "top"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [1]
    }

    def Scope "Looks"
    {
        def Material "initialShadingGroup"
        {
        }
    }
}

def Scope "world"
{
    def Scope "mtl"
    {
        def Material "arnold_materialbuilder1"
        {
            token outputs:arnold:surface.connect = </world/mtl/arnold_materialbuilder1/standard_surface1.outputs:shader>

            def Shader "standard_surface1"
            {
                uniform token info:id = "arnold:standard_surface"
                string inputs:aov_id1 = ""
                string inputs:aov_id2 = ""
                string inputs:aov_id3 = ""
                string inputs:aov_id4 = ""
                string inputs:aov_id5 = ""
                string inputs:aov_id6 = ""
                string inputs:aov_id7 = ""
                string inputs:aov_id8 = ""
                float inputs:base = 1
                color3f inputs:base_color = (0.10461648, 0.24228114, 0.8148465)
                bool inputs:caustics = 0
                float inputs:coat = 0
                float inputs:coat_affect_color = 0
                float inputs:coat_affect_roughness = 0
                float inputs:coat_anisotropy = 0
                color3f inputs:coat_color = (1, 1, 1)
                float inputs:coat_IOR = 1.5
                vector3f inputs:coat_normal = (0, 0, 0)
                float inputs:coat_rotation = 0
                float inputs:coat_roughness = 0
                int inputs:dielectric_priority = 0
                float inputs:diffuse_roughness = 0
                float inputs:emission = 0
                color3f inputs:emission_color = (0.9911021, 0.93011063, 0.7605245)
                bool inputs:exit_to_background = 0
                color3f inputs:id1 = (0, 0, 0)
                color3f inputs:id2 = (0, 0, 0)
                color3f inputs:id3 = (0, 0, 0)
                color3f inputs:id4 = (0, 0, 0)
                color3f inputs:id5 = (0, 0, 0)
                color3f inputs:id6 = (0, 0, 0)
                color3f inputs:id7 = (0, 0, 0)
                color3f inputs:id8 = (0, 0, 0)
                float inputs:indirect_diffuse = 1
                float inputs:indirect_specular = 1
                bool inputs:internal_reflections = 1
                float inputs:metalness = 0
                vector3f inputs:normal = (0, 0, 0)
                color3f inputs:opacity = (1, 1, 1)
                float inputs:sheen = 0
                color3f inputs:sheen_color = (1, 1, 1)
                float inputs:sheen_roughness = 0.3
                float inputs:specular = 1
                float inputs:specular_anisotropy = 0
                color3f inputs:specular_color = (1, 1, 1)
                float inputs:specular_IOR = 1.52
                float inputs:specular_rotation = 0
                float inputs:specular_roughness = 0.325
                float inputs:subsurface = 0
                float inputs:subsurface_anisotropy = 0
                color3f inputs:subsurface_color = (1, 1, 1)
                color3f inputs:subsurface_radius = (0.0016, 0.0016, 0.0016)
                float inputs:subsurface_scale = 1
                token inputs:subsurface_type = "randomwalk"
                vector3f inputs:tangent = (0, 0, 0)
                float inputs:thin_film_IOR = 1.5
                float inputs:thin_film_thickness = 0
                bool inputs:thin_walled = 0
                float inputs:transmission = 0
                color3f inputs:transmission_color = (1, 1, 1)
                float inputs:transmission_depth = 0
                float inputs:transmission_dispersion = 0
                float inputs:transmission_extra_roughness = 0
                color3f inputs:transmission_scatter = (0, 0, 0)
                float inputs:transmission_scatter_anisotropy = 0
                bool inputs:transmit_aovs = 0
                token outputs:shader
            }
        }
    }
}

def Xform "lights"
{
    def DomeLight "domelight1" (
        apiSchemas = ["HoudiniViewportGuideAPI"]
    )
    {
        rel filters
        float houdini:guidescale = 100
        uniform bool houdini:inviewermenu = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        asset inputs:texture:file = @@
        token inputs:texture:format = "automatic"
        rel portals
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings1"
    {
        int arnold:global:AA_samples = 3
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            1001: 1001,
            1002: 1002,
            1003: 1003,
            1004: 1004,
            1005: 1005,
            1006: 1006,
            1007: 1007,
            1008: 1008,
            1009: 1009,
            1010: 1010,
            1011: 1011,
            1012: 1012,
            1013: 1013,
            1014: 1014,
            1015: 1015,
            1016: 1016,
            1017: 1017,
            1018: 1018,
            1019: 1019,
            1020: 1020,
            1021: 1021,
            1022: 1022,
            1023: 1023,
            1024: 1024,
            1025: 1025,
            1026: 1026,
            1027: 1027,
            1028: 1028,
            1029: 1029,
            1030: 1030,
        }
        uniform token aspectRatioConformPolicy = "expandAperture"
        rel camera = </camera1>
        uniform float4 dataWindowNDC = (0, 0, 1, 1)
        uniform token[] includedPurposes = ["default"]
        uniform bool instantaneousShutter = 0
        uniform token[] materialBindingPurposes = ["full", "allPurpose"]
        uniform float pixelAspectRatio = 1
    }
}

