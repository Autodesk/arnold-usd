#usda 1.0
(
    customLayerData = {
        timecode[] timeCodeArray = [10]
    }
    defaultPrim = "persp"
    endFrame = 10
    framesPerSecond = 24
    startFrame = 10
    timeCodesPerSecond = 24
)

def Scope "Render"
{
    def RenderSettings "settings"
    {
        custom int arnold:AA_samples = 8
        int arnold:AA_seed = 10
        float arnold:frame = 10
        custom int arnold:GI_diffuse_depth = 1
        custom int arnold:GI_specular_depth = 1
        int arnold:GI_transmission_depth = 8
        float arnold:meters_per_unit = 0.01
        string arnold:name = "options"
        string arnold:procedural_searchpath = "C:/Users/blaines.ADS/Documents/maya/projects/default/"
        bool arnold:texture_automip = 0
        bool arnold:texture_per_file_stats = 1
        string arnold:texture_searchpath = "C:/Users/blaines.ADS/Documents/maya/projects/default/sourceimages"
        prepend rel camera = </persp/perspShape>
        uniform float pixelAspectRatio = 1
        string primvars:render_layer = "defaultRenderLayer" (
            elementSize = 1
            interpolation = "constant"
        )
        prepend rel products = </Render/Products/defaultArnoldDriver/driver_tiff_RGBA>
        uniform int2 resolution = (160, 120)
    }

    def Scope "Vars"
    {
        def RenderVar "RGBA"
        {
            custom string arnold:filter = "gaussian_filter"
            string arnold:gaussian_filter:name = "defaultArnoldFilter/gaussian_filter"
            custom float arnold:width = 2
            uniform token dataType = "color4f"
            uniform string sourceName = "RGBA"
        }
    }

    def Scope "Products"
    {
        def "defaultArnoldDriver"
        {
            def RenderProduct "driver_tiff_RGBA"
            {
                custom string arnold:color_space = "auto"
                custom string arnold:driver = "driver_tiff"
                string arnold:driver_tiff:name = "defaultArnoldDriver/driver_tiff.RGBA"
                prepend rel orderedVars = </Render/Vars/RGBA>
                token productName = "testrender.tif"
            }
        }
    }
}

def Xform "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov.timeSamples = {
            -5.283499717712402: [54.432224],
            -3.8940906524658203: [54.432224],
            -2.5046815872192383: [54.432224],
            -1.1152725219726562: [54.432224],
            0.2741365432739258: [54.432224],
            1.6635456085205078: [54.432224],
            3.05295467376709: [54.432224],
            4.442363739013672: [54.432224],
            5.831772804260254: [54.432224],
            7.221181869506836: [54.432224],
            8.610590934753418: [54.432224],
            10: [54.432224],
            11.389409065246582: [54.432224],
            12.778818130493164: [54.432224],
            14.168227195739746: [54.432224],
            15.557636260986328: [54.432224],
            16.94704532623291: [54.432224],
            18.336454391479492: [54.432224],
            19.725863456726074: [54.432224],
            21.115272521972656: [54.432224],
            22.50468158721924: [54.432224],
            23.89409065246582: [54.432224],
            25.283499717712402: [54.432224],
        }
        float2[] primvars:arnold:lens_shift.timeSamples = {
            -5.283499717712402: [(0, 0)],
            -3.8940906524658203: [(0, 0)],
            -2.5046815872192383: [(0, 0)],
            -1.1152725219726562: [(0, 0)],
            0.2741365432739258: [(0, 0)],
            1.6635456085205078: [(0, 0)],
            3.05295467376709: [(0, 0)],
            4.442363739013672: [(0, 0)],
            5.831772804260254: [(0, 0)],
            7.221181869506836: [(0, 0)],
            8.610590934753418: [(0, 0)],
            10: [(0, 0)],
            11.389409065246582: [(0, 0)],
            12.778818130493164: [(0, 0)],
            14.168227195739746: [(0, 0)],
            15.557636260986328: [(0, 0)],
            16.94704532623291: [(0, 0)],
            18.336454391479492: [(0, 0)],
            19.725863456726074: [(0, 0)],
            21.115272521972656: [(0, 0)],
            22.50468158721924: [(0, 0)],
            23.89409065246582: [(0, 0)],
            25.283499717712402: [(0, 0)],
        }
        float2[] primvars:arnold:lens_tilt_angle.timeSamples = {
            -5.283499717712402: [(0, 0)],
            -3.8940906524658203: [(0, 0)],
            -2.5046815872192383: [(0, 0)],
            -1.1152725219726562: [(0, 0)],
            0.2741365432739258: [(0, 0)],
            1.6635456085205078: [(0, 0)],
            3.05295467376709: [(0, 0)],
            4.442363739013672: [(0, 0)],
            5.831772804260254: [(0, 0)],
            7.221181869506836: [(0, 0)],
            8.610590934753418: [(0, 0)],
            10: [(0, 0)],
            11.389409065246582: [(0, 0)],
            12.778818130493164: [(0, 0)],
            14.168227195739746: [(0, 0)],
            15.557636260986328: [(0, 0)],
            16.94704532623291: [(0, 0)],
            18.336454391479492: [(0, 0)],
            19.725863456726074: [(0, 0)],
            21.115272521972656: [(0, 0)],
            22.50468158721924: [(0, 0)],
            23.89409065246582: [(0, 0)],
            25.283499717712402: [(0, 0)],
        }
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 15.2835
        float primvars:arnold:motion_start = -15.2835
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 15.283499717712402
        double shutter:open = -15.283499717712402
        float verticalAperture = 38.571426
        matrix4d xformOp:transform.timeSamples = {
            -5.283499717712402: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            -3.8940906524658203: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            -2.5046815872192383: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            -1.1152725219726562: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            0.2741365432739258: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            1.6635456085205078: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            3.05295467376709: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            4.442363739013672: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            5.831772804260254: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            7.221181869506836: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            8.610590934753418: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            10: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            11.389409065246582: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            12.778818130493164: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            14.168227195739746: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            15.557636260986328: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            16.94704532623291: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            18.336454391479492: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            19.725863456726074: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            21.115272521972656: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            22.50468158721924: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            23.89409065246582: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
            25.283499717712402: ( (0.9999451637268066, 0, -0.010471784509718418, 0), (-0.0037080685142427683, 0.935207188129425, -0.35408151149749756, 0), (0.009793288074433804, 0.35410094261169434, 0.9351559281349182, 0), (-0.35629165172576904, 1.308888554573059, 2.5108823776245117, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "aiAreaLight1"
{
    def RectLight "aiAreaLightShape1"
    {
        color3f inputs:color = (1, 1, 1)
        string primvars:arnold:shaders = "/mtl/light_shader_ramp"
        float inputs:diffuse = 1
        float inputs:exposure = 4
        float inputs:height = 2
        float inputs:intensity = 1
        bool inputs:normalize = 1
        float inputs:specular = 1
        float inputs:width = 2
        float primvars:arnold:motion_end = 15.2835
        float primvars:arnold:motion_start = -15.2835
        vector3f[] primvars:arnold:vertices = [(1, -1, 0), (-1, -1, 0), (-1, 1, 0), (1, 1, 0)]
        string primvars:dcc_name = "aiAreaLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            -5.283499717712402: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            -3.8940906524658203: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            -2.5046815872192383: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            -1.1152725219726562: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            0.2741365432739258: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            1.6635456085205078: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            3.05295467376709: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            4.442363739013672: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            5.831772804260254: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            7.221181869506836: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            8.610590934753418: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            10: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            11.389409065246582: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            12.778818130493164: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            14.168227195739746: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            15.557636260986328: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            16.94704532623291: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            18.336454391479492: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            19.725863456726074: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            21.115272521972656: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            22.50468158721924: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            23.89409065246582: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
            25.283499717712402: ( (-0.5, 0, -6.123234262925839e-17, 0), (0, 0.5, 0, 0), (6.123234262925839e-17, 0, -0.5, 0), (0.699999988079071, 0.5, -2, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
    
def Xform "Camera_Root"
{
    def Xform "Camera"
    {
        def Camera "CameraShape"
        {
            float2 clippingRange = (0.1, 32768)
            float focusDistance = 1
            float horizontalAperture = 37.57067
            float[] primvars:arnold:aperture_size = [0]
            float[] primvars:arnold:fov.timeSamples = {
                -5.283499717712402: [41.183075],
                -3.8940906524658203: [41.183075],
                -2.5046815872192383: [41.183075],
                -1.1152725219726562: [41.183075],
                0.2741365432739258: [41.183075],
                1.6635456085205078: [41.183075],
                3.05295467376709: [41.183075],
                4.442363739013672: [41.183075],
                5.831772804260254: [41.183075],
                7.221181869506836: [41.183075],
                8.610590934753418: [41.183075],
                10: [41.183075],
                11.389409065246582: [41.183075],
                12.778818130493164: [41.183075],
                14.168227195739746: [41.183075],
                15.557636260986328: [41.183075],
                16.94704532623291: [41.183075],
                18.336454391479492: [41.183075],
                19.725863456726074: [41.183075],
                21.115272521972656: [41.183075],
                22.50468158721924: [41.183075],
                23.89409065246582: [41.183075],
                25.283499717712402: [41.183075],
            }
            float2[] primvars:arnold:lens_shift.timeSamples = {
                -5.283499717712402: [(0, 0)],
                -3.8940906524658203: [(0, 0)],
                -2.5046815872192383: [(0, 0)],
                -1.1152725219726562: [(0, 0)],
                0.2741365432739258: [(0, 0)],
                1.6635456085205078: [(0, 0)],
                3.05295467376709: [(0, 0)],
                4.442363739013672: [(0, 0)],
                5.831772804260254: [(0, 0)],
                7.221181869506836: [(0, 0)],
                8.610590934753418: [(0, 0)],
                10: [(0, 0)],
                11.389409065246582: [(0, 0)],
                12.778818130493164: [(0, 0)],
                14.168227195739746: [(0, 0)],
                15.557636260986328: [(0, 0)],
                16.94704532623291: [(0, 0)],
                18.336454391479492: [(0, 0)],
                19.725863456726074: [(0, 0)],
                21.115272521972656: [(0, 0)],
                22.50468158721924: [(0, 0)],
                23.89409065246582: [(0, 0)],
                25.283499717712402: [(0, 0)],
            }
            float2[] primvars:arnold:lens_tilt_angle.timeSamples = {
                -5.283499717712402: [(0, 0)],
                -3.8940906524658203: [(0, 0)],
                -2.5046815872192383: [(0, 0)],
                -1.1152725219726562: [(0, 0)],
                0.2741365432739258: [(0, 0)],
                1.6635456085205078: [(0, 0)],
                3.05295467376709: [(0, 0)],
                4.442363739013672: [(0, 0)],
                5.831772804260254: [(0, 0)],
                7.221181869506836: [(0, 0)],
                8.610590934753418: [(0, 0)],
                10: [(0, 0)],
                11.389409065246582: [(0, 0)],
                12.778818130493164: [(0, 0)],
                14.168227195739746: [(0, 0)],
                15.557636260986328: [(0, 0)],
                16.94704532623291: [(0, 0)],
                18.336454391479492: [(0, 0)],
                19.725863456726074: [(0, 0)],
                21.115272521972656: [(0, 0)],
                22.50468158721924: [(0, 0)],
                23.89409065246582: [(0, 0)],
                25.283499717712402: [(0, 0)],
            }
            vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
            float primvars:arnold:motion_end = 15.2835
            float primvars:arnold:motion_start = -15.2835
            vector3f[] primvars:arnold:position = [(0, 0, 0)]
            float2[] primvars:arnold:screen_window_max = [(1, 1)]
            float2[] primvars:arnold:screen_window_min = [(-1, -1)]
            vector3f[] primvars:arnold:up = [(0, 1, 0)]
            color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
            string primvars:dcc_name = "CameraShape" (
                elementSize = 1
                interpolation = "constant"
            )
            token projection = "perspective"
            double shutter:close = 15.283499717712402
            double shutter:open = -15.283499717712402
            float verticalAperture = 28.178003
            matrix4d xformOp:transform.timeSamples = {
                -5.283499717712402: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                -3.8940906524658203: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                -2.5046815872192383: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                -1.1152725219726562: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                0.2741365432739258: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                1.6635456085205078: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                3.05295467376709: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                4.442363739013672: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                5.831772804260254: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                7.221181869506836: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                8.610590934753418: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                10: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                11.389409065246582: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                12.778818130493164: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                14.168227195739746: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                15.557636260986328: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                16.94704532623291: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                18.336454391479492: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                19.725863456726074: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                21.115272521972656: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                22.50468158721924: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                23.89409065246582: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
                25.283499717712402: ( (0.993845522403717, 0, 0.11077512800693512, 0), (-0.007745424751192331, 0.9975525736808777, 0.06948992609977722, 0), (-0.11050400882959366, -0.06992024928331375, 0.9914131164550781, 0), (7.18687629699707, -6.204563617706299, 91.49829864501953, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

def Xform "pPlane1"
{
    def Mesh "pPlaneShape1" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-12.5, 0, -12.5), (12.5, 0, 12.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </mtl/aiStandard2>
        uniform token orientation = "rightHanded"
        point3f[] points.timeSamples = {
            -5.283499717712402: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            -3.8940906524658203: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            -2.5046815872192383: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            -1.1152725219726562: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            0.2741365432739258: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            1.6635456085205078: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            3.05295467376709: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            4.442363739013672: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            5.831772804260254: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            7.221181869506836: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            8.610590934753418: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            10: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            11.389409065246582: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            12.778818130493164: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            14.168227195739746: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            15.557636260986328: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            16.94704532623291: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            18.336454391479492: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            19.725863456726074: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            21.115272521972656: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            22.50468158721924: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            23.89409065246582: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
            25.283499717712402: [(-12.5, 0, 12.5), (12.5, 0, 12.5), (-12.5, 0, -12.5), (12.5, 0, -12.5)],
        }
        uint primvars:arnold:id = 3518428338
        float primvars:arnold:motion_end = 15.2835
        float primvars:arnold:motion_start = -15.2835
        uchar primvars:arnold:subdiv_iterations = 1
        string primvars:dcc_name = "pPlaneShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        vector3f[] primvars:normals (
            elementSize = 4
            interpolation = "faceVarying"
        )
        vector3f[] primvars:normals.timeSamples = {
            -5.283499717712402: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            -3.8940906524658203: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            -2.5046815872192383: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            -1.1152725219726562: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            0.2741365432739258: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            1.6635456085205078: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            3.05295467376709: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            4.442363739013672: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            5.831772804260254: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            7.221181869506836: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            8.610590934753418: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            10: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            11.389409065246582: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            12.778818130493164: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            14.168227195739746: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            15.557636260986328: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            16.94704532623291: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            18.336454391479492: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            19.725863456726074: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            21.115272521972656: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            22.50468158721924: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            23.89409065246582: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
            25.283499717712402: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
        }
        int[] primvars:normals:indices = [0, 1, 2, 3]
        float2[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
            elementSize = 4
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform.timeSamples = {
            -5.283499717712402: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            -3.8940906524658203: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            -2.5046815872192383: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            -1.1152725219726562: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            0.2741365432739258: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            1.6635456085205078: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            3.05295467376709: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            4.442363739013672: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            5.831772804260254: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            7.221181869506836: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            8.610590934753418: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            11.389409065246582: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            12.778818130493164: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            14.168227195739746: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            15.557636260986328: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            16.94704532623291: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            18.336454391479492: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            19.725863456726074: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            21.115272521972656: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            22.50468158721924: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            23.89409065246582: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
            25.283499717712402: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.9998495578765869, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "mtl"
{
    def ArnoldNodeGraph "light_shader_ramp"
    {        
        token outputs:color.connect = </mtl/light_shader_ramp/ramp1.outputs:out>
        def Shader "ramp1"
        {
            uniform token info:id = "arnold:ramp_rgb"
            color3f[] inputs:color = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]
            int[] inputs:interpolation = [1, 1, 1]
            string inputs:name = "ramp1"
            float[] inputs:position = [0, 0.5, 1]
            token inputs:type = "v"
            token inputs:use_implicit_uvs = "curves_only"
            bool inputs:wrap_uvs = 1
            color3f outputs:out
        }        
    }
    def Material "aiStandard2"
    {
        token outputs:arnold:surface.connect = </mtl/aiStandard2/aiStandard2.outputs:out>

        def Shader "aiStandard2"
        {
            uniform token info:id = "arnold:standard"
            float inputs:specular_roughness = 0.01
            token outputs:out
        }
    }

    def "pPlane2"
    {
        def "pPlaneShape2"
        {
            def Material "shader"
            {
                token outputs:arnold:surface.connect = </mtl/pPlane2/pPlaneShape2/shader/shader.outputs:out>

                def Shader "shader"
                {
                    uniform token info:id = "arnold:ray_switch_shader"
                    string inputs:camera = ""
                    prepend string inputs:camera.connect = </mtl/pPlane2/pPlaneShape2/shader/two_sided.outputs:out>
                    string inputs:specular_transmission = ""
                    prepend string inputs:specular_transmission.connect = </mtl/pPlane2/pPlaneShape2/shader/two_sided.outputs:out>
                    token outputs:out
                }

                def Shader "two_sided"
                {
                    uniform token info:id = "arnold:two_sided"
                    string inputs:front = ""
                    prepend string inputs:front.connect = </mtl/pPlane2/pPlaneShape2/shader/multShader.outputs:out>
                    string outputs:out
                }

                def Shader "multShader"
                {
                    uniform token info:id = "arnold:multiply"
                    color3f inputs:input1 = (1, 1, 1)
                    prepend color3f inputs:input1.connect = </mtl/pPlane2/pPlaneShape2/shader/ramp1.outputs:out>
                    color3f inputs:input2 = (0, 0, 0)
                    color3f outputs:out
                }

                def Shader "ramp1"
                {
                    uniform token info:id = "arnold:ramp_rgb"
                    color3f[] inputs:color = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]
                    int[] inputs:interpolation = [1, 1, 1]
                    float[] inputs:position = [0, 0.5, 1]
                    token inputs:type = "v"
                    token inputs:use_implicit_uvs = "curves_only"
                    bool inputs:wrap_uvs = 1
                    color3f outputs:out
                }
            }
        }
    }

    def "pPlane3"
    {
        def "pPlaneShape3"
        {
            def Material "shader"
            {
                token outputs:arnold:surface.connect = </mtl/pPlane3/pPlaneShape3/shader/shader.outputs:out>

                def Shader "shader"
                {
                    uniform token info:id = "arnold:ray_switch_shader"
                    string inputs:camera = ""
                    prepend string inputs:camera.connect = </mtl/pPlane3/pPlaneShape3/shader/two_sided.outputs:out>
                    string inputs:specular_transmission = ""
                    prepend string inputs:specular_transmission.connect = </mtl/pPlane3/pPlaneShape3/shader/two_sided.outputs:out>
                    token outputs:out
                }

                def Shader "two_sided"
                {
                    uniform token info:id = "arnold:two_sided"
                    string inputs:front = ""
                    prepend string inputs:front.connect = </mtl/pPlane3/pPlaneShape3/shader/multShader.outputs:out>
                    string outputs:out
                }

                def Shader "multShader"
                {
                    uniform token info:id = "arnold:multiply"
                    color3f inputs:input1 = (1, 1, 1)
                    prepend color3f inputs:input1.connect = </mtl/pPlane3/pPlaneShape3/shader/ramp1.outputs:out>
                    color3f inputs:input2 = (16, 16, 16)
                    color3f outputs:out
                }

                def Shader "ramp1"
                {
                    uniform token info:id = "arnold:ramp_rgb"
                    color3f[] inputs:color = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]
                    int[] inputs:interpolation = [1, 1, 1]
                    float[] inputs:position = [0, 0.5, 1]
                    token inputs:type = "v"
                    token inputs:use_implicit_uvs = "curves_only"
                    bool inputs:wrap_uvs = 1
                    color3f outputs:out
                }
            }
        }
    }
}

def Xform "pPlane2"
{
    def "pPlaneShape2"
    {
        def Mesh "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            color3f inputs:color = (1, 1, 1)
            bool primvars:arnold:light = 1
            string primvars:arnold:light:shaders = "/mtl/light_shader_ramp"
            float primvars:arnold:light:diffuse = 1
            float primvars:arnold:light:exposure = 4
            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </mtl/pPlane2/pPlaneShape2/shader>
            uniform token orientation = "rightHanded"
            point3f[] points.timeSamples = {
                -5.283499717712402: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                -3.8940906524658203: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                -2.5046815872192383: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                -1.1152725219726562: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                0.2741365432739258: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                1.6635456085205078: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                3.05295467376709: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                4.442363739013672: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                5.831772804260254: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                7.221181869506836: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                8.610590934753418: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                10: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                11.389409065246582: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                12.778818130493164: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                14.168227195739746: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                15.557636260986328: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                16.94704532623291: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                18.336454391479492: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                19.725863456726074: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                21.115272521972656: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                22.50468158721924: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                23.89409065246582: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
                25.283499717712402: [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)],
            }
            float primvars:arnold:motion_end = 15.2835
            float primvars:arnold:motion_start = -15.2835
            uchar primvars:arnold:subdiv_iterations = 6
            token primvars:arnold:subdiv_type = "linear"
            uchar primvars:arnold:visibility = 64
            float2[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                elementSize = 4
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 3, 2]
            uniform token subdivisionScheme = "bilinear"
            matrix4d xformOp:transform.timeSamples = {
                -5.283499717712402: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                -3.8940906524658203: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                -2.5046815872192383: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                -1.1152725219726562: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                0.2741365432739258: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                1.6635456085205078: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                3.05295467376709: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                4.442363739013672: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                5.831772804260254: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                7.221181869506836: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                8.610590934753418: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                10: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                11.389409065246582: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                12.778818130493164: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                14.168227195739746: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                15.557636260986328: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                16.94704532623291: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                18.336454391479492: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                19.725863456726074: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                21.115272521972656: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                22.50468158721924: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                23.89409065246582: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
                25.283499717712402: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-0.699999988079071, 0.5, -2, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

def Xform "pPlane3"
{
    def "pPlaneShape3"
    {
        def Mesh "mesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            bool primvars:arnold:light = 1
            string primvars:arnold:light:shaders = "/mtl/light_shader_ramp"
            float primvars:arnold:light:diffuse = 1
            float primvars:arnold:light:exposure = 4

            uniform bool doubleSided = 1
            float3[] extent = [(-0.5, -1.110223e-16, -0.5), (0.5, 1.110223e-16, 0.5)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </mtl/pPlane3/pPlaneShape3/shader>
            uniform token orientation = "rightHanded"
            point3f[] points.timeSamples = {
                -5.283499717712402: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                -3.8940906524658203: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                -2.5046815872192383: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                -1.1152725219726562: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                0.2741365432739258: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                1.6635456085205078: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                3.05295467376709: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                4.442363739013672: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                5.831772804260254: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                7.221181869506836: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                8.610590934753418: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                10: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                11.389409065246582: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                12.778818130493164: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                14.168227195739746: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                15.557636260986328: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                16.94704532623291: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                18.336454391479492: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                19.725863456726074: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                21.115272521972656: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                22.50468158721924: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                23.89409065246582: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
                25.283499717712402: [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)],
            }
            float primvars:arnold:motion_end = 15.2835
            float primvars:arnold:motion_start = -15.2835
            uchar primvars:arnold:subdiv_iterations = 6
            token primvars:arnold:subdiv_type = "linear"
            float2[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
                elementSize = 4
                interpolation = "faceVarying"
            )
            int[] primvars:st:indices = [0, 1, 3, 2]
            uniform token subdivisionScheme = "bilinear"
            matrix4d xformOp:transform.timeSamples = {
                -5.283499717712402: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                -3.8940906524658203: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                -2.5046815872192383: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                -1.1152725219726562: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                0.2741365432739258: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                1.6635456085205078: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                3.05295467376709: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                4.442363739013672: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                5.831772804260254: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                7.221181869506836: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                8.610590934753418: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                10: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                11.389409065246582: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                12.778818130493164: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                14.168227195739746: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                15.557636260986328: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                16.94704532623291: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                18.336454391479492: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                19.725863456726074: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                21.115272521972656: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                22.50468158721924: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                23.89409065246582: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
                25.283499717712402: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (-1.9138922691345215, 0.5, -2, 1) ),
            }
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

