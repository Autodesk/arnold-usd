#usda 1.0
(
    endFrame = 1
    startFrame = 1
)

def Scope "Render"
{
    def RenderSettings "rendersettings1"
    {
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = None
        int2 resolution = (160, 120)
        custom int arnold:global:AA_samples = 3
        float arnold:meters_per_unit = 0.01
        float arnold:frame.timeSamples = {
            1: 1,
        }
    }
}


def Xform "persp"
{
    def Camera "perspShape"
    {
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange = (0.1, 10000)
        float2 clippingRange.timeSamples = {
            1: (0.1, 10000),
        }
        float focalLength.timeSamples = {
            1: 20.372915,
        }
        float focusDistance = 1
        float focusDistance.timeSamples = {
            1: 0.86360145,
        }
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture = 51.428574
        float horizontalAperture.timeSamples = {
            1: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            1: 0,
        }
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov = [54.432224]
        float2[] primvars:arnold:lens_shift = [(0, 0)]
        float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        token projection.timeSamples = {
            1: "perspective",
        }
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 28.928574
        float verticalAperture.timeSamples = {
            1: 8.176023,
        }
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform = ( (0.7727335691452026, 2.7755575615628914e-17, -0.6347305178642273, 0), (-0.29738476872444153, 0.8834522366523743, -0.3620421290397644, 0), (0.5607540607452393, 0.4685212969779968, 0.6826731562614441, 0), (8.827193260192871, 7.375297546386719, 10.7464017868042, 1) )
        matrix4d xformOp:transform.timeSamples = {
            1: ( (0.8151277927055814, -1.4111786184045627e-9, -0.5792811765964148, 0), (-0.2802957986088943, 0.8751408262633601, -0.3944145021285166, 0), (0.5069526080819872, 0.4838683025442806, 0.713351609623044, 0), (8.70424419050789, 7.3246456185426165, 10.679780092967944, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "aiSkyDomeLight1"
{
    def DomeLight "aiSkyDomeLightShape1"
    {
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 1
        float inputs:specular = 1
        asset inputs:texture:file = @green.exr@
        token inputs:texture:format = "latlong"
        float primvars:arnold:camera = 0
        string primvars:dcc_name = "aiSkyDomeLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
    }
}

def Shader "file1"
{
    uniform token info:id = "arnold:image"
    string inputs:color_space = "Raw"
    string inputs:filename = "/Users/picharc/Assets/hdr/hdr1.exr"
    bool inputs:ignore_missing_textures = 1
    color4f inputs:missing_texture_color = (0.5, 0.5, 0.5, 0)
    string inputs:name = "file1"
    color4f outputs:out
}

def Xform "pCube1"
{
    def Mesh "pCubeShape1"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </materials/lambert1>
        uniform token orientation = "rightHanded"
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        uint primvars:arnold:id = 528272281
        bool primvars:arnold:smoothing = 1
        uchar primvars:arnold:subdiv_iterations = 1
        string primvars:dcc_name = "pCubeShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        vector3f[] primvars:normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
            elementSize = 24
            interpolation = "faceVarying"
        )
        int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            elementSize = 14
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
        uniform token subdivisionScheme = "none"
        double3 xformOp:translate = (0.026808616700003257, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }
}

def "materials"
{
    def Material "lambert1"
    {
        token outputs:arnold:surface.connect = </lambert1.outputs:surface>
    }
}

def Shader "lambert1"
{
    uniform token info:id = "arnold:lambert"
    float inputs:Kd = 0.8
    color3f inputs:Kd_color = (0.5, 0.5, 0.5)
    string inputs:name = "lambert1"
    token outputs:surface
}

