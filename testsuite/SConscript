# vim: filetype=python

import sys, os, glob, shutil, time

## load third-party python modules
from utils.contrib.bottle import SimpleTemplate

## load our own python modules
import utils as sa
from utils.build_tools     import process_return_code
from utils.system          import print_safe, is_string
from test                  import Testsuite

Import('env')

TARGETS = ['TESTSUITE_REPORT', 'TESTSUITE_TESTS']
for x in TARGETS:
   globals()[x] = []

## define some variables in use by multiple tests
root_path        = env.Dir('#').abspath
testsuite_common = os.path.join(root_path, 'testsuite', 'common')

test_env = env.Clone(SHLIBPREFIX='', SHLIBSUFFIX=('.dll' if sa.system.is_windows else '.so'))

# Tests compiling shaders, procedurals or using the Arnold SDK will need to locate
# the Arnold API headers/lib
if 'UNIVERSAL_ENVS' in test_env:
   for i, e in enumerate(test_env['UNIVERSAL_ENVS']):
      test_env['UNIVERSAL_ENVS'][i] = e.Clone(SHLIBPREFIX='', SHLIBSUFFIX=('.dll' if tools.system.is_windows else '.so'))
      test_env['UNIVERSAL_ENVS'][i].Append(CPPPATH = [env['ARNOLD_API_INCLUDES'], os.path.join(root_path, 'testsuite', 'common', 'include')])
      test_env['UNIVERSAL_ENVS'][i].Append(LIBPATH = [env['ARNOLD_BINARIES']    ])
      test_env['UNIVERSAL_ENVS'][i].Append(LIBS    = ['ai'])
else:
   # Tests compiling shaders, procedurals or using the Arnold SDK will need to locate
   # the Arnold API headers/lib
   test_env.Append(CPPPATH = [env['ARNOLD_API_INCLUDES'], os.path.join(root_path, 'testsuite', 'common', 'include')])
   test_env.Append(LIBPATH = env['ARNOLD_BINARIES'])
   test_env.Append(LIBS = Split('ai'))

os.environ['ARNOLD_TESTSUITE_COMMON'] = os.path.join(root_path, 'testsuite', 'common')
os.environ['USD_PROCEDURAL_PATH'] = test_env['USD_PROCEDURAL_PATH']
os.environ['PREFIX_TEST_RENDERDELEGATE'] = test_env['PREFIX_RENDER_DELEGATE'] + ":" + test_env['PREFIX_SCHEMAS']

if test_env.get('ARNOLD_CER_AUTOSEND_EMAIL'):
   os.environ['ARNOLD_CER_AUTOSEND_EMAIL'] = test_env['ARNOLD_CER_AUTOSEND_EMAIL']
   os.environ['ARNOLD_CER_ENABLED'] = '1'

#ensure the common folder is copied
build_testsuite_common = os.path.join(test_env.Dir('.').abspath, 'common')
if not os.path.exists(build_testsuite_common):
   shutil.copytree(testsuite_common, build_testsuite_common)


# Extract the SCons build targets related to testsuite execution/distribution
testsuite_targets  = set()
index = 0

while True:
   if index == len(BUILD_TARGETS):
      break
   if BUILD_TARGETS[index] == 'testsuite':
      testsuite_targets.add('testsuite')
      del BUILD_TARGETS[index]
   elif BUILD_TARGETS[index].startswith('test'):
      testsuite_targets.add(BUILD_TARGETS[index])
      del BUILD_TARGETS[index]
   else:
      index += 1

testsuite_source_path = test_env.Dir('.').srcnode().abspath
testsuite_target_path = test_env.Dir('.').abspath
if 'TESTSUITE_PASSES' in test_env:
   testsuite_passes = test_env['TESTSUITE_PASSES']
else:
   testsuite_passes = ['usd', 'hydra']
   if 'ENABLE_SCENE_INDEX' in test_env and test_env['ENABLE_SCENE_INDEX']:
      testsuite_passes += ['hydra2']

args_load = dict(
   path   = testsuite_source_path,
   tools  = {'arnold': env['ARNOLD_PATH']},
   passes = testsuite_passes
)

args_prepare = dict(
   path     = testsuite_target_path,
   patterns = testsuite_targets,
   env      = test_env,
   #chunk    = [test_env['TESTSUITE_CHUNK_' + x] for x in ['INDEX', 'COUNT']],
   #order    = test_env['TEST_ORDER'],
   timeout  = float(test_env['TIMELIMIT']),
   update_passes = (['usd'] if test_env['UPDATE_REFERENCE'] else []),
   kick_params = test_env['KICK_PARAMS'],
   report_params = {'project': 'arnold-usd', 
                    'arnold_version': test_env['ARNOLD_VERSION'],
                    'revision': sa.git.sha1()[:8] if sa.git.sha1() else 'not found',
                    'repo_url': sa.git.remote_url() or 'not found',
                    'custom1_name': 'USD',
                    'custom1_value': test_env['USD_VERSION']}
)

if len(testsuite_targets) > 0:
   testsuite = Testsuite.load(**args_load)
   print('Found {} tests in {}'.format(len(testsuite.tests_found), testsuite.source))
   print('Filtering tests with patterns: {} ...'.format(' '.join(testsuite_targets)))
   TESTSUITE_TARGET = testsuite.prepare(**args_prepare)
   if len(testsuite.tests_prepared) == 0:
      raise SCons.Errors.StopError('No tests found matching "{}"'.format(' '.join(testsuite_targets)))
   action = 'distribute' if testsuite.want_to_distribute else 'run'
   if args_prepare['update_passes']: action = 'update and ' + action
   print('Testsuite will {} {} tests'.format(action, len(testsuite.tests_prepared)))

##################################################################

################################################################################
#
# TODO: This part has to be refactored into the new arnold.test module
#
def list_tests(target, source, env):
   for file in source:
      name = os.path.basename(os.path.dirname(str(file)))
      with open(str(file), 'r') as f:
         summary = f.readline().strip('\n')
      print_safe('%s: %s' % (name, summary))
   print_safe("%s matches" % len(source))
   return None

def list_test_scripts(target, source, env):
   for file in source:
      name = os.path.basename(os.path.dirname(str(file)))
      test = Test.CreateTest(name, globals())
      test.generate_command_line(os.path.join('testsuite', name))
      print_safe("%s:" % name)
      for line in test.script.splitlines():
         print_safe("  %s" % line)
      print_safe("")
   print_safe("%s matches" % len(source))
   return None

def list_test_errors(target, source, env):
   for file in source:
      dirname = os.path.dirname(str(file))
      name = os.path.basename(dirname)
      with open(str(file), 'r') as f:
         value = f.readline().strip('\n')
         if value != 'OK':
            print_safe('%s: %s' % (name, value))
            with open(os.path.join(dirname, name + '.log'), 'r') as l:
               while True:
                  line = l.readline().strip('\n')
                  if line == "":
                     # We have reached the end of file.
                     break
                  if (line.lower().find('error') != -1) or (line.lower().find('warning') != -1):
                     print_safe(line)
   return None
listtesterrors_bld = Builder(action = Action(list_test_errors, "Listing broken tests..."))

## Creates a new test in the testsuite directory
def make_test(target, source, env):
   testpath = str(target[0])
   testname = os.path.basename(testpath)
   os.mkdir(testpath)
   os.mkdir(os.path.join(testpath, 'data'))
   os.mkdir(os.path.join(testpath, 'ref'))
   shutil.copy(os.path.join(testsuite_common, 'README.template'), os.path.join(testpath, 'README'))
   shutil.copy(os.path.join(testsuite_common, 'test.ass.template'), os.path.join(testpath, 'data', 'test.ass'))
   return None ## always succeeds

## Make a list of groups
def list_groups(target, source, env):

   def count_tests_in_group(group):
      count = 0
      tests = find_test_group(group, env)
      count += len(tests)
      for test in tests:
         if not test.startswith('test_'):
            # We found a nested group, count individual tests
            n = count_tests_in_group(test)
            count = count + n - 1
      return count

   def list_groups_in_file(file):
      with open(file, 'r') as f:
         comment = ''
         for line in f.readlines():
            line = line.lstrip(' \t')
            if line.startswith('#'):
               comment = line[1:-1]
               continue
            (l, s, r) = line.partition(':')
            if s == ':':
               group = l.rstrip()
               count = count_tests_in_group(group)
               print_safe("%s(%s) \t %s" % (group, count, comment))

   # First search the user local file for this group (only if the local file exists)
   if os.path.exists(os.path.join('testsuite', 'groups.local')):
      list_groups_in_file(os.path.join('testsuite', 'groups.local'))

   list_groups_in_file(os.path.join('testsuite', 'groups'))

   return None ## always succeeds

test_env.Append(BUILDERS = {'ListTests'      : Builder(action = Action(list_tests       , "Listing tests..."          ))})
test_env.Append(BUILDERS = {'ListTestScripts': Builder(action = Action(list_test_scripts, "Listing test scripts..."   ))})
test_env.Append(BUILDERS = {'ListGroups'     : Builder(action = Action(list_groups      , "Listing test groups..."    ))})
test_env.Append(BUILDERS = {'ListTestErrors' : Builder(action = Action(list_test_errors , "Listing broken tests..."   ))})
test_env.Append(BUILDERS = {'MakeTest'       : Builder(action = Action(make_test        , "Creating test '$TARGET'..."))})

## First stage. Process build targets, expanding the groups and patterns into single tests
TAGS = []
PATTERNS = []
index = 0
while True:
   if index == len(BUILD_TARGETS):
      break
   target = BUILD_TARGETS[index]
   (l, s, r) = target.partition(':')
   # Target "maketest[:testname]", creates a new test in the testsuite (defaults to the next available name in ascending order)
   if l == 'maketest':
      if r == '':
         r = get_next_test_name()
      if r != '':
         testpath = os.path.abspath(os.path.join('testsuite', 'test_' + r))
         if os.path.exists(testpath):
            print_safe("ERROR: Test %s already exists!" % r)
         else:
            MAKETEST = test_env.MakeTest(testpath, None)
            test_env.Alias(target, MAKETEST)
            test_env.AlwaysBuild(MAKETEST)
         index += 1
   elif l == 'testlist':
      src = []
      tests = get_test_list(r, test_env, PATTERNS, TAGS)
      for t in tests:
         if os.path.exists(os.path.join('testsuite', t, 'README')):
            src.append(os.path.join(t, 'README'))
      src.sort()
      TESTLIST = test_env.ListTests(target, src)
      test_env.Alias(target, TESTLIST)
      test_env.AlwaysBuild(TESTLIST)
      index += 1
   elif l == 'testscripts':
      src = []
      tests = get_test_list(r, test_env, PATTERNS, TAGS)
      for t in tests:
         if os.path.exists(os.path.join('testsuite', t, 'README')):
            src.append(os.path.join(t, 'README'))
      src.sort()
      TESTSCRIPTS = test_env.ListTestScripts(target, src)
      test_env.Alias(target, TESTSCRIPTS)
      test_env.AlwaysBuild(TESTSCRIPTS)
      index += 1
   elif l == 'testgroups':
      TESTGROUPS = test_env.ListGroups(target, None)
      test_env.Alias(target, TESTGROUPS)
      test_env.AlwaysBuild(TESTGROUPS)
      index += 1
   elif l == 'testerrors':
      testlist = glob.glob(os.path.join(test_env.Dir('.').abspath, 'test_*'))
      SRC = []
      for name in testlist:
         SRC += [os.path.join(os.path.basename(name), 'STATUS')]
      SRC.sort()
      TESTERRORS = test_env.ListTestErrors(target, SRC)
      test_env.Alias(target, TESTERRORS)
      test_env.AlwaysBuild(TESTERRORS)
      index += 1
   else:
      index += 1
#
# TODO: This part has to be refactored into the new arnold.test module
#
################################################################################
TESTSUITE = None

if len(testsuite_targets) > 0:
   TESTSUITE_TESTS.extend(test.scons_target for test in (testsuite.tests[_] for _ in testsuite.tests_prepared))
   TESTSUITE_REPORT = TESTSUITE_TARGET
   for target in TESTSUITE_TARGET:
      BUILD_TARGETS.append(target if is_string(target) else target.path)

   TESTSUITE = {x: env.Flatten(eval(x)) for x in TARGETS}

Return('TESTSUITE')
