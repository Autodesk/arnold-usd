#usda 1.0
(
    defaultPrim = "grid2"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "grid1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    rel material:binding = </materials/collect1>
    matrix4d xformOp:transform = ( (0.39, 0, 0, 0), (0, 0, 1, 0), (0, -0.219703, 0, 0), (0, 0, 0, 1) )
    matrix4d xformOp:transform:xform = ( (0.39, 0, 0, 0), (0, 0.219703, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        texCoord2f[] primvars:st = [(0, 0), (0.11111112, 0), (0.11111112, 0.11111112), (0, 0.11111112), (0.11111112, 0), (0.22222224, 0), (0.22222224, 0.11111112), (0.11111112, 0.11111112), (0.22222224, 0), (0.33333334, 0), (0.33333334, 0.11111112), (0.22222224, 0.11111112), (0.33333334, 0), (0.44444448, 0), (0.44444448, 0.11111112), (0.33333334, 0.11111112), (0.44444448, 0), (0.5555556, 0), (0.5555556, 0.11111112), (0.44444448, 0.11111112), (0.5555556, 0), (0.6666667, 0), (0.6666667, 0.11111112), (0.5555556, 0.11111112), (0.6666667, 0), (0.77777785, 0), (0.77777785, 0.11111112), (0.6666667, 0.11111112), (0.77777785, 0), (0.88888896, 0), (0.88888896, 0.11111112), (0.77777785, 0.11111112), (0.88888896, 0), (1, 0), (1, 0.11111112), (0.88888896, 0.11111112), (0, 0.11111112), (0.11111112, 0.11111112), (0.11111112, 0.22222224), (0, 0.22222224), (0.11111112, 0.11111112), (0.22222224, 0.11111112), (0.22222224, 0.22222224), (0.11111112, 0.22222224), (0.22222224, 0.11111112), (0.33333334, 0.11111112), (0.33333334, 0.22222224), (0.22222224, 0.22222224), (0.33333334, 0.11111112), (0.44444448, 0.11111112), (0.44444448, 0.22222224), (0.33333334, 0.22222224), (0.44444448, 0.11111112), (0.5555556, 0.11111112), (0.5555556, 0.22222224), (0.44444448, 0.22222224), (0.5555556, 0.11111112), (0.6666667, 0.11111112), (0.6666667, 0.22222224), (0.5555556, 0.22222224), (0.6666667, 0.11111112), (0.77777785, 0.11111112), (0.77777785, 0.22222224), (0.6666667, 0.22222224), (0.77777785, 0.11111112), (0.88888896, 0.11111112), (0.88888896, 0.22222224), (0.77777785, 0.22222224), (0.88888896, 0.11111112), (1, 0.11111112), (1, 0.22222224), (0.88888896, 0.22222224), (0, 0.22222224), (0.11111112, 0.22222224), (0.11111112, 0.33333334), (0, 0.33333334), (0.11111112, 0.22222224), (0.22222224, 0.22222224), (0.22222224, 0.33333334), (0.11111112, 0.33333334), (0.22222224, 0.22222224), (0.33333334, 0.22222224), (0.33333334, 0.33333334), (0.22222224, 0.33333334), (0.33333334, 0.22222224), (0.44444448, 0.22222224), (0.44444448, 0.33333334), (0.33333334, 0.33333334), (0.44444448, 0.22222224), (0.5555556, 0.22222224), (0.5555556, 0.33333334), (0.44444448, 0.33333334), (0.5555556, 0.22222224), (0.6666667, 0.22222224), (0.6666667, 0.33333334), (0.5555556, 0.33333334), (0.6666667, 0.22222224), (0.77777785, 0.22222224), (0.77777785, 0.33333334), (0.6666667, 0.33333334), (0.77777785, 0.22222224), (0.88888896, 0.22222224), (0.88888896, 0.33333334), (0.77777785, 0.33333334), (0.88888896, 0.22222224), (1, 0.22222224), (1, 0.33333334), (0.88888896, 0.33333334), (0, 0.33333334), (0.11111112, 0.33333334), (0.11111112, 0.44444448), (0, 0.44444448), (0.11111112, 0.33333334), (0.22222224, 0.33333334), (0.22222224, 0.44444448), (0.11111112, 0.44444448), (0.22222224, 0.33333334), (0.33333334, 0.33333334), (0.33333334, 0.44444448), (0.22222224, 0.44444448), (0.33333334, 0.33333334), (0.44444448, 0.33333334), (0.44444448, 0.44444448), (0.33333334, 0.44444448), (0.44444448, 0.33333334), (0.5555556, 0.33333334), (0.5555556, 0.44444448), (0.44444448, 0.44444448), (0.5555556, 0.33333334), (0.6666667, 0.33333334), (0.6666667, 0.44444448), (0.5555556, 0.44444448), (0.6666667, 0.33333334), (0.77777785, 0.33333334), (0.77777785, 0.44444448), (0.6666667, 0.44444448), (0.77777785, 0.33333334), (0.88888896, 0.33333334), (0.88888896, 0.44444448), (0.77777785, 0.44444448), (0.88888896, 0.33333334), (1, 0.33333334), (1, 0.44444448), (0.88888896, 0.44444448), (0, 0.44444448), (0.11111112, 0.44444448), (0.11111112, 0.5555556), (0, 0.5555556), (0.11111112, 0.44444448), (0.22222224, 0.44444448), (0.22222224, 0.5555556), (0.11111112, 0.5555556), (0.22222224, 0.44444448), (0.33333334, 0.44444448), (0.33333334, 0.5555556), (0.22222224, 0.5555556), (0.33333334, 0.44444448), (0.44444448, 0.44444448), (0.44444448, 0.5555556), (0.33333334, 0.5555556), (0.44444448, 0.44444448), (0.5555556, 0.44444448), (0.5555556, 0.5555556), (0.44444448, 0.5555556), (0.5555556, 0.44444448), (0.6666667, 0.44444448), (0.6666667, 0.5555556), (0.5555556, 0.5555556), (0.6666667, 0.44444448), (0.77777785, 0.44444448), (0.77777785, 0.5555556), (0.6666667, 0.5555556), (0.77777785, 0.44444448), (0.88888896, 0.44444448), (0.88888896, 0.5555556), (0.77777785, 0.5555556), (0.88888896, 0.44444448), (1, 0.44444448), (1, 0.5555556), (0.88888896, 0.5555556), (0, 0.5555556), (0.11111112, 0.5555556), (0.11111112, 0.6666667), (0, 0.6666667), (0.11111112, 0.5555556), (0.22222224, 0.5555556), (0.22222224, 0.6666667), (0.11111112, 0.6666667), (0.22222224, 0.5555556), (0.33333334, 0.5555556), (0.33333334, 0.6666667), (0.22222224, 0.6666667), (0.33333334, 0.5555556), (0.44444448, 0.5555556), (0.44444448, 0.6666667), (0.33333334, 0.6666667), (0.44444448, 0.5555556), (0.5555556, 0.5555556), (0.5555556, 0.6666667), (0.44444448, 0.6666667), (0.5555556, 0.5555556), (0.6666667, 0.5555556), (0.6666667, 0.6666667), (0.5555556, 0.6666667), (0.6666667, 0.5555556), (0.77777785, 0.5555556), (0.77777785, 0.6666667), (0.6666667, 0.6666667), (0.77777785, 0.5555556), (0.88888896, 0.5555556), (0.88888896, 0.6666667), (0.77777785, 0.6666667), (0.88888896, 0.5555556), (1, 0.5555556), (1, 0.6666667), (0.88888896, 0.6666667), (0, 0.6666667), (0.11111112, 0.6666667), (0.11111112, 0.77777785), (0, 0.77777785), (0.11111112, 0.6666667), (0.22222224, 0.6666667), (0.22222224, 0.77777785), (0.11111112, 0.77777785), (0.22222224, 0.6666667), (0.33333334, 0.6666667), (0.33333334, 0.77777785), (0.22222224, 0.77777785), (0.33333334, 0.6666667), (0.44444448, 0.6666667), (0.44444448, 0.77777785), (0.33333334, 0.77777785), (0.44444448, 0.6666667), (0.5555556, 0.6666667), (0.5555556, 0.77777785), (0.44444448, 0.77777785), (0.5555556, 0.6666667), (0.6666667, 0.6666667), (0.6666667, 0.77777785), (0.5555556, 0.77777785), (0.6666667, 0.6666667), (0.77777785, 0.6666667), (0.77777785, 0.77777785), (0.6666667, 0.77777785), (0.77777785, 0.6666667), (0.88888896, 0.6666667), (0.88888896, 0.77777785), (0.77777785, 0.77777785), (0.88888896, 0.6666667), (1, 0.6666667), (1, 0.77777785), (0.88888896, 0.77777785), (0, 0.77777785), (0.11111112, 0.77777785), (0.11111112, 0.88888896), (0, 0.88888896), (0.11111112, 0.77777785), (0.22222224, 0.77777785), (0.22222224, 0.88888896), (0.11111112, 0.88888896), (0.22222224, 0.77777785), (0.33333334, 0.77777785), (0.33333334, 0.88888896), (0.22222224, 0.88888896), (0.33333334, 0.77777785), (0.44444448, 0.77777785), (0.44444448, 0.88888896), (0.33333334, 0.88888896), (0.44444448, 0.77777785), (0.5555556, 0.77777785), (0.5555556, 0.88888896), (0.44444448, 0.88888896), (0.5555556, 0.77777785), (0.6666667, 0.77777785), (0.6666667, 0.88888896), (0.5555556, 0.88888896), (0.6666667, 0.77777785), (0.77777785, 0.77777785), (0.77777785, 0.88888896), (0.6666667, 0.88888896), (0.77777785, 0.77777785), (0.88888896, 0.77777785), (0.88888896, 0.88888896), (0.77777785, 0.88888896), (0.88888896, 0.77777785), (1, 0.77777785), (1, 0.88888896), (0.88888896, 0.88888896), (0, 0.88888896), (0.11111112, 0.88888896), (0.11111112, 1), (0, 1), (0.11111112, 0.88888896), (0.22222224, 0.88888896), (0.22222224, 1), (0.11111112, 1), (0.22222224, 0.88888896), (0.33333334, 0.88888896), (0.33333334, 1), (0.22222224, 1), (0.33333334, 0.88888896), (0.44444448, 0.88888896), (0.44444448, 1), (0.33333334, 1), (0.44444448, 0.88888896), (0.5555556, 0.88888896), (0.5555556, 1), (0.44444448, 1), (0.5555556, 0.88888896), (0.6666667, 0.88888896), (0.6666667, 1), (0.5555556, 1), (0.6666667, 0.88888896), (0.77777785, 0.88888896), (0.77777785, 1), (0.6666667, 1), (0.77777785, 0.88888896), (0.88888896, 0.88888896), (0.88888896, 1), (0.77777785, 1), (0.88888896, 0.88888896), (1, 0.88888896), (1, 1), (0.88888896, 1)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
    }
}

def Xform "grid2" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    rel material:binding = </materials/collect2>
    matrix4d xformOp:transform = ( (0.585, 0, 0, 0), (0, 0, 1.5, 0), (0, -0.30855396738016855, 0, 0), (0, 0, -0.7853996157646179, 1) )
    matrix4d xformOp:transform:xform = ( (0.585, 0, 0, 0), (0, 0.30855396738016855, 0, 0), (0, 0, 1.5, 0), (0, 0, -0.5235997438430786, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        texCoord2f[] primvars:st = [(0, 0), (0.11111112, 0), (0.11111112, 0.11111112), (0, 0.11111112), (0.11111112, 0), (0.22222224, 0), (0.22222224, 0.11111112), (0.11111112, 0.11111112), (0.22222224, 0), (0.33333334, 0), (0.33333334, 0.11111112), (0.22222224, 0.11111112), (0.33333334, 0), (0.44444448, 0), (0.44444448, 0.11111112), (0.33333334, 0.11111112), (0.44444448, 0), (0.5555556, 0), (0.5555556, 0.11111112), (0.44444448, 0.11111112), (0.5555556, 0), (0.6666667, 0), (0.6666667, 0.11111112), (0.5555556, 0.11111112), (0.6666667, 0), (0.77777785, 0), (0.77777785, 0.11111112), (0.6666667, 0.11111112), (0.77777785, 0), (0.88888896, 0), (0.88888896, 0.11111112), (0.77777785, 0.11111112), (0.88888896, 0), (1, 0), (1, 0.11111112), (0.88888896, 0.11111112), (0, 0.11111112), (0.11111112, 0.11111112), (0.11111112, 0.22222224), (0, 0.22222224), (0.11111112, 0.11111112), (0.22222224, 0.11111112), (0.22222224, 0.22222224), (0.11111112, 0.22222224), (0.22222224, 0.11111112), (0.33333334, 0.11111112), (0.33333334, 0.22222224), (0.22222224, 0.22222224), (0.33333334, 0.11111112), (0.44444448, 0.11111112), (0.44444448, 0.22222224), (0.33333334, 0.22222224), (0.44444448, 0.11111112), (0.5555556, 0.11111112), (0.5555556, 0.22222224), (0.44444448, 0.22222224), (0.5555556, 0.11111112), (0.6666667, 0.11111112), (0.6666667, 0.22222224), (0.5555556, 0.22222224), (0.6666667, 0.11111112), (0.77777785, 0.11111112), (0.77777785, 0.22222224), (0.6666667, 0.22222224), (0.77777785, 0.11111112), (0.88888896, 0.11111112), (0.88888896, 0.22222224), (0.77777785, 0.22222224), (0.88888896, 0.11111112), (1, 0.11111112), (1, 0.22222224), (0.88888896, 0.22222224), (0, 0.22222224), (0.11111112, 0.22222224), (0.11111112, 0.33333334), (0, 0.33333334), (0.11111112, 0.22222224), (0.22222224, 0.22222224), (0.22222224, 0.33333334), (0.11111112, 0.33333334), (0.22222224, 0.22222224), (0.33333334, 0.22222224), (0.33333334, 0.33333334), (0.22222224, 0.33333334), (0.33333334, 0.22222224), (0.44444448, 0.22222224), (0.44444448, 0.33333334), (0.33333334, 0.33333334), (0.44444448, 0.22222224), (0.5555556, 0.22222224), (0.5555556, 0.33333334), (0.44444448, 0.33333334), (0.5555556, 0.22222224), (0.6666667, 0.22222224), (0.6666667, 0.33333334), (0.5555556, 0.33333334), (0.6666667, 0.22222224), (0.77777785, 0.22222224), (0.77777785, 0.33333334), (0.6666667, 0.33333334), (0.77777785, 0.22222224), (0.88888896, 0.22222224), (0.88888896, 0.33333334), (0.77777785, 0.33333334), (0.88888896, 0.22222224), (1, 0.22222224), (1, 0.33333334), (0.88888896, 0.33333334), (0, 0.33333334), (0.11111112, 0.33333334), (0.11111112, 0.44444448), (0, 0.44444448), (0.11111112, 0.33333334), (0.22222224, 0.33333334), (0.22222224, 0.44444448), (0.11111112, 0.44444448), (0.22222224, 0.33333334), (0.33333334, 0.33333334), (0.33333334, 0.44444448), (0.22222224, 0.44444448), (0.33333334, 0.33333334), (0.44444448, 0.33333334), (0.44444448, 0.44444448), (0.33333334, 0.44444448), (0.44444448, 0.33333334), (0.5555556, 0.33333334), (0.5555556, 0.44444448), (0.44444448, 0.44444448), (0.5555556, 0.33333334), (0.6666667, 0.33333334), (0.6666667, 0.44444448), (0.5555556, 0.44444448), (0.6666667, 0.33333334), (0.77777785, 0.33333334), (0.77777785, 0.44444448), (0.6666667, 0.44444448), (0.77777785, 0.33333334), (0.88888896, 0.33333334), (0.88888896, 0.44444448), (0.77777785, 0.44444448), (0.88888896, 0.33333334), (1, 0.33333334), (1, 0.44444448), (0.88888896, 0.44444448), (0, 0.44444448), (0.11111112, 0.44444448), (0.11111112, 0.5555556), (0, 0.5555556), (0.11111112, 0.44444448), (0.22222224, 0.44444448), (0.22222224, 0.5555556), (0.11111112, 0.5555556), (0.22222224, 0.44444448), (0.33333334, 0.44444448), (0.33333334, 0.5555556), (0.22222224, 0.5555556), (0.33333334, 0.44444448), (0.44444448, 0.44444448), (0.44444448, 0.5555556), (0.33333334, 0.5555556), (0.44444448, 0.44444448), (0.5555556, 0.44444448), (0.5555556, 0.5555556), (0.44444448, 0.5555556), (0.5555556, 0.44444448), (0.6666667, 0.44444448), (0.6666667, 0.5555556), (0.5555556, 0.5555556), (0.6666667, 0.44444448), (0.77777785, 0.44444448), (0.77777785, 0.5555556), (0.6666667, 0.5555556), (0.77777785, 0.44444448), (0.88888896, 0.44444448), (0.88888896, 0.5555556), (0.77777785, 0.5555556), (0.88888896, 0.44444448), (1, 0.44444448), (1, 0.5555556), (0.88888896, 0.5555556), (0, 0.5555556), (0.11111112, 0.5555556), (0.11111112, 0.6666667), (0, 0.6666667), (0.11111112, 0.5555556), (0.22222224, 0.5555556), (0.22222224, 0.6666667), (0.11111112, 0.6666667), (0.22222224, 0.5555556), (0.33333334, 0.5555556), (0.33333334, 0.6666667), (0.22222224, 0.6666667), (0.33333334, 0.5555556), (0.44444448, 0.5555556), (0.44444448, 0.6666667), (0.33333334, 0.6666667), (0.44444448, 0.5555556), (0.5555556, 0.5555556), (0.5555556, 0.6666667), (0.44444448, 0.6666667), (0.5555556, 0.5555556), (0.6666667, 0.5555556), (0.6666667, 0.6666667), (0.5555556, 0.6666667), (0.6666667, 0.5555556), (0.77777785, 0.5555556), (0.77777785, 0.6666667), (0.6666667, 0.6666667), (0.77777785, 0.5555556), (0.88888896, 0.5555556), (0.88888896, 0.6666667), (0.77777785, 0.6666667), (0.88888896, 0.5555556), (1, 0.5555556), (1, 0.6666667), (0.88888896, 0.6666667), (0, 0.6666667), (0.11111112, 0.6666667), (0.11111112, 0.77777785), (0, 0.77777785), (0.11111112, 0.6666667), (0.22222224, 0.6666667), (0.22222224, 0.77777785), (0.11111112, 0.77777785), (0.22222224, 0.6666667), (0.33333334, 0.6666667), (0.33333334, 0.77777785), (0.22222224, 0.77777785), (0.33333334, 0.6666667), (0.44444448, 0.6666667), (0.44444448, 0.77777785), (0.33333334, 0.77777785), (0.44444448, 0.6666667), (0.5555556, 0.6666667), (0.5555556, 0.77777785), (0.44444448, 0.77777785), (0.5555556, 0.6666667), (0.6666667, 0.6666667), (0.6666667, 0.77777785), (0.5555556, 0.77777785), (0.6666667, 0.6666667), (0.77777785, 0.6666667), (0.77777785, 0.77777785), (0.6666667, 0.77777785), (0.77777785, 0.6666667), (0.88888896, 0.6666667), (0.88888896, 0.77777785), (0.77777785, 0.77777785), (0.88888896, 0.6666667), (1, 0.6666667), (1, 0.77777785), (0.88888896, 0.77777785), (0, 0.77777785), (0.11111112, 0.77777785), (0.11111112, 0.88888896), (0, 0.88888896), (0.11111112, 0.77777785), (0.22222224, 0.77777785), (0.22222224, 0.88888896), (0.11111112, 0.88888896), (0.22222224, 0.77777785), (0.33333334, 0.77777785), (0.33333334, 0.88888896), (0.22222224, 0.88888896), (0.33333334, 0.77777785), (0.44444448, 0.77777785), (0.44444448, 0.88888896), (0.33333334, 0.88888896), (0.44444448, 0.77777785), (0.5555556, 0.77777785), (0.5555556, 0.88888896), (0.44444448, 0.88888896), (0.5555556, 0.77777785), (0.6666667, 0.77777785), (0.6666667, 0.88888896), (0.5555556, 0.88888896), (0.6666667, 0.77777785), (0.77777785, 0.77777785), (0.77777785, 0.88888896), (0.6666667, 0.88888896), (0.77777785, 0.77777785), (0.88888896, 0.77777785), (0.88888896, 0.88888896), (0.77777785, 0.88888896), (0.88888896, 0.77777785), (1, 0.77777785), (1, 0.88888896), (0.88888896, 0.88888896), (0, 0.88888896), (0.11111112, 0.88888896), (0.11111112, 1), (0, 1), (0.11111112, 0.88888896), (0.22222224, 0.88888896), (0.22222224, 1), (0.11111112, 1), (0.22222224, 0.88888896), (0.33333334, 0.88888896), (0.33333334, 1), (0.22222224, 1), (0.33333334, 0.88888896), (0.44444448, 0.88888896), (0.44444448, 1), (0.33333334, 1), (0.44444448, 0.88888896), (0.5555556, 0.88888896), (0.5555556, 1), (0.44444448, 1), (0.5555556, 0.88888896), (0.6666667, 0.88888896), (0.6666667, 1), (0.5555556, 1), (0.6666667, 0.88888896), (0.77777785, 0.88888896), (0.77777785, 1), (0.6666667, 1), (0.77777785, 0.88888896), (0.88888896, 0.88888896), (0.88888896, 1), (0.77777785, 1), (0.88888896, 0.88888896), (1, 0.88888896), (1, 1), (0.88888896, 1)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = None
        uniform token subdivisionScheme = "none"
    }
}

def Scope "materials"
{
    def Material "arnold_materialbuilder1"
    {
        token outputs:arnold:surface.connect = </materials/arnold_materialbuilder1/checkerboard1.outputs:shader>

        def Shader "checkerboard1"
        {
            uniform token info:id = "arnold:checkerboard"
            color3f inputs:color1 = (1, 1, 1)
            color3f inputs:color2 = (0, 0, 0)
            float inputs:contrast = 1
            float inputs:filter_offset = 0
            float inputs:filter_strength = 1
            float inputs:u_frequency = 4
            float inputs:u_offset = 0
            string inputs:uvset = ""
            float inputs:v_frequency = 4
            float inputs:v_offset = 0
            token outputs:shader
        }
    }

    def Material "collect1"
    {
        token outputs:arnold:surface.connect = </materials/collect1/checkerboard1.outputs:shader>

        def Shader "checkerboard1"
        {
            uniform token info:id = "arnold:checkerboard"
            color3f inputs:color1 = (1, 1, 1)
            color3f inputs:color2 = (0, 0, 0)
            float inputs:contrast = 1
            float inputs:filter_offset = 0
            float inputs:filter_strength = 1
            float inputs:u_frequency = 4
            float inputs:u_offset = 0
            string inputs:uvset = ""
            float inputs:v_frequency = 4
            float inputs:v_offset = 0
            token outputs:shader
        }
    }

    def Material "principledshader1"
    {
    }

    def Material "arnold_materialbuilder2"
    {
        token outputs:arnold:surface.connect = </materials/arnold_materialbuilder2/flat1.outputs:shader>

        def Shader "flat1"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:shader
        }
    }

    def Material "collect2"
    {
        token outputs:arnold:surface.connect = </materials/collect2/flat1.outputs:shader>

        def Shader "flat1"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (1, 0, 0)
            token outputs:shader
        }
    }

    def Material "principledshader2"
    {
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["KarmaCameraSettingsAPI", "HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 14.348901
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        float4 karma:camera:window = (-1, 1, -1, 1)
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 9.34890079498291, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def Scope "Products"
    {
        def Scope "Vars"
        {
            def RenderVar "C"
            {
                custom string arnold:filter = "box_filter"
                token dataType = "color4f"
                custom string driver:parameters:aov:channel_prefix = ""
                custom int driver:parameters:aov:clearValue = 0
                custom token driver:parameters:aov:format = "color4f"
                custom bool driver:parameters:aov:multiSampled = 0
                custom string driver:parameters:aov:name = "C"
                string sourceName = "RGBA"
                token sourceType = "raw"
            }
        }

        def RenderProduct "deep"
        {
            rel orderedVars = </Render/Products/Vars/C>
            token productName = "testrender.tif"
        }
    }

    def RenderSettings "rendersettings"
    {
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            1: 1,
        }
        token aspectRatioConformPolicy = "cropAperture"
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (-0.2, 0.2, 1.8, 2.2)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = </Render/Products/deep>
        int2 resolution = (320, 240)
    }
}

