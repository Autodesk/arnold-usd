#usda 1.0

def ArnoldOptions "options"
{
    int arnold:AA_samples = 3
    string arnold:camera = "/persp/perspShape"
    float arnold:frame = 1
    int arnold:GI_diffuse_depth = 1
    int arnold:GI_specular_depth = 1
    int arnold:GI_transmission_depth = 8
    string arnold:name = "options"
    string[] arnold:outputs = ["RGBA RGBA myfilter mydriver"]
    int arnold:threads = 40
    int arnold:xres = 160
    int arnold:yres = 120
    string primvars:render_layer = "defaultRenderLayer" (
        elementSize = 1
        interpolation = "constant"
    )
}

def ArnoldGaussianFilter "myfilter"
{
    string arnold:name = "myfilter"
}

def ArnoldDriverTiff "mydriver"
{
    string arnold:color_space = ""
    string arnold:filename = "testrender.tif"
    string arnold:name = "mydriver"
}

def "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov = [54.432224]
        float2[] primvars:arnold:lens_shift = [(0, 0)]
        float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 38.571426
        matrix4d xformOp:transform.timeSamples = {
            0: ( (0.8461931943893433, 0, -0.5328762531280518, 0), (-0.22973105311393738, 0.9022969007492065, -0.3648067116737366, 0), (0.48081260919570923, 0.43111518025398254, 0.7635174989700317, 0), (5.792327880859375, 1.6159213781356812, 3.0825414657592773, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "directionalLight1"
{
    def DistantLight "directionalLightShape1"
    {
        float inputs:angle = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 3
        vector3f[] primvars:arnold:direction = [(0, 0, -1)]
        string primvars:dcc_name = "directionalLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        float inputs:specular = 1
    }
}

def "aiSkyDomeLight1"
{
    def DomeLight "aiSkyDomeLightShape1"
    {
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 0
        float primvars:arnold:camera = 0
        string primvars:dcc_name = "aiSkyDomeLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        float inputs:specular = 1
        token inputs:texture:format = "latlong"
       
    }
}

def "aiStandIn"
{
    def ArnoldProcedural "aiStandInShape"
    {
        string arnold:filename = "shape.ass"
        string arnold:namespace = "test"
        string primvars:dcc_name = "aiStandInShape" (
            elementSize = 1
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (4.079866409301758, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "aiStandIn1"
{
    def ArnoldProcedural "aiStandIn1Shape"
    {
        string arnold:filename = "shader.ass"
        string arnold:namespace = "test"
        string primvars:dcc_name = "aiStandIn1Shape" (
            elementSize = 1
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 8.661023139953613, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

