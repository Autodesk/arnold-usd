#usda 1.0
(
    defaultPrim = "Camera"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "Camera"
{
    matrix4d xformOp:transform = ( (0.6859206557273865, 0.7276763319969177, 0, 0), (-0.32401347160339355, 0.305420845746994, 0.8953956365585327, 0), (0.6515582203865051, -0.6141703724861145, 0.44527140259742737, 0), (7.358891487121582, -6.925790786743164, 4.958309173583984, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "Camera"
    {
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange = (0.1, 100)
        float2 clippingRange.timeSamples = {
            1: (0.1, 100),
        }
        float focalLength = 50
        float focalLength.timeSamples = {
            1: 29.104168,
        }
        float focusDistance.timeSamples = {
            1: 19.402319,
        }
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture = 7
        float horizontalApertureOffset = 0
        token projection = "perspective"
        float verticalAperture = 3
        float verticalApertureOffset = 0
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            1: ( (0.984807758202649, 0.07732057651416514, -0.15548382272208344, 0), (-0.07184715464292857, 0.9965919497040774, 0.040527791347228226, 0), (0.15808755691581944, -0.028741006718486672, 0.9870067355576664, 0), (4.441157047164312, -0.4047262504611302, 18.888129723051406, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Mesh "Cube1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
    uniform token orientation = "rightHanded"
    point3f[] points = [(-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1), (-1, 1, -1), (1, 1, -1), (-1, -1, -1), (1, -1, -1)]
    uint primvars:arnold:id = 528272281
    bool primvars:arnold:smoothing = 1
    uchar primvars:arnold:subdiv_iterations = 1
    string primvars:dcc_name = "pCubeShape1" (
        elementSize = 1
        interpolation = "constant"
    )
    vector3f[] primvars:normals (
        elementSize = 24
        interpolation = "faceVarying"
    )
    vector3f[] primvars:normals.timeSamples = {
        0: [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)],
    }
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
        elementSize = 14
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
    uniform token subdivisionScheme = "none"
    
    rel material:binding = </mtl/standard_surface1>
    matrix4d xformOp:transform= ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.2, 1.2, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Cube "Cube2" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
    uniform token orientation = "rightHanded"
    point3f[] points = [(-1, -1, 1), (1, -1, 1), (-1, 1, 1), (1, 1, 1), (-1, 1, -1), (1, 1, -1), (-1, -1, -1), (1, -1, -1)]
    uint primvars:arnold:id = 528272281
    bool primvars:arnold:smoothing = 1
    uchar primvars:arnold:subdiv_iterations = 1
    string primvars:dcc_name = "pCubeShape1" (
        elementSize = 1
        interpolation = "constant"
    )
    vector3f[] primvars:normals (
        elementSize = 24
        interpolation = "faceVarying"
    )
    vector3f[] primvars:normals.timeSamples = {
        0: [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)],
    }
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
        elementSize = 14
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
    uniform token subdivisionScheme = "none"

    rel material:binding = </mtl/standard_surface2>
    matrix4d xformOp:transform= ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.2, -1.2, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}


def Scope "mtl"
{
    def Material "standard_surface1" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        token outputs:mtlx:surface.connect = </mtl/standard_surface1/standard_surface1.outputs:out>
        uniform float2 ui:nodegraph:node:pos = (0.06372555, 0.07679722)

        def Shader "standard_surface1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            color3f inputs:base_color.connect = </mtl/standard_surface1/image1.outputs:out>
            token outputs:out
            uniform float2 ui:nodegraph:node:pos = (-1.067439, -0.12619333)
        }

        def Shader "image1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @../common/bricks.png@

            color3f outputs:out
            uniform float2 ui:nodegraph:node:pos = (-2.4364111, -0.08332889)
        }
    }
    def Material "standard_surface2" (
        prepend apiSchemas = ["NodeGraphNodeAPI"]
    )
    {
        token outputs:mtlx:surface.connect = </mtl/standard_surface2/standard_surface1.outputs:out>
        uniform float2 ui:nodegraph:node:pos = (0.06372555, 0.07679722)

        def Shader "standard_surface1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_standard_surface_surfaceshader"
            color3f inputs:base_color.connect = </mtl/standard_surface2/image1.outputs:out>
            token outputs:out
        }

        def Shader "image1" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @../common/bricks.png@ (
                colorSpace = "ACES2065-1"
            )
            color3f outputs:out
        }
    }
}

def DomeLight "Light"
{
    float inputs:intensity = 1
    float primvars:arnold:camera = 0
}
