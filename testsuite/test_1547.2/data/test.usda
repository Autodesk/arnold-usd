#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Cylinder "cylinder" (
    kind = "component"
    variants = {
        string geo = "hard"
        string mtl = "default"
    }
)
{
    matrix4d xformOp:transform = ( (0.407109895139661, 0, -0.29027837204892515, 0), (0, 0.5, 0, 0), (0.29027837204892515, 0, 0.407109895139661, 0), (1.7827476077297564, 0.6497753431768094, -0.7735778195824838, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Sphere "sphereLight" (
    kind = "component"
)
{
    bool primvars:arnold:light = 1 (
        interpolation = "constant"
    )
    bool primvars:arnold:light:cast_shadows = 1 (
        interpolation = "constant"
    )
    color3f primvars:arnold:light:color = (0.70474815, 0.8565401, 0.73164797) (
        interpolation = "constant"
    )
    float primvars:arnold:light:diffuse = 1 (
        interpolation = "constant"
    )
    float primvars:arnold:light:exposure = 2.997 (
        interpolation = "constant"
    )
    float primvars:arnold:light:indirect = 0 (
        interpolation = "constant"
    )
    float primvars:arnold:light:intensity = 2 (
        interpolation = "constant"
    )
    int primvars:arnold:light:max_bounces = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:light:normalize = 1 (
        interpolation = "constant"
    )
    int primvars:arnold:light:samples = 10 (
        interpolation = "constant"
    )
    float primvars:arnold:light:specular = 0 (
        interpolation = "constant"
    )
    float primvars:arnold:light:sss = 0 (
        interpolation = "constant"
    )
    float primvars:arnold:light:volume = 0 (
        interpolation = "constant"
    )
    int primvars:arnold:light:volume_samples = 2 (
        interpolation = "constant"
    )
    bool primvars:arnold:receive_shadows = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:self_shadows = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:camera = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:diffuse_reflect = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:diffuse_transmit = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:shadow = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:specular_reflect = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:specular_transmit = 0 (
        interpolation = "constant"
    )
    bool primvars:arnold:visibility:volume = 0 (
        interpolation = "constant"
    )
    double size = 1.5
    matrix4d xformOp:transform = ( (0.4592004883163942, -0.1106194504859005, -0.16400685566214168, 0), (0.18312950791146543, 0.39448380951487655, 0.2466700374239546, 0), (0.07482309043396759, -0.28661099281923585, 0.40280968699012476, 0), (0.6413368089809033, 1.076592548138197, 0.23031671753571614, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "lights"
{
    def SphereLight "pointlight1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI", "CollectionAPI:lightLink"]
    )
    {
        rel collection:lightLink:excludes = [
            </cube>,
            </sphere>,
            </cylinder>,
            </cone>,
            </capsule>,
        ]
        uniform token collection:lightLink:expansionRule = "expandPrims"
        uniform bool collection:lightLink:includeRoot = 1
        rel collection:lightLink:includes = None
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        color3f inputs:color = (1, 0, 0)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 10
        bool inputs:normalize = 0
        float inputs:specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.8372837908297679, 1.007099813698919, -0.749532493574289, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Cube "cube"
{
    bool primvars:arnold:smoothing = 1
    double size = 1
    float3 xformOp:scale.timeSamples = {
        1: (10, 10, 1),
    }
    double3 xformOp:translate = (1.0414252402303956, 0, -2.0302200248004825)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
}

def Cone "cone" (
    kind = "component"
)
{
    matrix4d xformOp:transform = ( (0.5, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.5, 0), (0.014368814700929988, 1.429009279891231, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Capsule "capsule" (
    kind = "component"
)
{
    matrix4d xformOp:transform = ( (0.5, 0, 0, 0), (0, 0.5, 0, 0), (0, 0, 0.5, 0), (1.4115763352046846, 1.3134775845476347, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def "Cameras"
{
    def Camera "camera"
    {
        float4[] clippingPlanes = []
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange = (1, 1000000)
        float2 clippingRange.timeSamples = {
            1: (1, 1000000),
        }
        float focalLength = 17.677574
        float focalLength.timeSamples = {
            1: 22.971155,
        }
        float focusDistance = 8.185433
        float focusDistance.timeSamples = {
            1: 2.8374128,
        }
        float fStop = 0
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture = 20.955
        float horizontalAperture.timeSamples = {
            1: 20.955,
        }
        float horizontalApertureOffset = 0
        float horizontalApertureOffset.timeSamples = {
            1: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            1: "perspective",
        }
        float verticalAperture = 11.481922
        float verticalAperture.timeSamples = {
            1: 14.920203,
        }
        float verticalApertureOffset = 0
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform = ( (0.9998476951563913, 8.170547571850761e-16, 0.01745240643728174, 0), (-0.015686118999422474, 0.4383711467890735, 0.8986571556125109, 0), (-0.00765063142413947, -0.8987940462991689, 0.43830438074011924, 0), (0.9788015063338322, -7.357018795293891, 2.72934458974791, 1) )
        matrix4d xformOp:transform.timeSamples = {
            1: ( (0.9998476951563913, 8.135853102331227e-16, 0.017452406437281343, 0), (-0.01568611899942212, 0.4383711467890733, 0.898657155612511, 0), (-0.0076506314241392955, -0.898794046299169, 0.438304380740119, 0), (0.7855825330686176, -2.245263412913611, 1.0066068529236731, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Sphere "sphere" (
    kind = "component"
)
{
    double size = 1.5
    matrix4d xformOp:transform = ( (0.4592004883163942, -0.1106194504859005, -0.16400685566214168, 0), (0.18312950791146543, 0.39448380951487655, 0.2466700374239546, 0), (0.07482309043396759, -0.28661099281923585, 0.40280968699012476, 0), (0.00351394482699674, 0.6781593482786019, -0.8231695228569915, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

