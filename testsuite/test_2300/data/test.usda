#usda 1.0
(
    endTimeCode = 1010
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1001
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Cube "cube1"
{
    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
    double size = 1
    custom bool primvars:arnold:smoothing = 0
    matrix4d xformOp:transform.timeSamples = {
        1001: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1.5508925914764404, 1) ),
        1002: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 1.241659197460573, 1) ),
        1003: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.4129137014982368, 1) ),
        1004: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.7869118672830082, 1) ),
        1005: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -2.2093854797558583, 1) ),
        1006: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -3.7060751067922464, 1) ),
        1007: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -5.128548719264842, 1) ),
        1008: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -6.328374288046265, 1) ),
        1009: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -7.157119784008525, 1) ),
        1010: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -7.466353178024292, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Xform "lights"
{
    def DomeLight_1 "domelight1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI"]
    )
    {
        custom rel filters = None
        float houdini:guidescale.timeSamples = {
            1001: 1,
            1002: 1,
            1003: 1,
            1004: 1,
            1005: 1,
            1006: 1,
            1007: 1,
            1008: 1,
            1009: 1,
            1010: 1,
        }
        bool houdini:inviewermenu = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        asset inputs:texture:file = @@
        token inputs:texture:format = "automatic"
        rel light:filters = None
        token poleAxis = "scene"
        rel portals = None
        float primvars:arnold:camera = 0 (
            interpolation = "constant"
        )
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniViewportGuideAPI", "HoudiniCameraPlateAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength.timeSamples = {
            1001: 0.5,
            1002: 0.5,
            1003: 0.5,
            1004: 0.5,
            1005: 0.5,
            1006: 0.5,
            1007: 0.5,
            1008: 0.5,
            1009: 0.5,
            1010: 0.5,
        }
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture.timeSamples = {
            1001: 0.20955,
            1002: 0.20955,
            1003: 0.20955,
            1004: 0.20955,
            1005: 0.20955,
            1006: 0.20955,
            1007: 0.20955,
            1008: 0.20955,
            1009: 0.20955,
            1010: 0.20955,
        }
        float horizontalApertureOffset.timeSamples = {
            1001: 0,
            1002: 0,
            1003: 0,
            1004: 0,
            1005: 0,
            1006: 0,
            1007: 0,
            1008: 0,
            1009: 0,
            1010: 0,
        }
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale.timeSamples = {
            1001: 1,
            1002: 1,
            1003: 1,
            1004: 1,
            1005: 1,
            1006: 1,
            1007: 1,
            1008: 1,
            1009: 1,
            1010: 1,
        }
        bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture.timeSamples = {
            1001: 0.11787187,
            1002: 0.11787187,
            1003: 0.11787187,
            1004: 0.11787187,
            1005: 0.11787187,
            1006: 0.11787187,
            1007: 0.11787187,
            1008: 0.11787187,
            1009: 0.11787187,
            1010: 0.11787187,
        }
        float verticalApertureOffset.timeSamples = {
            1001: 0,
            1002: 0,
            1003: 0,
            1004: 0,
            1005: 0,
            1006: 0,
            1007: 0,
            1008: 0,
            1009: 0,
            1010: 0,
        }
        matrix4d xformOp:transform = ( (-0.028954788564205098, 6.334819292394352e-10, -0.9995807222126696, 0), (-0.1265569381856416, 0.9919525704803089, 0.003665967073445435, 0), (0.9915366668037435, 0.12661002297412277, -0.028721776863805566, 0), (28.969507500656327, 3.5509325150175535, -3.573327113160905, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def Scope "Products"
    {
        def Scope "Vars"
        {
            def RenderVar "RGBA"
            {
                custom string arnold:filter = "box_filter"
                token dataType = "color4f"
                custom token driver:parameters:aov:format = "color4f"
                custom string driver:parameters:aov:name = "RGBA"
                string sourceName = "RGBA"
                
            }
        }

        def RenderProduct "renderproduct"
        {
            custom string arnold:driver = "driver_tiff"
            rel orderedVars = </Render/Products/Vars/RGBA>
            token productName.timeSamples = {
                1001: "incorrect.tif",
                1002: "incorrect.tif",
                1003: "incorrect.tif",
                1004: "incorrect.tif",
                1005: "incorrect.tif",
                1006: "incorrect.tif",
                1007: "incorrect.tif",
                1008: "incorrect.tif",
                1009: "incorrect.tif",
                1010: "testrender.tif"
            }
            token productType = "arnold"
            int2 resolution = (160, 120)
        }
    }

    def RenderSettings "rendersettings"
    {
        rel camera = </cameras/camera1>
        custom int arnold:global:AA_samples = 4
        token[] includedPurposes = ["default"]
        token[] materialBindingPurposes = ["full", "allPurpose"]
        rel products = </Render/Products/renderproduct>
        int2 resolution = (160, 120)
    }
}

