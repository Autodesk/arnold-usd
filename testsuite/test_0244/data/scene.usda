#usda 1.0

def "directionalLight1"
{
    def DistantLight "directionalLightShape1"
    {
        float inputs:angle = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 1
        vector3f[] primvars:arnold:direction = [(0, 0, -1)]
        string primvars:dcc_name = "directionalLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        float inputs:specular = 1
    }
}

def "directionalLight2"
{
    def DistantLight "directionalLightShape2"
    {
        float inputs:angle = 0
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 1
        vector3f[] primvars:arnold:direction = [(0, 0, -1)]
        string primvars:dcc_name = "directionalLightShape2" (
            elementSize = 1
            interpolation = "constant"
        )
        float inputs:specular = 1
        matrix4d xformOp:transform = ( (-0.34771087765693665, 1.1102230246251565e-16, -0.9376018047332764, 0), (-0.5001568794250488, 0.8458361625671387, 0.18548384308815002, 0), (0.7930575609207153, 0.5334427356719971, -0.29410645365715027, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "pPlatonic1"
{
    def Mesh "pPlatonicShape1"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 2, 1, 0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 1, 5, 1, 2, 7, 2, 3, 8, 3, 4, 9, 4, 5, 10, 5, 1, 6, 1, 7, 6, 2, 8, 7, 3, 9, 8, 4, 10, 9, 5, 6, 10, 6, 7, 11, 7, 8, 11, 8, 9, 11, 9, 10, 11, 10, 6, 11]
        rel material:binding = </materials/lambert1>
        uniform token orientation = "rightHanded"
        point3f[] points = [(0, 0, -1), (0.7236068, 0.5257311, -0.4472136), (-0.27639326, 0.8506509, -0.44721365), (-0.8944273, -7.819332e-8, -0.44721365), (-0.2763933, -0.8506508, -0.4472136), (0.72360677, -0.52573115, -0.4472136), (0.8944273, 0, 0.44721365), (0.27639318, 0.85065085, 0.4472136), (-0.7236069, 0.5257311, 0.44721365), (-0.72360677, -0.5257312, 0.4472136), (0.27639332, -0.8506508, 0.4472136), (0, 0, 1)]
        bool primvars:arnold:smoothing = 0
    }
}

def "materials"
{
    def Material "lambert1"
    {
        token outputs:arnold:surface.connect = </materials/lambert1/lambert1.outputs:surface>

        def Shader "lambert1"
        {
            uniform token info:id = "arnold:lambert"
            float inputs:Kd = 0.8
            color3f inputs:Kd_color = (0.5, 0.5, 0.5)
            token outputs:surface
        }
    }
}



