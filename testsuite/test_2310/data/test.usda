#usda 1.0
(
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "sopimport1" (
    kind = "component"
)
{
    def Points "points_0" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        rel material:binding = </materials/arnold_materialbuilder1>
        point3f[] points = [(-2.1110976e-8, 0.5, -5.6566853e-9), (3.646268e-8, -0.5, 9.770174e-9), (0.12940954, 0.4829629, 0), (0.12500001, 0.4829629, -0.033493653), (0.112071946, 0.4829629, -0.06470477), (0.09150636, 0.4829629, -0.09150636), (0.06470476, 0.4829629, -0.11207195), (0.033493657, 0.4829629, -0.12500001), (9.770148e-9, 0.4829629, -0.12940954), (-0.033493638, 0.4829629, -0.12500001), (-0.064704746, 0.4829629, -0.11207196), (-0.09150634, 0.4829629, -0.091506384), (-0.11207193, 0.4829629, -0.0647048), (-0.125, 0.4829629, -0.033493694), (-0.12940954, 0.4829629, -5.0393933e-8), (-0.12500003, 0.4829629, 0.033493597), (-0.112071976, 0.4829629, 0.064704716), (-0.091506414, 0.4829629, 0.09150631), (-0.064704806, 0.4829629, 0.112071924), (-0.0334937, 0.4829629, 0.125), (-6.016408e-8, 0.4829629, 0.12940954), (0.033493586, 0.4829629, 0.12500003), (0.0647047, 0.4829629, 0.11207198), (0.0915063, 0.4829629, 0.09150642), (0.11207191, 0.4829629, 0.06470484), (0.124999985, 0.4829629, 0.033493746), (0.24999999, 0.43301272, 0), (0.24148144, 0.43301272, -0.06470475), (0.21650633, 0.43301272, -0.12499999), (0.17677668, 0.43301272, -0.17677668), (0.124999985, 0.43301272, -0.21650635), (0.06470476, 0.43301272, -0.24148144), (1.8874474e-8, 0.43301272, -0.24999999), (-0.06470472, 0.43301272, -0.24148145), (-0.124999955, 0.43301272, -0.21650636), (-0.17677663, 0.43301272, -0.17677672), (-0.2165063, 0.43301272, -0.12500004), (-0.24148142, 0.43301272, -0.064704835), (-0.24999999, 0.43301272, -9.7353585e-8), (-0.24148147, 0.43301272, 0.06470465), (-0.21650639, 0.43301272, 0.12499989), (-0.17677678, 0.43301272, 0.17677659), (-0.12500006, 0.43301272, 0.21650629), (-0.06470485, 0.43301272, 0.24148141), (-1.16228065e-7, 0.43301272, 0.24999999), (0.06470463, 0.43301272, 0.24148147), (0.124999866, 0.43301272, 0.2165064), (0.17677657, 0.43301272, 0.1767768), (0.21650626, 0.43301272, 0.12500013), (0.2414814, 0.43301272, 0.06470493), (0.35355338, 0.35355338, 0), (0.34150633, 0.35355338, -0.09150635), (0.3061862, 0.35355338, -0.17677669), (0.24999999, 0.35355338, -0.24999999), (0.17677668, 0.35355338, -0.30618623), (0.09150636, 0.35355338, -0.34150633), (2.6692538e-8, 0.35355338, -0.35355338), (-0.09150631, 0.35355338, -0.34150636), (-0.17677663, 0.35355338, -0.30618626), (-0.24999993, 0.35355338, -0.25000006), (-0.30618617, 0.35355338, -0.17677678), (-0.34150633, 0.35355338, -0.091506466), (-0.35355338, 0.35355338, -1.3767877e-7), (-0.3415064, 0.35355338, 0.0915062), (-0.3061863, 0.35355338, 0.17677654), (-0.25000015, 0.35355338, 0.24999987), (-0.1767768, 0.35355338, 0.30618614), (-0.09150649, 0.35355338, 0.3415063), (-1.6437131e-7, 0.35355338, 0.35355338), (0.09150617, 0.35355338, 0.3415064), (0.17677651, 0.35355338, 0.30618632), (0.24999985, 0.35355338, 0.25000015), (0.3061861, 0.35355338, 0.1767769), (0.34150627, 0.35355338, 0.0915066), (0.4330127, 0.25, 0), (0.41825813, 0.25, -0.11207193), (0.375, 0.25, -0.21650635), (0.3061862, 0.25, -0.3061862), (0.21650633, 0.25, -0.375), (0.112071946, 0.25, -0.41825813), (3.269155e-8, 0.25, -0.4330127), (-0.11207188, 0.25, -0.41825816), (-0.21650629, 0.25, -0.37500003), (-0.30618614, 0.25, -0.3061863), (-0.37499994, 0.25, -0.21650645), (-0.4182581, 0.25, -0.11207207), (-0.4330127, 0.25, -1.6862137e-7), (-0.4182582, 0.25, 0.11207175), (-0.3750001, 0.25, 0.21650617), (-0.30618638, 0.25, 0.30618605), (-0.21650648, 0.25, 0.3749999), (-0.1120721, 0.25, 0.4182581), (-2.0131293e-7, 0.25, 0.4330127), (0.112071715, 0.25, 0.4182582), (0.21650612, 0.25, 0.37500012), (0.30618602, 0.25, 0.3061864), (0.37499985, 0.25, 0.2165066), (0.41825807, 0.25, 0.112072244), (0.4829629, 0.12940952, 0), (0.46650633, 0.12940952, -0.125), (0.41825813, 0.12940952, -0.24148145), (0.34150633, 0.12940952, -0.34150633), (0.24148144, 0.12940952, -0.41825816), (0.12500001, 0.12940952, -0.46650633), (3.6462687e-8, 0.12940952, -0.4829629), (-0.12499994, 0.12940952, -0.46650636), (-0.24148138, 0.12940952, -0.4182582), (-0.34150624, 0.12940952, -0.34150642), (-0.41825807, 0.12940952, -0.24148157), (-0.4665063, 0.12940952, -0.12500015), (-0.4829629, 0.12940952, -1.8807269e-7), (-0.4665064, 0.12940952, 0.1249998), (-0.41825825, 0.12940952, 0.24148124), (-0.34150654, 0.12940952, 0.34150615), (-0.2414816, 0.12940952, 0.41825804), (-0.12500018, 0.12940952, 0.46650627), (-2.2453538e-7, 0.12940952, 0.4829629), (0.124999754, 0.12940952, 0.4665064), (0.24148121, 0.12940952, 0.41825828), (0.34150615, 0.12940952, 0.34150657), (0.41825798, 0.12940952, 0.24148174), (0.46650624, 0.12940952, 0.12500034), (0.5, 0, 0), (0.4829629, 0, -0.12940952), (0.4330127, 0, -0.25), (0.35355338, 0, -0.35355338), (0.24999999, 0, -0.43301272), (0.12940954, 0, -0.4829629), (3.774895e-8, 0, -0.5), (-0.12940946, 0, -0.48296294), (-0.24999993, 0, -0.43301275), (-0.3535533, 0, -0.35355347), (-0.43301263, 0, -0.25000012), (-0.48296288, 0, -0.12940969), (-0.5, 0, -1.9470718e-7), (-0.48296297, 0, 0.12940931), (-0.4330128, 0, 0.24999979), (-0.3535536, 0, 0.3535532), (-0.25000015, 0, 0.4330126), (-0.12940972, 0, 0.48296285), (-2.3245614e-7, 0, 0.5), (0.12940927, 0, 0.48296297), (0.24999975, 0, 0.43301284), (0.35355318, 0, 0.35355362), (0.43301255, 0, 0.2500003), (0.48296282, 0, 0.12940988), (0.4829629, -0.12940952, 0), (0.46650633, -0.12940952, -0.125), (0.41825813, -0.12940952, -0.24148145), (0.34150633, -0.12940952, -0.34150633), (0.24148144, -0.12940952, -0.41825816), (0.12500001, -0.12940952, -0.46650633), (3.6462687e-8, -0.12940952, -0.4829629), (-0.12499994, -0.12940952, -0.46650636), (-0.24148138, -0.12940952, -0.4182582), (-0.34150624, -0.12940952, -0.34150642), (-0.41825807, -0.12940952, -0.24148157), (-0.4665063, -0.12940952, -0.12500015), (-0.4829629, -0.12940952, -1.8807269e-7), (-0.4665064, -0.12940952, 0.1249998), (-0.41825825, -0.12940952, 0.24148124), (-0.34150654, -0.12940952, 0.34150615), (-0.2414816, -0.12940952, 0.41825804), (-0.12500018, -0.12940952, 0.46650627), (-2.2453538e-7, -0.12940952, 0.4829629), (0.124999754, -0.12940952, 0.4665064), (0.24148121, -0.12940952, 0.41825828), (0.34150615, -0.12940952, 0.34150657), (0.41825798, -0.12940952, 0.24148174), (0.46650624, -0.12940952, 0.12500034), (0.4330127, -0.25, 0), (0.41825813, -0.25, -0.11207193), (0.375, -0.25, -0.21650635), (0.3061862, -0.25, -0.3061862), (0.21650633, -0.25, -0.375), (0.112071946, -0.25, -0.41825813), (3.269155e-8, -0.25, -0.4330127), (-0.11207188, -0.25, -0.41825816), (-0.21650629, -0.25, -0.37500003), (-0.30618614, -0.25, -0.3061863), (-0.37499994, -0.25, -0.21650645), (-0.4182581, -0.25, -0.11207207), (-0.4330127, -0.25, -1.6862137e-7), (-0.4182582, -0.25, 0.11207175), (-0.3750001, -0.25, 0.21650617), (-0.30618638, -0.25, 0.30618605), (-0.21650648, -0.25, 0.3749999), (-0.1120721, -0.25, 0.4182581), (-2.0131293e-7, -0.25, 0.4330127), (0.112071715, -0.25, 0.4182582), (0.21650612, -0.25, 0.37500012), (0.30618602, -0.25, 0.3061864), (0.37499985, -0.25, 0.2165066), (0.41825807, -0.25, 0.112072244), (0.35355338, -0.35355338, 0), (0.34150633, -0.35355338, -0.09150635), (0.3061862, -0.35355338, -0.17677669), (0.24999999, -0.35355338, -0.24999999), (0.17677668, -0.35355338, -0.30618623), (0.09150636, -0.35355338, -0.34150633), (2.6692538e-8, -0.35355338, -0.35355338), (-0.09150631, -0.35355338, -0.34150636), (-0.17677663, -0.35355338, -0.30618626), (-0.24999993, -0.35355338, -0.25000006), (-0.30618617, -0.35355338, -0.17677678), (-0.34150633, -0.35355338, -0.091506466), (-0.35355338, -0.35355338, -1.3767877e-7), (-0.3415064, -0.35355338, 0.0915062), (-0.3061863, -0.35355338, 0.17677654), (-0.25000015, -0.35355338, 0.24999987), (-0.1767768, -0.35355338, 0.30618614), (-0.09150649, -0.35355338, 0.3415063), (-1.6437131e-7, -0.35355338, 0.35355338), (0.09150617, -0.35355338, 0.3415064), (0.17677651, -0.35355338, 0.30618632), (0.24999985, -0.35355338, 0.25000015), (0.3061861, -0.35355338, 0.1767769), (0.34150627, -0.35355338, 0.0915066), (0.24999999, -0.43301272, 0), (0.24148144, -0.43301272, -0.06470475), (0.21650633, -0.43301272, -0.12499999), (0.17677668, -0.43301272, -0.17677668), (0.124999985, -0.43301272, -0.21650635), (0.06470476, -0.43301272, -0.24148144), (1.8874474e-8, -0.43301272, -0.24999999), (-0.06470472, -0.43301272, -0.24148145), (-0.124999955, -0.43301272, -0.21650636), (-0.17677663, -0.43301272, -0.17677672), (-0.2165063, -0.43301272, -0.12500004), (-0.24148142, -0.43301272, -0.064704835), (-0.24999999, -0.43301272, -9.7353585e-8), (-0.24148147, -0.43301272, 0.06470465), (-0.21650639, -0.43301272, 0.12499989), (-0.17677678, -0.43301272, 0.17677659), (-0.12500006, -0.43301272, 0.21650629), (-0.06470485, -0.43301272, 0.24148141), (-1.16228065e-7, -0.43301272, 0.24999999), (0.06470463, -0.43301272, 0.24148147), (0.124999866, -0.43301272, 0.2165064), (0.17677657, -0.43301272, 0.1767768), (0.21650626, -0.43301272, 0.12500013), (0.2414814, -0.43301272, 0.06470493), (0.12940954, -0.4829629, 0), (0.12500001, -0.4829629, -0.033493653), (0.112071946, -0.4829629, -0.06470477), (0.09150636, -0.4829629, -0.09150636), (0.06470476, -0.4829629, -0.11207195), (0.033493657, -0.4829629, -0.12500001), (9.770148e-9, -0.4829629, -0.12940954), (-0.033493638, -0.4829629, -0.12500001), (-0.064704746, -0.4829629, -0.11207196), (-0.09150634, -0.4829629, -0.091506384), (-0.11207193, -0.4829629, -0.0647048), (-0.125, -0.4829629, -0.033493694), (-0.12940954, -0.4829629, -5.0393933e-8), (-0.12500003, -0.4829629, 0.033493597), (-0.112071976, -0.4829629, 0.064704716), (-0.091506414, -0.4829629, 0.09150631), (-0.064704806, -0.4829629, 0.112071924), (-0.0334937, -0.4829629, 0.125), (-6.016408e-8, -0.4829629, 0.12940954), (0.033493586, -0.4829629, 0.12500003), (0.0647047, -0.4829629, 0.11207198), (0.0915063, -0.4829629, 0.09150642), (0.11207191, -0.4829629, 0.06470484), (0.124999985, -0.4829629, 0.033493746)] (
            interpolation = "vertex"
        )
        string primvars:arnold:mode = "sphere"
        double primvars:arnold:step_size = 0.3
        float[] primvars:density = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
            interpolation = "vertex"
        )
        int[] primvars:density:indices = None
        color3f[] primvars:displayColor = [(0.6416006, 0.12020767, 0.53429914), (0.35625088, 0.36641073, 0.69093263), (0.26554382, 0.19124722, 0.6536752), (0.17196655, 0.49299228, 0.8448546), (0.16647387, 0.7777885, 0.30282092), (0.65568936, 0.19661093, 0.6710352), (0.03170252, 0.50134695, 0.39169765), (0.6741526, 0.7444335, 0.07538271), (0.35101414, 0.6736382, 0.5326073), (0.74613905, 0.96822107, 0.040651083), (0.69100904, 0.6968435, 0.30180526), (0.39531863, 0.6050043, 0.6669167), (0.11062205, 0.03187847, 0.37936676), (0.30870414, 0.6217772, 0.52211), (0.3085488, 0.07160115, 0.77503407), (0.626356, 0.09713769, 0.97956765), (0.20942199, 0.008538485, 0.38783658), (0.8433126, 0.80746627, 0.6574427), (0.8473358, 0.5149802, 0.279135), (0.7882341, 0.25648475, 0.14019072), (0.38899124, 0.50504804, 0.9498826), (0.8232243, 0.30492413, 0.70502234), (0.31038284, 0.86857593, 0.2176764), (0.112858295, 0.32102048, 0.48788333), (0.33022618, 0.60395634, 0.29654264), (0.9133698, 0.6912317, 0.35818565), (0.6553582, 0.96684194, 0.440508), (0.5157292, 0.9949876, 0.61334753), (0.20758426, 0.060331583, 0.29503357), (0.6794075, 0.5980861, 0.16352808), (0.31680703, 0.09112847, 0.4808545), (0.09020448, 0.47439682, 0.24166346), (0.24573469, 0.40437067, 0.9488771), (0.6793939, 0.97742605, 0.96616304), (0.6645788, 0.8862703, 0.91236365), (0.53634024, 0.59923494, 0.40301108), (0.97870874, 0.03899038, 0.32637477), (0.35860956, 0.4399202, 0.016062379), (0.25656843, 0.4358343, 0.9360292), (0.38512945, 0.4674791, 0.5319822), (0.38641763, 0.6679412, 0.7137952), (0.74499154, 0.91143334, 0.44559908), (0.994313, 0.71584475, 0.3499689), (0.539685, 0.05958712, 0.11940098), (0.121952415, 0.70956874, 0.77198184), (0.59630334, 0.69009566, 0.35037482), (0.634688, 0.94288063, 0.24827373), (0.6932832, 0.08572149, 0.43455064), (0.43118536, 0.686018, 0.9617938), (0.004420519, 0.9309827, 0.8603854), (0.7086276, 0.1920588, 0.5436202), (0.7748755, 0.54449296, 0.0110064745), (0.35044372, 0.20119596, 0.5642587), (0.96033084, 0.56478715, 0.19670594), (0.20532393, 0.68896735, 0.24030876), (0.76599073, 0.59348047, 0.9424608), (0.96059203, 0.31799948, 0.9548359), (0.7574686, 0.25692344, 0.35097182), (0.06715429, 0.8585212, 0.90562975), (0.9102111, 0.975181, 0.99343467), (0.8152764, 0.79046834, 0.17237043), (0.013186097, 0.4551525, 0.60116756), (0.6525732, 0.31894302, 0.5032958), (0.51332426, 0.9318632, 0.44104552), (0.8221724, 0.38646424, 0.2528367), (0.28001928, 0.96432817, 0.21367621), (0.21353626, 0.31416023, 0.41994023), (0.96040976, 0.923357, 0.6936854), (0.06362951, 0.7736366, 0.2943169), (0.4479921, 0.8944346, 0.5715389), (0.1687901, 0.21134198, 0.87126684), (0.96073914, 0.17672336, 0.31929612), (0.24305701, 0.34063017, 0.30665207), (0.6814687, 0.59662306, 0.87088776), (0.0042488575, 0.19632924, 0.7884059), (0.42437434, 0.5683609, 0.8350229), (0.5691699, 0.35957742, 0.46745598), (0.02933693, 0.9190806, 0.5275576), (0.08180773, 0.8828783, 0.87498176), (0.40354264, 0.6760278, 0.998669), (0.4033743, 0.4973259, 0.2558669), (0.17485774, 0.93920803, 0.11410415), (0.8479351, 0.006718397, 0.8068024), (0.23521721, 0.7993207, 0.15128171), (0.3576331, 0.12565172, 0.29135108), (0.52812445, 0.21966362, 0.45387447), (0.98792326, 0.83864975, 0.34151447), (0.3999679, 0.45029604, 0.89002323), (0.7926165, 0.8240757, 0.46943462), (0.86811435, 0.9089415, 0.72930634), (0.6672628, 0.46663344, 0.89196014), (0.22695243, 0.86631703, 0.22743428), (0.68272746, 0.785655, 0.29174316), (0.7906444, 0.24881709, 0.12724209), (0.75154305, 0.05385387, 0.97882867), (0.80273855, 0.24728847, 0.6998383), (0.9003602, 0.97303534, 0.5086931), (0.39863646, 0.22089005, 0.86923206), (0.4980061, 0.47943127, 0.20408392), (0.32179224, 0.1032629, 0.5475987), (0.68085635, 0.27793217, 0.90716636), (0.39816272, 0.6726172, 0.0066996813), (0.6712334, 0.66790974, 0.32910872), (0.8264952, 0.74063385, 0.41819882), (0.56000865, 0.25671673, 0.2788266), (0.69517446, 0.12758076, 0.23451948), (0.8462336, 0.8603927, 0.008633137), (0.016595483, 0.46285343, 0.9752053), (0.7777629, 0.64104974, 0.1897676), (0.19475591, 0.9509361, 0.74374163), (0.57995296, 0.059632897, 0.31530857), (0.3324958, 0.4526143, 0.696833), (0.65217984, 0.51036215, 0.42167604), (0.08681917, 0.5489181, 0.81383395), (0.35945058, 0.34129536, 0.5284343), (0.9220226, 0.50360835, 0.54890347), (0.07802236, 0.03691554, 0.70717776), (0.66603076, 0.72521424, 0.10452378), (0.28277647, 0.37877274, 0.55451953), (0.8304328, 0.9776747, 0.8845569), (0.831272, 0.90264726, 0.79201233), (0.44223225, 0.50467634, 0.25498712), (0.9004662, 0.3744985, 0.9600749), (0.93656385, 0.80830646, 0.16982996), (0.748227, 0.41437078, 0.3814298), (0.027644634, 0.051621795, 0.63462615), (0.765712, 0.67152226, 0.45614958), (0.24963021, 0.5967361, 0.9795346), (0.7983465, 0.60712326, 0.70404553), (0.23905385, 0.9688258, 0.66002405), (0.72513497, 0.15067339, 0.49035108), (0.6322948, 0.3255868, 0.22809255), (0.8850522, 0.38688505, 0.6995914), (0.9641788, 0.5848423, 0.5365858), (0.25014293, 0.030586481, 0.8292457), (0.36723542, 0.40783036, 0.69270563), (0.59950864, 0.9910419, 0.88328135), (0.8334471, 0.39881897, 0.012386203), (0.2937081, 0.3186742, 0.050765514), (0.5410582, 0.73838806, 0.2549094), (0.50316584, 0.9884634, 0.910674), (0.81380546, 0.4016564, 0.9680959), (0.94581723, 0.29511654, 0.7318206), (0.74236, 0.63888097, 0.21021855), (0.383456, 0.95146143, 0.21083736), (0.94941616, 0.80149734, 0.22700238), (0.2979375, 0.304626, 0.43948877), (0.9344692, 0.25025356, 0.1706965), (0.38321292, 0.3591292, 0.38252747), (0.9636928, 0.5986047, 0.32029378), (0.83032346, 0.020259976, 0.10399771), (0.5658097, 0.30216253, 0.9487846), (0.042935252, 0.66745305, 0.15587437), (0.8866627, 0.13352978, 0.52767706), (0.73362815, 0.26950765, 0.082193494), (0.25627637, 0.2900697, 0.13300848), (0.20713603, 0.9754031, 0.6626426), (0.88535476, 0.9942118, 0.2514553), (0.17261338, 0.15704072, 0.063299656), (0.91889346, 0.9974146, 0.38543785), (0.19959414, 0.30277348, 0.8863534), (0.48317504, 0.7990786, 0.14636421), (0.2788546, 0.3340751, 0.21142626), (0.5146997, 0.38077414, 0.94278145), (0.09476745, 0.65865445, 0.66746914), (0.6176125, 0.28193378, 0.69942176), (0.13842535, 0.3228258, 0.46398902), (0.37921154, 0.9637275, 0.3408159), (0.26099777, 0.18360126, 0.75441194), (0.06003666, 0.38702476, 0.25585103), (0.78721285, 0.33372343, 0.8522403), (0.25084317, 0.58986044, 0.31452882), (0.4689337, 0.7363167, 0.39009082), (0.98866653, 0.030013919, 0.78512025), (0.1455437, 0.9848833, 0.7557343), (0.9603354, 0.10500717, 0.92916095), (0.056408525, 0.2660675, 0.88036716), (0.8382908, 0.87829113, 0.41007507), (0.9597422, 0.73303795, 0.8582095), (0.16416013, 0.51119876, 0.98125803), (0.7489481, 0.6983422, 0.92407155), (0.75652504, 0.70846355, 0.15672326), (0.30492365, 0.91131496, 0.4077443), (0.81563056, 0.31661797, 0.38615596), (0.6883838, 0.9409138, 0.4037962), (0.6529888, 0.03491664, 0.48587954), (0.899735, 0.22424543, 0.98957324), (0.8009738, 0.7363093, 0.08762658), (0.9882443, 0.20213711, 0.14418173), (0.3621869, 0.031042457, 0.811919), (0.105664015, 0.26106417, 0.70735264), (0.26810122, 0.042303443, 0.005186796), (0.0038903952, 0.52681327, 0.7228209), (0.3395115, 0.26916027, 0.8663739), (0.60198545, 0.70555246, 0.5732248), (0.7949507, 0.2200824, 0.52737284), (0.0644747, 0.61995125, 0.21816051), (0.9148481, 0.38250792, 0.8627815), (0.35475743, 0.47492552, 0.26471078), (0.58866715, 0.0618335, 0.27482462), (0.6382133, 0.82147264, 0.62089765), (0.6098244, 0.85787404, 0.6463008), (0.2643758, 0.005042553, 0.32224786), (0.13946676, 0.7797235, 0.16733146), (0.999861, 0.5011035, 0.20408487), (0.8464757, 0.8653102, 0.31432092), (0.10738003, 0.6154647, 0.22550905), (0.22161853, 0.45566773, 0.20198166), (0.3083042, 0.89971995, 0.22246325), (0.36068833, 0.607203, 0.4516033), (0.72751737, 0.71112454, 0.44070578), (0.8312715, 0.108939886, 0.03070128), (0.70962346, 0.84990263, 0.041756988), (0.3695717, 0.17709339, 0.23621583), (0.039656997, 0.9292791, 0.14237654), (0.12221873, 0.9951353, 0.46420562), (0.6413028, 0.44995463, 0.59554577), (0.46910357, 0.4945675, 0.8571539), (0.2944187, 0.14108348, 0.8445641), (0.41570878, 0.52431214, 0.5292344), (0.7597889, 0.43698955, 0.8905617), (0.9356501, 0.86655724, 0.057522297), (0.1695311, 0.63259614, 0.9486451), (0.1317054, 0.80327654, 0.7476295), (0.24212098, 0.29306138, 0.8530526), (0.8632815, 0.48631203, 0.40144396), (0.10328412, 0.8675767, 0.0038809776), (0.0024297237, 0.2027098, 0.386734), (0.09322584, 0.6027248, 0.34883082), (0.33265626, 0.53514457, 0.37800276), (0.13468313, 0.30738008, 0.6948354), (0.9289657, 0.4782071, 0.55883634), (0.3171053, 0.5550889, 0.18091893), (0.56694686, 0.09581494, 0.23532116), (0.34071136, 0.43533194, 0.7653141), (0.813532, 0.21047926, 0.8562063), (0.48036718, 0.053225875, 0.6662214), (0.68561757, 0.4460292, 0.59804285), (0.9822166, 0.94726336, 0.4111452), (0.23404658, 0.24772549, 0.13264358), (0.5659522, 0.42223954, 0.14046204), (0.025727749, 0.34799135, 0.16418815), (0.99436677, 0.2063508, 0.9377903), (0.730343, 0.022576809, 0.5296854), (0.70055115, 0.7734666, 0.3376392), (0.7181107, 0.047394753, 0.6172112), (0.019423723, 0.13969624, 0.7513957), (0.86026406, 0.9060699, 0.8250928), (0.34308267, 0.5420867, 0.7651868), (0.0987221, 0.27073383, 0.1006974), (0.9190171, 0.76605046, 0.0053286552), (0.67992115, 0.61935127, 0.53586125), (0.71981597, 0.5433794, 0.5058689), (0.06969857, 0.88262475, 0.82108736), (0.34036076, 0.8619876, 0.7613615), (0.70234454, 0.906888, 0.6285142), (0.18982852, 0.17582035, 0.23596275), (0.13324845, 0.24032831, 0.350201), (0.22557831, 0.60010135, 0.56930375), (0.45497036, 0.40495193, 0.47816205), (0.9413483, 0.6696378, 0.72462034), (0.56937623, 0.8364421, 0.6748147), (0.123113036, 0.59330916, 0.80308783), (0.08012724, 0.6596769, 0.5744989), (0.47343564, 0.32603085, 0.36808157), (0.38657606, 0.37721515, 0.90939295)] (
            interpolation = "vertex"
        )
        int[] primvars:displayColor:indices = None
        float[] widths = [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2] (
            interpolation = "vertex"
        )
    }
}

def Scope "materials"
{
    def Material "arnold_materialbuilder1"
    {
        token outputs:arnold:volume.connect = </materials/arnold_materialbuilder1/standard_volume1.outputs:shader>

        def Shader "standard_volume1"
        {
            uniform token info:id = "arnold:standard_volume"
            float inputs:blackbody_contrast = 1
            float inputs:blackbody_intensity = 1
            float inputs:blackbody_kelvin = 5000
            float inputs:density = 10
            string inputs:density_channel = "density"
            vector3f inputs:displacement = (0, 0, 0)
            float inputs:emission = 1
            string inputs:emission_channel = "heat"
            color3f inputs:emission_color = (1, 1, 1)
            token inputs:emission_mode = "blackbody"
            token inputs:emission_scaling = "none"
            token inputs:interpolation = "trilinear"
            float inputs:scatter = 1
            float inputs:scatter_anisotropy = 0
            color3f inputs:scatter_color = (0.5, 0.5, 0.5)
            color3f inputs:scatter_color.connect = </materials/arnold_materialbuilder1/user_data_rgb1.outputs:rgb>
            string inputs:scatter_color_channel = ""
            float inputs:scatter_diffusion = 0
            float inputs:scatter_diffusion_bias = 0.15
            float inputs:scatter_diffusion_gain = 0.5
            float inputs:scatter_diffusion_roughness = 0
            float inputs:scatter_diffusion_roughness_bias = 0.15
            float inputs:scatter_diffusion_roughness_gain = 0.5
            float inputs:scatter_secondary_anisotropy = 0
            float inputs:scatter_secondary_anisotropy_mix = 0
            float inputs:temperature = 1
            string inputs:temperature_channel = "temperature"
            color3f inputs:transparent = (0.36787945, 0.36787945, 0.36787945)
            string inputs:transparent_channel = ""
            float inputs:transparent_depth = 1
            token outputs:shader
        }

        def Shader "user_data_rgb1"
        {
            uniform token info:id = "arnold:user_data_rgb"
            string inputs:attribute = "displayColor"
            color3f inputs:default = (1, 0, 0)
            color3f outputs:rgb
        }
    }

    def Material "mat_grid"
    {
        token outputs:arnold:surface.connect = </materials/mat_grid/openpbr_surface1.outputs:shader>
        token outputs:surface.connect = </materials/mat_grid/openpbr_surface1_preview.outputs:surface>

        def Shader "openpbr_surface1"
        {
            uniform token info:id = "arnold:openpbr_surface"
            string inputs:aov_id1 = ""
            string inputs:aov_id2 = ""
            string inputs:aov_id3 = ""
            string inputs:aov_id4 = ""
            string inputs:aov_id5 = ""
            string inputs:aov_id6 = ""
            string inputs:aov_id7 = ""
            string inputs:aov_id8 = ""
            color3f inputs:base_color = (0.8, 0.8, 0.8) (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_diff = "1"
                    }
                }
            )
            float inputs:base_diffuse_roughness = 0
            float inputs:base_metalness = 0 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_metallic = "1"
                    }
                }
            )
            float inputs:base_weight = 1 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_diff_intensity = "1"
                    }
                }
            )
            bool inputs:caustics = 0
            color3f inputs:coat_color = (1, 1, 1)
            float inputs:coat_darkening = 1
            float inputs:coat_ior = 1.6
            float inputs:coat_roughness = 0 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_coat_roughness = "1"
                    }
                }
            )
            float inputs:coat_roughness_anisotropy = 0
            float inputs:coat_weight = 0
            int inputs:dielectric_priority = 0
            color3f inputs:emission_color = (1, 1, 1) (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_emit = "1"
                    }
                }
            )
            float inputs:emission_luminance = 0 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_emit_intensity = "1"
                    }
                }
            )
            bool inputs:exit_to_background = 0
            color3f inputs:fuzz_color = (1, 1, 1)
            float inputs:fuzz_roughness = 0.5
            float inputs:fuzz_weight = 0
            vector3f inputs:geometry_coat_normal = (0, 0, 0)
            vector3f inputs:geometry_coat_tangent = (0, 0, 0)
            vector3f inputs:geometry_normal = (0, 0, 0)
            float inputs:geometry_opacity = 1
            vector3f inputs:geometry_tangent = (0, 0, 0)
            bool inputs:geometry_thin_walled = 0
            color3f inputs:id1 = (0, 0, 0)
            color3f inputs:id2 = (0, 0, 0)
            color3f inputs:id3 = (0, 0, 0)
            color3f inputs:id4 = (0, 0, 0)
            color3f inputs:id5 = (0, 0, 0)
            color3f inputs:id6 = (0, 0, 0)
            color3f inputs:id7 = (0, 0, 0)
            color3f inputs:id8 = (0, 0, 0)
            float inputs:indirect_diffuse = 1
            float inputs:indirect_specular = 1
            bool inputs:internal_reflections = 1
            color3f inputs:specular_color = (1, 1, 1) (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_spec = "1"
                    }
                }
            )
            float inputs:specular_ior = 1.5 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_ior = "1"
                    }
                }
            )
            float inputs:specular_roughness = 0.3 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_rough = "1"
                    }
                }
            )
            float inputs:specular_roughness_anisotropy = 0
            float inputs:specular_weight = 1 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_spec_intensity = "1"
                    }
                }
            )
            color3f inputs:subsurface_color = (0.8, 0.8, 0.8)
            float inputs:subsurface_radius = 1
            color3f inputs:subsurface_radius_scale = (1, 0.5, 0.25)
            float inputs:subsurface_scatter_anisotropy = 0
            float inputs:subsurface_weight = 0
            float inputs:thin_film_ior = 1.4
            float inputs:thin_film_thickness = 0.5
            float inputs:thin_film_weight = 0
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth = 0
            float inputs:transmission_dispersion_abbe_number = 20
            float inputs:transmission_dispersion_scale = 0
            color3f inputs:transmission_scatter = (0, 0, 0)
            float inputs:transmission_scatter_anisotropy = 0
            float inputs:transmission_shadow_density = 0.5
            bool inputs:transmission_transmit_aovs = 0
            float inputs:transmission_weight = 0 (
                customData = {
                    dictionary HoudiniPreviewTags = {
                        string ogl_transparency = "1"
                    }
                }
            )
            token outputs:shader
        }

        def Shader "openpbr_surface1_preview" (
            customData = {
                bool HoudiniIsAutoCreatedShader = 1
            }
        )
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
            float inputs:roughness = 0.3
            color3f inputs:specularColor = (1, 1, 1)
            token outputs:surface
        }
    }
}

def Xform "grid1" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (0.45, 0, 0, 0), (0, 0.45, 0, 0), (0, 0, 0.45, 0), (0, -0.7375885397195816, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        apiSchemas = ["HoudiniViewportGuideAPI", "HoudiniCameraPlateAPI"]
    )
    {
        float2 clippingRange = (0.0149051, 14905.1)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.414214
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        uniform bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.23299538
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (-0.7987040221871615, -3.405399742417914e-7, -0.6017240937023663, 0), (-0.1580906962171089, 0.9648696369717081, 0.20984259677118475, 0), (0.5805852363879398, 0.2627291069713599, -0.7706453137717713, 0), (2.6744688689737077, 1.2313412030290931, -3.1225032955936523, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "lights"
{
    def SphereLight "light1" (
        apiSchemas = ["HoudiniViewportLightAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 houdini:clippingRange = (0.001, 10000)
        float houdini:guidescale = 1
        uniform bool houdini:inviewermenu = 1
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 4
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        rel light:filters
        bool treatAsPoint = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.265934705734253, 0.47301018238067627, 0.18081903457641602, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings"
    {
        custom int arnold:global:AA_samples = 3
        custom int arnold:global:AA_seed = 1
        rel camera
        uniform token[] includedPurposes = ["default"]
        uniform token[] materialBindingPurposes = ["full", "allPurpose"]
        uniform int2 resolution = (160, 120)
    }
}

