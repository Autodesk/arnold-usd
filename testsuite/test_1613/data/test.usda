#usda 1.0
(
    defaultPrim = "grid"
    endTimeCode = 1001
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1001
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def RenderSettings "options"
{
    rel arnold:camera = </camera1/cameraShape1>
}
def Xform "camera1"
{
    def Camera "cameraShape1"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov = [54.432224]
        float2[] primvars:arnold:lens_shift = [(0, 0)]
        float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "cameraShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 28.928568
        matrix4d xformOp:transform = ( (0.5764322876930237, 2.7755575615628914e-17, -0.8171448707580566, 0), (-0.35564687848091125, 0.9003187417984009, -0.25088128447532654, 0), (0.7356908917427063, 0.43523108959198, 0.5189728140830994, 0), (24.306114196777344, 10.292357444763184, 10.529134750366211, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "grid" (
    kind = "component"
)
{
    bool primvars:arnold:visibility:camera = 1 (
        interpolation = "constant"
    )
    token visibility = "invisible"
    
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]
    
    def Mesh "mesh_0"
    {
        rel material:binding = </mtl/default_shader>

        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (5, 0, -5), (-5, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def "referenced_grid" (
    active = true
    prepend references = </grid>
)
{
    token visibility = None
    matrix4d xformOp:transform:transform1 = ( (1, 0, 0, 0), (0, 0.9999790048328859, 0.006479960912773376, 0), (0, -0.006479960912773376, 0.9999790048328859, 0), (6.364184379577637, 0.9184747880967716, -9.573911946711991, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform", "xformOp:transform:transform1"]
    rel material:binding = </mtl/default_shader>
}


def Scope "mtl"
{
    def Material "default_shader"
    {
        token outputs:arnold:surface.connect = </mtl/default_shader/default_shader.outputs:surface>

        def Shader "default_shader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (0, 1, 0)
            token outputs:surface
        }
    }
}