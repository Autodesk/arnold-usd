#usda 1.0
(
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "cameras"
{
    def Camera "render_cam"
    {
        float2 clippingRange = (0.6983015, 22493.273)
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.414214
        float horizontalApertureOffset = 0
        custom float houdini:guidescale = 1
        custom bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.23299536
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.7470164955123897, 6.106226635438361e-16, 0.664805501957067, 0), (0.34844512404840133, 0.8516376995590172, -0.3915344483142183, 0), (-0.5661734283408945, 0.5241309270495542, 0.6361874097708102, 0), (-6.54918420669268, 4.889246028729221, 7.158950617581599, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "sphere" (
    kind = "component"
)
{
    rel material:binding = </materials/arnold_materialbuilder1>

    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-1, -1, -1), (1, 1, 1)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 3, 2, 0, 4, 3, 0, 5, 4, 0, 6, 5, 0, 7, 6, 0, 8, 7, 0, 9, 8, 0, 10, 9, 0, 11, 10, 0, 12, 11, 0, 13, 12, 0, 14, 13, 0, 15, 14, 0, 16, 15, 0, 17, 16, 0, 18, 17, 0, 19, 18, 0, 20, 19, 0, 21, 20, 0, 22, 21, 0, 23, 22, 0, 24, 23, 0, 25, 24, 0, 2, 25, 2, 3, 27, 26, 3, 4, 28, 27, 4, 5, 29, 28, 5, 6, 30, 29, 6, 7, 31, 30, 7, 8, 32, 31, 8, 9, 33, 32, 9, 10, 34, 33, 10, 11, 35, 34, 11, 12, 36, 35, 12, 13, 37, 36, 13, 14, 38, 37, 14, 15, 39, 38, 15, 16, 40, 39, 16, 17, 41, 40, 17, 18, 42, 41, 18, 19, 43, 42, 19, 20, 44, 43, 20, 21, 45, 44, 21, 22, 46, 45, 22, 23, 47, 46, 23, 24, 48, 47, 24, 25, 49, 48, 25, 2, 26, 49, 26, 27, 51, 50, 27, 28, 52, 51, 28, 29, 53, 52, 29, 30, 54, 53, 30, 31, 55, 54, 31, 32, 56, 55, 32, 33, 57, 56, 33, 34, 58, 57, 34, 35, 59, 58, 35, 36, 60, 59, 36, 37, 61, 60, 37, 38, 62, 61, 38, 39, 63, 62, 39, 40, 64, 63, 40, 41, 65, 64, 41, 42, 66, 65, 42, 43, 67, 66, 43, 44, 68, 67, 44, 45, 69, 68, 45, 46, 70, 69, 46, 47, 71, 70, 47, 48, 72, 71, 48, 49, 73, 72, 49, 26, 50, 73, 50, 51, 75, 74, 51, 52, 76, 75, 52, 53, 77, 76, 53, 54, 78, 77, 54, 55, 79, 78, 55, 56, 80, 79, 56, 57, 81, 80, 57, 58, 82, 81, 58, 59, 83, 82, 59, 60, 84, 83, 60, 61, 85, 84, 61, 62, 86, 85, 62, 63, 87, 86, 63, 64, 88, 87, 64, 65, 89, 88, 65, 66, 90, 89, 66, 67, 91, 90, 67, 68, 92, 91, 68, 69, 93, 92, 69, 70, 94, 93, 70, 71, 95, 94, 71, 72, 96, 95, 72, 73, 97, 96, 73, 50, 74, 97, 74, 75, 99, 98, 75, 76, 100, 99, 76, 77, 101, 100, 77, 78, 102, 101, 78, 79, 103, 102, 79, 80, 104, 103, 80, 81, 105, 104, 81, 82, 106, 105, 82, 83, 107, 106, 83, 84, 108, 107, 84, 85, 109, 108, 85, 86, 110, 109, 86, 87, 111, 110, 87, 88, 112, 111, 88, 89, 113, 112, 89, 90, 114, 113, 90, 91, 115, 114, 91, 92, 116, 115, 92, 93, 117, 116, 93, 94, 118, 117, 94, 95, 119, 118, 95, 96, 120, 119, 96, 97, 121, 120, 97, 74, 98, 121, 98, 99, 123, 122, 99, 100, 124, 123, 100, 101, 125, 124, 101, 102, 126, 125, 102, 103, 127, 126, 103, 104, 128, 127, 104, 105, 129, 128, 105, 106, 130, 129, 106, 107, 131, 130, 107, 108, 132, 131, 108, 109, 133, 132, 109, 110, 134, 133, 110, 111, 135, 134, 111, 112, 136, 135, 112, 113, 137, 136, 113, 114, 138, 137, 114, 115, 139, 138, 115, 116, 140, 139, 116, 117, 141, 140, 117, 118, 142, 141, 118, 119, 143, 142, 119, 120, 144, 143, 120, 121, 145, 144, 121, 98, 122, 145, 122, 123, 147, 146, 123, 124, 148, 147, 124, 125, 149, 148, 125, 126, 150, 149, 126, 127, 151, 150, 127, 128, 152, 151, 128, 129, 153, 152, 129, 130, 154, 153, 130, 131, 155, 154, 131, 132, 156, 155, 132, 133, 157, 156, 133, 134, 158, 157, 134, 135, 159, 158, 135, 136, 160, 159, 136, 137, 161, 160, 137, 138, 162, 161, 138, 139, 163, 162, 139, 140, 164, 163, 140, 141, 165, 164, 141, 142, 166, 165, 142, 143, 167, 166, 143, 144, 168, 167, 144, 145, 169, 168, 145, 122, 146, 169, 146, 147, 171, 170, 147, 148, 172, 171, 148, 149, 173, 172, 149, 150, 174, 173, 150, 151, 175, 174, 151, 152, 176, 175, 152, 153, 177, 176, 153, 154, 178, 177, 154, 155, 179, 178, 155, 156, 180, 179, 156, 157, 181, 180, 157, 158, 182, 181, 158, 159, 183, 182, 159, 160, 184, 183, 160, 161, 185, 184, 161, 162, 186, 185, 162, 163, 187, 186, 163, 164, 188, 187, 164, 165, 189, 188, 165, 166, 190, 189, 166, 167, 191, 190, 167, 168, 192, 191, 168, 169, 193, 192, 169, 146, 170, 193, 170, 171, 195, 194, 171, 172, 196, 195, 172, 173, 197, 196, 173, 174, 198, 197, 174, 175, 199, 198, 175, 176, 200, 199, 176, 177, 201, 200, 177, 178, 202, 201, 178, 179, 203, 202, 179, 180, 204, 203, 180, 181, 205, 204, 181, 182, 206, 205, 182, 183, 207, 206, 183, 184, 208, 207, 184, 185, 209, 208, 185, 186, 210, 209, 186, 187, 211, 210, 187, 188, 212, 211, 188, 189, 213, 212, 189, 190, 214, 213, 190, 191, 215, 214, 191, 192, 216, 215, 192, 193, 217, 216, 193, 170, 194, 217, 194, 195, 219, 218, 195, 196, 220, 219, 196, 197, 221, 220, 197, 198, 222, 221, 198, 199, 223, 222, 199, 200, 224, 223, 200, 201, 225, 224, 201, 202, 226, 225, 202, 203, 227, 226, 203, 204, 228, 227, 204, 205, 229, 228, 205, 206, 230, 229, 206, 207, 231, 230, 207, 208, 232, 231, 208, 209, 233, 232, 209, 210, 234, 233, 210, 211, 235, 234, 211, 212, 236, 235, 212, 213, 237, 236, 213, 214, 238, 237, 214, 215, 239, 238, 215, 216, 240, 239, 216, 217, 241, 240, 217, 194, 218, 241, 218, 219, 243, 242, 219, 220, 244, 243, 220, 221, 245, 244, 221, 222, 246, 245, 222, 223, 247, 246, 223, 224, 248, 247, 224, 225, 249, 248, 225, 226, 250, 249, 226, 227, 251, 250, 227, 228, 252, 251, 228, 229, 253, 252, 229, 230, 254, 253, 230, 231, 255, 254, 231, 232, 256, 255, 232, 233, 257, 256, 233, 234, 258, 257, 234, 235, 259, 258, 235, 236, 260, 259, 236, 237, 261, 260, 237, 238, 262, 261, 238, 239, 263, 262, 239, 240, 264, 263, 240, 241, 265, 264, 241, 218, 242, 265, 242, 243, 1, 243, 244, 1, 244, 245, 1, 245, 246, 1, 246, 247, 1, 247, 248, 1, 248, 249, 1, 249, 250, 1, 250, 251, 1, 251, 252, 1, 252, 253, 1, 253, 254, 1, 254, 255, 1, 255, 256, 1, 256, 257, 1, 257, 258, 1, 258, 259, 1, 259, 260, 1, 260, 261, 1, 261, 262, 1, 262, 263, 1, 263, 264, 1, 264, 265, 1, 265, 242, 1]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-4.2221952e-8, 1, -1.1313371e-8), (7.292536e-8, -1, 1.9540348e-8), (0.25881907, 0.9659258, 0), (0.25000003, 0.9659258, -0.066987306), (0.22414389, 0.9659258, -0.12940954), (0.18301272, 0.9659258, -0.18301272), (0.12940952, 0.9659258, -0.2241439), (0.06698731, 0.9659258, -0.25000003), (1.9540296e-8, 0.9659258, -0.25881907), (-0.066987276, 0.9659258, -0.25000003), (-0.12940949, 0.9659258, -0.22414392), (-0.18301268, 0.9659258, -0.18301277), (-0.22414386, 0.9659258, -0.1294096), (-0.25, 0.9659258, -0.06698739), (-0.25881907, 0.9659258, -1.00787865e-7), (-0.25000006, 0.9659258, 0.066987194), (-0.22414395, 0.9659258, 0.12940943), (-0.18301283, 0.9659258, 0.18301262), (-0.12940961, 0.9659258, 0.22414385), (-0.0669874, 0.9659258, 0.25), (-1.2032817e-7, 0.9659258, 0.25881907), (0.06698717, 0.9659258, 0.25000006), (0.1294094, 0.9659258, 0.22414397), (0.1830126, 0.9659258, 0.18301284), (0.22414382, 0.9659258, 0.12940969), (0.24999997, 0.9659258, 0.06698749), (0.49999997, 0.86602545, 0), (0.48296288, 0.86602545, -0.1294095), (0.43301266, 0.86602545, -0.24999999), (0.35355335, 0.86602545, -0.35355335), (0.24999997, 0.86602545, -0.4330127), (0.12940952, 0.86602545, -0.48296288), (3.7748947e-8, 0.86602545, -0.49999997), (-0.12940945, 0.86602545, -0.4829629), (-0.24999991, 0.86602545, -0.43301272), (-0.35355327, 0.86602545, -0.35355344), (-0.4330126, 0.86602545, -0.2500001), (-0.48296285, 0.86602545, -0.12940967), (-0.49999997, 0.86602545, -1.9470717e-7), (-0.48296294, 0.86602545, 0.1294093), (-0.43301278, 0.86602545, 0.24999978), (-0.35355356, 0.86602545, 0.35355318), (-0.25000012, 0.86602545, 0.43301257), (-0.1294097, 0.86602545, 0.48296282), (-2.3245613e-7, 0.86602545, 0.49999997), (0.12940925, 0.86602545, 0.48296294), (0.24999973, 0.86602545, 0.4330128), (0.35355315, 0.86602545, 0.3535536), (0.43301252, 0.86602545, 0.25000027), (0.4829628, 0.86602545, 0.12940986), (0.70710677, 0.70710677, 0), (0.68301266, 0.70710677, -0.1830127), (0.6123724, 0.70710677, -0.35355338), (0.49999997, 0.70710677, -0.49999997), (0.35355335, 0.70710677, -0.61237246), (0.18301272, 0.70710677, -0.68301266), (5.3385076e-8, 0.70710677, -0.70710677), (-0.18301262, 0.70710677, -0.6830127), (-0.35355327, 0.70710677, -0.6123725), (-0.49999985, 0.70710677, -0.5000001), (-0.61237234, 0.70710677, -0.35355356), (-0.68301266, 0.70710677, -0.18301293), (-0.70710677, 0.70710677, -2.7535754e-7), (-0.6830128, 0.70710677, 0.1830124), (-0.6123726, 0.70710677, 0.3535531), (-0.5000003, 0.70710677, 0.49999973), (-0.3535536, 0.70710677, 0.6123723), (-0.18301298, 0.70710677, 0.6830126), (-3.2874263e-7, 0.70710677, 0.70710677), (0.18301234, 0.70710677, 0.6830128), (0.35355303, 0.70710677, 0.61237264), (0.4999997, 0.70710677, 0.5000003), (0.6123722, 0.70710677, 0.3535538), (0.68301255, 0.70710677, 0.1830132), (0.8660254, 0.5, 0), (0.83651626, 0.5, -0.22414386), (0.75, 0.5, -0.4330127), (0.6123724, 0.5, -0.6123724), (0.43301266, 0.5, -0.75), (0.22414389, 0.5, -0.83651626), (6.53831e-8, 0.5, -0.8660254), (-0.22414376, 0.5, -0.8365163), (-0.43301257, 0.5, -0.75000006), (-0.6123723, 0.5, -0.6123726), (-0.7499999, 0.5, -0.4330129), (-0.8365162, 0.5, -0.22414415), (-0.8660254, 0.5, -3.3724274e-7), (-0.8365164, 0.5, 0.2241435), (-0.7500002, 0.5, 0.43301234), (-0.61237276, 0.5, 0.6123721), (-0.43301296, 0.5, 0.7499998), (-0.2241442, 0.5, 0.8365162), (-4.0262586e-7, 0.5, 0.8660254), (0.22414343, 0.5, 0.8365164), (0.43301225, 0.5, 0.75000024), (0.61237204, 0.5, 0.6123728), (0.7499997, 0.5, 0.4330132), (0.83651614, 0.5, 0.22414449), (0.9659258, 0.25881904, 0), (0.93301266, 0.25881904, -0.25), (0.83651626, 0.25881904, -0.4829629), (0.68301266, 0.25881904, -0.68301266), (0.48296288, 0.25881904, -0.8365163), (0.25000003, 0.25881904, -0.93301266), (7.2925374e-8, 0.25881904, -0.9659258), (-0.24999988, 0.25881904, -0.9330127), (-0.48296276, 0.25881904, -0.8365164), (-0.6830125, 0.25881904, -0.68301284), (-0.83651614, 0.25881904, -0.48296314), (-0.9330126, 0.25881904, -0.2500003), (-0.9659258, 0.25881904, -3.7614538e-7), (-0.9330128, 0.25881904, 0.2499996), (-0.8365165, 0.25881904, 0.4829625), (-0.6830131, 0.25881904, 0.6830123), (-0.4829632, 0.25881904, 0.8365161), (-0.25000036, 0.25881904, 0.93301255), (-4.4907077e-7, 0.25881904, 0.9659258), (0.24999951, 0.25881904, 0.9330128), (0.48296243, 0.25881904, 0.83651656), (0.6830123, 0.25881904, 0.68301314), (0.83651596, 0.25881904, 0.48296347), (0.9330125, 0.25881904, 0.2500007), (1, 0, 0), (0.9659258, 0, -0.25881904), (0.8660254, 0, -0.5), (0.70710677, 0, -0.70710677), (0.49999997, 0, -0.86602545), (0.25881907, 0, -0.9659258), (7.54979e-8, 0, -1), (-0.25881892, 0, -0.9659259), (-0.49999985, 0, -0.8660255), (-0.7071066, 0, -0.70710695), (-0.86602527, 0, -0.50000024), (-0.96592575, 0, -0.25881937), (-1, 0, -3.8941437e-7), (-0.96592593, 0, 0.25881863), (-0.8660256, 0, 0.49999958), (-0.7071072, 0, 0.7071064), (-0.5000003, 0, 0.8660252), (-0.25881943, 0, 0.9659257), (-4.649123e-7, 0, 1), (0.25881854, 0, 0.96592593), (0.4999995, 0, 0.8660257), (0.70710635, 0, 0.70710725), (0.8660251, 0, 0.5000006), (0.96592563, 0, 0.25881976), (0.9659258, -0.25881904, 0), (0.93301266, -0.25881904, -0.25), (0.83651626, -0.25881904, -0.4829629), (0.68301266, -0.25881904, -0.68301266), (0.48296288, -0.25881904, -0.8365163), (0.25000003, -0.25881904, -0.93301266), (7.2925374e-8, -0.25881904, -0.9659258), (-0.24999988, -0.25881904, -0.9330127), (-0.48296276, -0.25881904, -0.8365164), (-0.6830125, -0.25881904, -0.68301284), (-0.83651614, -0.25881904, -0.48296314), (-0.9330126, -0.25881904, -0.2500003), (-0.9659258, -0.25881904, -3.7614538e-7), (-0.9330128, -0.25881904, 0.2499996), (-0.8365165, -0.25881904, 0.4829625), (-0.6830131, -0.25881904, 0.6830123), (-0.4829632, -0.25881904, 0.8365161), (-0.25000036, -0.25881904, 0.93301255), (-4.4907077e-7, -0.25881904, 0.9659258), (0.24999951, -0.25881904, 0.9330128), (0.48296243, -0.25881904, 0.83651656), (0.6830123, -0.25881904, 0.68301314), (0.83651596, -0.25881904, 0.48296347), (0.9330125, -0.25881904, 0.2500007), (0.8660254, -0.5, 0), (0.83651626, -0.5, -0.22414386), (0.75, -0.5, -0.4330127), (0.6123724, -0.5, -0.6123724), (0.43301266, -0.5, -0.75), (0.22414389, -0.5, -0.83651626), (6.53831e-8, -0.5, -0.8660254), (-0.22414376, -0.5, -0.8365163), (-0.43301257, -0.5, -0.75000006), (-0.6123723, -0.5, -0.6123726), (-0.7499999, -0.5, -0.4330129), (-0.8365162, -0.5, -0.22414415), (-0.8660254, -0.5, -3.3724274e-7), (-0.8365164, -0.5, 0.2241435), (-0.7500002, -0.5, 0.43301234), (-0.61237276, -0.5, 0.6123721), (-0.43301296, -0.5, 0.7499998), (-0.2241442, -0.5, 0.8365162), (-4.0262586e-7, -0.5, 0.8660254), (0.22414343, -0.5, 0.8365164), (0.43301225, -0.5, 0.75000024), (0.61237204, -0.5, 0.6123728), (0.7499997, -0.5, 0.4330132), (0.83651614, -0.5, 0.22414449), (0.70710677, -0.70710677, 0), (0.68301266, -0.70710677, -0.1830127), (0.6123724, -0.70710677, -0.35355338), (0.49999997, -0.70710677, -0.49999997), (0.35355335, -0.70710677, -0.61237246), (0.18301272, -0.70710677, -0.68301266), (5.3385076e-8, -0.70710677, -0.70710677), (-0.18301262, -0.70710677, -0.6830127), (-0.35355327, -0.70710677, -0.6123725), (-0.49999985, -0.70710677, -0.5000001), (-0.61237234, -0.70710677, -0.35355356), (-0.68301266, -0.70710677, -0.18301293), (-0.70710677, -0.70710677, -2.7535754e-7), (-0.6830128, -0.70710677, 0.1830124), (-0.6123726, -0.70710677, 0.3535531), (-0.5000003, -0.70710677, 0.49999973), (-0.3535536, -0.70710677, 0.6123723), (-0.18301298, -0.70710677, 0.6830126), (-3.2874263e-7, -0.70710677, 0.70710677), (0.18301234, -0.70710677, 0.6830128), (0.35355303, -0.70710677, 0.61237264), (0.4999997, -0.70710677, 0.5000003), (0.6123722, -0.70710677, 0.3535538), (0.68301255, -0.70710677, 0.1830132), (0.49999997, -0.86602545, 0), (0.48296288, -0.86602545, -0.1294095), (0.43301266, -0.86602545, -0.24999999), (0.35355335, -0.86602545, -0.35355335), (0.24999997, -0.86602545, -0.4330127), (0.12940952, -0.86602545, -0.48296288), (3.7748947e-8, -0.86602545, -0.49999997), (-0.12940945, -0.86602545, -0.4829629), (-0.24999991, -0.86602545, -0.43301272), (-0.35355327, -0.86602545, -0.35355344), (-0.4330126, -0.86602545, -0.2500001), (-0.48296285, -0.86602545, -0.12940967), (-0.49999997, -0.86602545, -1.9470717e-7), (-0.48296294, -0.86602545, 0.1294093), (-0.43301278, -0.86602545, 0.24999978), (-0.35355356, -0.86602545, 0.35355318), (-0.25000012, -0.86602545, 0.43301257), (-0.1294097, -0.86602545, 0.48296282), (-2.3245613e-7, -0.86602545, 0.49999997), (0.12940925, -0.86602545, 0.48296294), (0.24999973, -0.86602545, 0.4330128), (0.35355315, -0.86602545, 0.3535536), (0.43301252, -0.86602545, 0.25000027), (0.4829628, -0.86602545, 0.12940986), (0.25881907, -0.9659258, 0), (0.25000003, -0.9659258, -0.066987306), (0.22414389, -0.9659258, -0.12940954), (0.18301272, -0.9659258, -0.18301272), (0.12940952, -0.9659258, -0.2241439), (0.06698731, -0.9659258, -0.25000003), (1.9540296e-8, -0.9659258, -0.25881907), (-0.066987276, -0.9659258, -0.25000003), (-0.12940949, -0.9659258, -0.22414392), (-0.18301268, -0.9659258, -0.18301277), (-0.22414386, -0.9659258, -0.1294096), (-0.25, -0.9659258, -0.06698739), (-0.25881907, -0.9659258, -1.00787865e-7), (-0.25000006, -0.9659258, 0.066987194), (-0.22414395, -0.9659258, 0.12940943), (-0.18301283, -0.9659258, 0.18301262), (-0.12940961, -0.9659258, 0.22414385), (-0.0669874, -0.9659258, 0.25), (-1.2032817e-7, -0.9659258, 0.25881907), (0.06698717, -0.9659258, 0.25000006), (0.1294094, -0.9659258, 0.22414397), (0.1830126, -0.9659258, 0.18301284), (0.22414382, -0.9659258, 0.12940969), (0.24999997, -0.9659258, 0.06698749)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }     
}


def Xform "floor" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -1.5, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        rel material:binding = </materials/arnold_materialbuilder1>
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Scope "materials"
{
    def Material "arnold_materialbuilder1"
    {
        token outputs:arnold:surface.connect = </materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

        def Shader "standard_surface1"
        {
            uniform token info:id = "arnold:standard_surface"
            string inputs:aov_id1 = ""
            string inputs:aov_id2 = ""
            string inputs:aov_id3 = ""
            string inputs:aov_id4 = ""
            string inputs:aov_id5 = ""
            string inputs:aov_id6 = ""
            string inputs:aov_id7 = ""
            string inputs:aov_id8 = ""
            float inputs:base = 1
            color3f inputs:base_color = (0.18, 0.18, 0.18)
            bool inputs:caustics = 0
            float inputs:coat = 0
            float inputs:coat_affect_color = 0
            float inputs:coat_affect_roughness = 0
            float inputs:coat_anisotropy = 0
            color3f inputs:coat_color = (1, 1, 1)
            float inputs:coat_IOR = 1.5
            vector3f inputs:coat_normal = (0, 0, 0)
            float inputs:coat_rotation = 0
            float inputs:coat_roughness = 0.1
            int inputs:dielectric_priority = 0
            float inputs:diffuse_roughness = 0
            float inputs:emission = 0
            color3f inputs:emission_color = (1, 1, 1)
            bool inputs:exit_to_background = 0
            color3f inputs:id1 = (0, 0, 0)
            color3f inputs:id2 = (0, 0, 0)
            color3f inputs:id3 = (0, 0, 0)
            color3f inputs:id4 = (0, 0, 0)
            color3f inputs:id5 = (0, 0, 0)
            color3f inputs:id6 = (0, 0, 0)
            color3f inputs:id7 = (0, 0, 0)
            color3f inputs:id8 = (0, 0, 0)
            float inputs:indirect_diffuse = 1
            float inputs:indirect_specular = 1
            bool inputs:internal_reflections = 1
            float inputs:metalness = 0
            vector3f inputs:normal = (0, 0, 0)
            color3f inputs:opacity = (1, 1, 1)
            float inputs:sheen = 0
            color3f inputs:sheen_color = (1, 1, 1)
            float inputs:sheen_roughness = 0.3
            float inputs:specular = 1
            float inputs:specular_anisotropy = 0
            color3f inputs:specular_color = (1, 1, 1)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation = 0
            float inputs:specular_roughness = 0.2
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy = 0
            color3f inputs:subsurface_color = (1, 1, 1)
            color3f inputs:subsurface_radius = (1, 1, 1)
            float inputs:subsurface_scale = 1
            token inputs:subsurface_type = "randomwalk"
            vector3f inputs:tangent = (0, 0, 0)
            float inputs:thin_film_IOR = 1.5
            float inputs:thin_film_thickness = 0
            bool inputs:thin_walled = 0
            float inputs:transmission = 0
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth = 0
            float inputs:transmission_dispersion = 0
            float inputs:transmission_extra_roughness = 0
            color3f inputs:transmission_scatter = (0, 0, 0)
            float inputs:transmission_scatter_anisotropy = 0
            bool inputs:transmit_aovs = 0
            token outputs:shader
        }
    }
}

def Scope "lights" (
    kind = "group"
)
{
    def Scope "LGT" (
        kind = "group"
    )
    {
        def Scope "lights" (
            kind = "component"
        )
        {
            def Scope "natural" (
                kind = "component"
            )
            {
                def SphereLight "ml_natural_default_all_01" (
                    apiSchemas = ["ShapingAPI", "CollectionAPI:lightLink"]
                )
                {
                    custom float barndoorbottom = 0
                    custom float barndoorbottomedge = 0
                    custom float barndoorleft = 0
                    custom float barndoorleftedge = 0
                    custom float barndoorright = 0
                    custom float barndoorrightedge = 0
                    custom float barndoortop = 0
                    custom float barndoortopedge = 0
                    rel collection:lightLink:excludes = </floor/mesh_0>
                    uniform token collection:lightLink:expansionRule = "expandPrims"
                    rel collection:lightLink:includes = </collections.collection:sphere>
                    color3f color = (1, 1, 1)
                    float diffuse = 1
                    bool enableColorTemperature = 0
                    float exposure = 7
                    rel filters
                    custom float houdini:guidescale = 1
                    float intensity = 1
                    bool normalize = 0
                    custom string[] primvars:arnold:filters = []
                    float primvars:arnold:radius = 1.32 (
                        interpolation = "constant"
                    )
                    custom string sda:light:type = "point"
                    float shaping:cone:angle = 12
                    custom float shaping:cone:factor = 2
                    float shaping:cone:softness = 0
                    float specular = 1
                    bool treatAsPoint = 1
                    matrix4d xformOp:transform = ( (0.9238128757386203, 0, 0.38284431642580335, 0), (0.36873175071841335, 0.26900927590591917, -0.8897589030117693, 0), (-0.10298867234640195, 0.9631375859536233, 0.2485142327750111, 0), (-0.7087040471117712, 6.2596965999898675, 1.8104883749055265, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def ArnoldUsdLuxLightFilter "default_filter"
                    {
                    }
                }
            }

            def Scope "practical" (
                kind = "component"
            )
            {
            }

            def Scope "support" (
                kind = "component"
            )
            {
            }
        }
    }
}

def "collections" (
    apiSchemas = ["CollectionAPI:floor", "CollectionAPI:light", "CollectionAPI:sphere"]
)
{
    uniform token collection:floor:expansionRule = "explicitOnly"
    rel collection:floor:includes = </floor/mesh_0>
    uniform token collection:light:expansionRule = "explicitOnly"
    rel collection:light:includes = </lights/LGT/lights/natural/ml_natural_default_all_01>
    uniform token collection:sphere:expansionRule = "explicitOnly"
    rel collection:sphere:includes = </sphere>
}

