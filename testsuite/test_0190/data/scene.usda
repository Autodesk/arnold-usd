#usda 1.0
(
    endFrame = 105
    startFrame = 105
)

def ArnoldOptions "options"
{
    int arnold:AA_samples = 3
    int arnold:AA_seed = 105
    string arnold:camera = "/camera1/cameraShape1"
    float arnold:frame.timeSamples = {
        105: 105,
    }
    int arnold:GI_diffuse_depth = 1
    int arnold:GI_specular_depth = 1
    int arnold:GI_transmission_depth = 8
    float arnold:meters_per_unit = 0.01
    string arnold:name = "options"
    string[] arnold:outputs = ["RGBA RGBA myfilter mydriver"]
    bool arnold:texture_automip = 0
    bool arnold:texture_per_file_stats = 1
    int arnold:threads = 64
    int arnold:xres = 160
    int arnold:yres = 120
    string primvars:render_layer = "defaultRenderLayer" (
        elementSize = 1
        interpolation = "constant"
    )
}

def "defaultArnoldFilter"
{
    def ArnoldGaussianFilter "gaussian_filter"
    {
        string arnold:name = "myfilter"
    }
}

def "defaultArnoldDriver"
{
    def ArnoldDriverTiff "driver_tif_RGBA"
    {
        string arnold:filename = "testrender.tif"
        string arnold:name = "mydriver"
    }
}

def Xform "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov.timeSamples = {
            104.5: [54.432224],
            105.5: [54.432224],
        }
        float2[] primvars:arnold:lens_shift.timeSamples = {
            104.5: [(0, 0)],
            105.5: [(0, 0)],
        }
        float2[] primvars:arnold:lens_tilt_angle.timeSamples = {
            104.5: [(0, 0)],
            105.5: [(0, 0)],
        }
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0.5
        float primvars:arnold:motion_start = -0.5
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 1.5
        double shutter:open = -1.5
        float verticalAperture = 28.928568
        matrix4d xformOp:transform.timeSamples = {
            104.5: ( (0.09410831332206726, -6.938893903907228e-18, 0.995561957359314, 0), (-0.08783598989248276, 0.9961003661155701, 0.008302945643663406, 0), (-0.9916796088218689, -0.08822754770517349, 0.09374132007360458, 0), (-364.44140625, -35.038536071777344, 77.52408599853516, 1) ),
            105.5: ( (0.09410831332206726, -6.938893903907228e-18, 0.995561957359314, 0), (-0.08783598989248276, 0.9961003661155701, 0.008302945643663406, 0), (-0.9916796088218689, -0.08822754770517349, 0.09374132007360458, 0), (-364.44140625, -35.038536071777344, 77.52408599853516, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "aiSkyDomeLight1"
{
    def DomeLight "aiSkyDomeLightShape1"
    {
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        float inputs:exposure = 0
        float inputs:intensity = 1
        float inputs:specular = 1
        token inputs:texture:format = "latlong"
        float primvars:arnold:motion_end = 0.5
        float primvars:arnold:motion_start = -0.5
        string primvars:dcc_name = "aiSkyDomeLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
    }
}

def Xform "aiStandIn"
{
    def ArnoldUsd "aiStandInShape"
    {
        string arnold:filename = "C:/usd/scenes/UsdSkelExamples/HumanFemale/HumanFemale.walk.usd"
        float arnold:frame = 105
        float arnold:motion_end = 0.5
        float arnold:motion_start = -0.5
        int arnold:threads = 1
        float3[] extent = [(-61.666496, -36.691513, -0.8338686), (61.504726, 32.432106, 134.28993)]
        string primvars:dcc_name = "aiStandInShape" (
            elementSize = 1
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            104.5: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, 0, 1) ),
            105.5: ( (1, 0, 0, 0), (0, 0, 1, 0), (0, -1, 0, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "camera1"
{
    def Camera "cameraShape1"
    {
        float2 clippingRange = (0.1, 10000)
        float focusDistance = 1
        float horizontalAperture = 51.428566
        float[] primvars:arnold:aperture_size = [0]
        float[] primvars:arnold:fov.timeSamples = {
            104.5: [54.432224],
            105.5: [54.432224],
        }
        float2[] primvars:arnold:lens_shift.timeSamples = {
            104.5: [(0, 0)],
            105.5: [(0, 0)],
        }
        float2[] primvars:arnold:lens_tilt_angle.timeSamples = {
            104.5: [(0, 0)],
            105.5: [(0, 0)],
        }
        vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
        float primvars:arnold:motion_end = 0.5
        float primvars:arnold:motion_start = -0.5
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        float2[] primvars:arnold:screen_window_max = [(1, 1)]
        float2[] primvars:arnold:screen_window_min = [(-1, -1)]
        vector3f[] primvars:arnold:up = [(0, 1, 0)]
        color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
        string primvars:dcc_name = "cameraShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 0.5
        double shutter:open = -0.5
        float verticalAperture = 28.928568
        matrix4d xformOp:transform.timeSamples = {
            104.5: ( (0.4383711516857147, 6.938893903907228e-18, -0.8987940549850464, 0), (-0.09706918150186539, -0.9941509366035461, -0.04734380170702934, 0), (-0.8935369849205017, 0.10799935460090637, -0.43580710887908936, 0), (-196.94586181640625, -29.065956115722656, -104.31462097167969, 1) ),
            105.5: ( (0.4383711516857147, 6.938893903907228e-18, -0.8987940549850464, 0), (-0.09706918150186539, -0.9941509366035461, -0.04734380170702934, 0), (-0.8935369849205017, 0.10799935460090637, -0.43580710887908936, 0), (-196.94586181640625, -29.065956115722656, -104.31462097167969, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

