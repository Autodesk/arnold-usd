#usda 1.0

def "World"
{
    def Cylinder "cylinder" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        token axis = "Y"
        double height = 3
        rel material:binding = </World/material>
        custom bool primvars:arnold:smoothing = 0
        double radius = 1.1
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Material "material"
    {
        token outputs:surface.connect = </World/material/PreviewShader.outputs:surface>

        def Shader "PreviewShader"
        {
            uniform token info:id = "arnold:flat"
            color3f inputs:color = (0, 0, 1)
            token outputs:surface
        }
    }

    def Cone "cone" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        token axis = "Y"
        double height = 3
        rel material:binding = </World/material2>
        custom bool primvars:arnold:smoothing = 0
        double radius = 1.1
        float3 xformOp:translate = (5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Material "material2"
    {
        token outputs:surface.connect = </World/material2/PreviewShader.outputs:surface>

        def Shader "PreviewShader"
        {
            uniform token info:id = "arnold:standard_surface"
            color3f inputs:base_color = (0.5, 1, 1)
            token outputs:surface
        }
    }

    def Cube "cube" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </World/material3>
        custom bool primvars:arnold:smoothing = 0
        float3 xformOp:translate = (-5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
    }

    def Material "material3"
    {
        token outputs:surface.connect = </World/material3/PreviewShader.outputs:surface>

        def Shader "PreviewShader"
        {
            uniform token info:id = "arnold:image"
            asset inputs:filename = @./red.png@
            token outputs:surface
        }
    }

    def DomeLight "light"
    {
        color3f inputs:color = (1, 0.4, 1)
        float inputs:intensity = 1
        float inputs:specular = 0
        float primvars:arnold:camera = 0.5
    }
}

