#usda 1.0
(
    defaultPrim = "mycamera"
    framesPerSecond = 24
    timeCodesPerSecond = 24
)

def Camera "mycamera"
{
    float2 clippingRange = (0.0001, 1e30)
    float focusDistance = 20
    float horizontalAperture = 49.999996
    float[] primvars:arnold:aperture_size = [0]
    float[] primvars:arnold:fov = [53.1301]
    float2[] primvars:arnold:lens_shift = [(0, 0)]
    float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
    vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
    string primvars:arnold:name = "mycamera"
    vector3f[] primvars:arnold:position = [(0, 0, 0)]
    float2[] primvars:arnold:screen_window_max = [(1, 1)]
    float2[] primvars:arnold:screen_window_min = [(-1, -1)]
    vector3f[] primvars:arnold:up = [(0, 1, 0)]
    token projection = "perspective"
    double shutter:close = 0
    double shutter:open = 0
    float verticalAperture = 37.499996
    matrix4d xformOp:transform = ( (0.9396926164627075, -0, -0.3420201539993286, 0), (-0.1710100769996643, 0.8660253882408142, -0.46984630823135376, 0), (0.29619812965393066, 0.5, 0.813797652721405, 0), (2, 4, 7, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def Mesh "cube" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.1, -0.1, -0.1), (0.1, 0.1, 0.1)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 2, 3, 1, 2, 4, 5, 3, 4, 6, 7, 5, 6, 0, 1, 7, 1, 3, 5, 7, 6, 4, 2, 0]
    uniform token orientation = "rightHanded"
    point3f[] points = [(-0.1, -0.1, 0.1), (-0.1, 0.1, 0.1), (0.1, -0.1, 0.1), (0.1, 0.1, 0.1), (0.1, -0.1, -0.1), (0.1, 0.1, -0.1), (-0.1, -0.1, -0.1), (-0.1, 0.1, -0.1)]
    uint primvars:arnold:id = 1734436429
    string primvars:arnold:name = "cube"
    uchar primvars:arnold:subdiv_iterations = 1
    vector3f[] primvars:normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0)] (
        elementSize = 24
        interpolation = "faceVarying"
    )
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    float2[] primvars:st = [(0, 0), (0, 1), (1, 0), (1, 1)] (
        elementSize = 4
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (0.73319990457374, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def Mesh "pyramid" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.1, -0.1, -0.1), (0.1, 0.1, 0.1)]
    int[] faceVertexCounts = [4, 3, 3, 3, 3]
    int[] faceVertexIndices = [0, 3, 2, 1, 1, 2, 4, 2, 3, 4, 3, 0, 4, 0, 1, 4]
    uniform token orientation = "rightHanded"
    point3f[] points = [(-0.1, -0.1, 0.1), (0.1, -0.1, 0.1), (0.1, -0.1, -0.1), (-0.1, -0.1, -0.1), (0, 0.1, -0)]
    uint primvars:arnold:id = 1701672962
    string primvars:arnold:name = "pyramid"
    uchar primvars:arnold:subdiv_iterations = 1
    vector3f[] primvars:normals = [(0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0.89442724, 0.44721362, -0), (0.89442724, 0.44721362, -0), (0.89442724, 0.44721362, -0), (0, 0.44721362, -0.89442724), (0, 0.44721362, -0.89442724), (0, 0.44721362, -0.89442724), (-0.89442724, 0.44721362, -0), (-0.89442724, 0.44721362, -0), (-0.89442724, 0.44721362, -0), (0, 0.4472136, 0.8944272), (0, 0.4472136, 0.8944272), (0, 0.4472136, 0.8944272)] (
        elementSize = 16
        interpolation = "faceVarying"
    )
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    float2[] primvars:st = [(0, 0), (0, 1), (0.5, 1), (1, 0), (1, 1)] (
        elementSize = 5
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [1, 0, 3, 4, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2]
    uniform token subdivisionScheme = "none"
    double3 xformOp:translate = (0, 0.5610524307676921, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def "mtl"
{
    def Material "default_shader"
    {
        token outputs:arnold:surface.connect = </mtl/default_shader/default_shader.outputs:surface>

        def Shader "default_shader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0, 1, 0)
            token outputs:surface
        }
    }
}

def ArnoldProceduralCustom "myinstancer"
{
    matrix4d[] arnold:instance_matrix = [( (1.0184513330459595, 0.2778952121734619, -0.24490804970264435, 0), (-0.2407136857509613, 1.0411407947540283, 0.18036511540412903, 0), (0.28153619170188904, -0.11510389298200607, 1.040162205696106, 0), (-1, -1, 1, 1) ), ( (0.9351626634597778, -0.18157894909381866, 0.07611681520938873, 0), (0.18064740300178528, 0.9382467269897461, 0.01880197413265705, 0), (-0.07830198109149933, -0.004010403994470835, 0.9524424076080322, 0), (1, -1, 1, 1) ), ( (1.3231134414672852, -0.40881669521331787, -0.24392667412757874, 0), (0.4614395201206207, 1.2785154581069946, 0.3601834177970886, 0), (0.11706782877445221, -0.41895994544029236, 1.3371716737747192, 0), (-1, 1, 1, 1) ), ( (1.4950085878372192, 0.2003665715456009, 0.20692646503448486, 0), (-0.252232164144516, 1.438840389251709, 0.4291076362133026, 0), (-0.13908366858959198, -0.4556398391723633, 1.4460511207580566, 0), (1, 1, 1, 1) ), ( (1.1202117204666138, -0.26375651359558105, 0.28596213459968567, 0), (0.24363166093826294, 1.155211091041565, 0.11111751198768616, 0), (-0.3032910227775574, -0.04621678963303566, 1.1454670429229736, 0), (-1, -1, -1, 1) ), ( (0.7520838975906372, -0.0171175729483366, 0.0362783707678318, 0), (0.007319223135709763, 0.7282613515853882, 0.19188833236694336, 0), (-0.039440594613552094, -0.19126342236995697, 0.7273939847946167, 0), (1, -1, -1, 1) ), ( (0.5699591040611267, -0.10311351716518402, -0.023792672902345657, 0), (0.10337813943624496, 0.5703900456428528, 0.004471365362405777, 0), (0.022615231573581696, -0.008639192208647728, 0.5791940689086914, 0), (-1, 1, -1, 1) ), ( (0.4785705506801605, 0.08538667112588882, -0.03917529433965683, 0), (-0.08574676513671875, 0.4801059663295746, -0.0010522963711991906, 0), (0.03838072717189789, 0.00792027823626995, 0.4861270785331726, 0), (1, 1, -1, 1) )]
    uchar[] arnold:instance_visibility = [157, 0, 0, 157, 0, 157, 0, 157]
    string arnold:node_entry = "instancer"
    uint[] arnold:node_idxs = [1, 0, 0, 1, 1, 1, 0, 0]
    string[] arnold:nodes = ["pyramid", "cube"]
}

def Xform "prim0001"
{
    double3 xformOp:translate = (-1.7714976346134546, 0.08201998408876632, 0.8168287006650528)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    def ArnoldProceduralCustom "prim0002" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        string arnold:node_entry = "sphere"
        rel material:binding = </mtl/default_shader>
    }
}

