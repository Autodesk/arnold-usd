#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def PointInstancer "instances_rbg"
{
    int64[] invisibleIds = []
    quath[] orientations = [(0, 0, 1, 0), (-0.273193, 0.961914, 0, 0), (0.273193, -0.297363, 0.915039, 0), (0.525879, -0.850586, 0, 0), (-0.487061, 0.706543, -0.513184, 0), (0.525879, -0.262939, 0.809082, 0), (0.273193, 0.77832, 0.56543, 0), (0.487061, 0.27002, 0.830566, 0), (0.525879, 0.687988, 0.5, 0), (0.273193, 0.77832, -0.56543, 0), (0.487061, 0.873535, 0, 0), (0.525879, 0.687988, -0.5, 0), (-0.273193, 0.297363, 0.915039, 0), (-0.487061, -0.27002, 0.830566, 0), (0.525879, -0.262939, -0.809082, 0), (-0.487061, 0.706543, 0.513184, 0), (0.707031, -0.672363, -0.218506, 0), (0.707031, -0.415527, -0.572266, 0), (0.850586, -0.425293, -0.309082, 0), (0.707031, 0, -0.707031, 0), (0.707031, 0.415527, -0.572266, 0), (0.850586, 0.162476, -0.5, 0), (0.707031, 0.672363, -0.218506, 0), (0.707031, 0.672363, 0.218506, 0), (0.850586, 0.525879, 0, 0), (0.707031, 0.415527, 0.572266, 0), (0.707031, 0, 0.707031, 0), (0.850586, 0.162476, 0.5, 0), (0.707031, -0.415527, 0.572266, 0), (0.707031, -0.672363, 0.218506, 0), (0.850586, -0.425293, 0.309082, 0), (0.873535, -0.487061, 0, 0), (0.873535, -0.150513, -0.463135, 0), (0.873535, 0.394043, -0.286133, 0), (0.873535, 0.394043, 0.286133, 0), (0.873535, -0.150513, 0.463135, 0), (1, 0, 0, 0), (0.961914, -0.221069, 0.160645, 0), (0.961914, -0.221069, -0.160645, 0), (0.961914, 0.0844727, 0.26001, 0), (0.961914, 0.273193, 0, 0), (0.961914, 0.0844727, -0.26001, 0)]
    point3f[] positions = [(0, 0, -1), (0, 0.5257312, -0.8506508), (0.49999997, 0.1624601, -0.8506508), (0, 0.89442736, -0.44721314), (0.49999997, 0.68819135, -0.5257306), (0.85065085, 0.27639368, -0.4472132), (0.309017, -0.42532542, -0.85065085), (0.80901724, -0.2628654, -0.5257308), (0.5257312, -0.72360694, -0.44721326), (-0.309017, -0.42532542, -0.85065085), (0, -0.850651, -0.5257307), (-0.5257312, -0.72360694, -0.44721326), (-0.49999997, 0.1624601, -0.8506508), (-0.80901724, -0.2628654, -0.5257308), (-0.85065085, 0.27639368, -0.4472132), (-0.49999997, 0.68819135, -0.5257306), (-0.30901697, 0.9510566, 0), (-0.8090168, 0.5877854, 0), (-0.5257312, 0.72360694, 0.44721326), (-1, 0, 0), (-0.8090168, -0.5877854, 0), (-0.85065085, -0.27639368, 0.4472132), (-0.30901697, -0.9510566, 0), (0.30901697, -0.9510566, 0), (0, -0.89442736, 0.44721314), (0.8090168, -0.5877854, 0), (1, 0, 0), (0.85065085, -0.27639368, 0.4472132), (0.8090168, 0.5877854, 0), (0.30901697, 0.9510566, 0), (0.5257312, 0.72360694, 0.44721326), (0, 0.850651, 0.5257307), (-0.80901724, 0.2628654, 0.5257308), (-0.49999997, -0.68819135, 0.5257306), (0.49999997, -0.68819135, 0.5257306), (0.80901724, 0.2628654, 0.5257308), (0, 0, 1), (0.309017, 0.42532542, 0.85065085), (-0.309017, 0.42532542, 0.85065085), (0.49999997, -0.1624601, 0.8506508), (0, -0.5257312, 0.8506508), (-0.49999997, -0.1624601, 0.8506508)]
    vector3f[] primvars:mycolor (
        interpolation = "varying"
    )
    vector3f[] primvars:mycolor.timeSamples = {
        1: [(0.9582039, 0.15424371, 0.5480124), (0.7727308, 0.72311544, 0.19081402), (0.46929908, 0.40937233, 0.3800286), (0.6583303, 0.59475005, 0.8163923), (0.89987314, 0.69653404, 0.14023292), (0.17178833, 0.16197443, 0.055220842), (0.26358795, 0.5937543, 0.5599154), (0.8879849, 0.20854461, 0.50171316), (0.01825583, 0.49151754, 0.5735167), (0.7850044, 0.99299014, 0.31475973), (0.6721076, 0.26045692, 0.38727355), (0.09140968, 0.047443867, 0.99301434), (0.94789493, 0.77894914, 0.09736788), (0.7328118, 0.72449946, 0.7321042), (0.48378193, 0.9427072, 0.5482981), (0.5246879, 0.9208096, 0.39041364), (0.28825068, 0.5714536, 0.14882076), (0.98389125, 0.5707756, 0.22863424), (0.8634243, 0.43731236, 0.50137544), (0.002426505, 0.7780477, 0.5750749), (0.5140139, 0.71890104, 0.12217975), (0.43425107, 0.898981, 0.55853033), (0.4673605, 0.124810696, 0.65388846), (0.40474534, 0.42062402, 0.025766969), (0.74608994, 0.019649148, 0.069120884), (0.179497, 0.56503725, 0.8198706), (0.027473927, 0.85542274, 0.1162554), (0.6077249, 0.09171367, 0.22957766), (0.54621065, 0.04058349, 0.55312216), (0.41257632, 0.6245023, 0.69505036), (0.97525024, 0.07214868, 0.32286215), (0.93635607, 0.8184664, 0.47491586), (0.4246949, 0.020148039, 0.7891998), (0.72551084, 0.7977773, 0.48867357), (0.17928433, 0.4497633, 0.21371245), (0.9023677, 0.43905962, 0.23094618), (0.7364843, 0.23562098, 0.6963036), (0.010159135, 0.35926855, 0.16445541), (0.11265361, 0.51608837, 0.55792475), (0.6870955, 0.15253651, 0.6101787), (0.4114622, 0.09770036, 0.9090245), (0.092295766, 0.8217747, 0.3786881)],
    }
    int[] protoIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    rel prototypes = </instances_rbg/Prototypes/torus1>
    matrix4d xformOp:transform:transform1 = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-3, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:transform1"]

    def Scope "Prototypes"
    {
        def Xform "torus1" (
            kind = "component"
        )
        {
            rel material:binding = </instances_rbg/Prototypes/materials/arnold_materialbuilder1>
            matrix4d xformOp:transform:xform = ( (0.19, 0, 0, 0), (0, 0, 0.19, 0), (0, -0.19, 0, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform:xform"]

            def Mesh "mesh_0"
            {
                float3[] extent = [(-1.5, -0.5, -1.5), (1.5, 0.5, 1.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 25, 24, 1, 2, 26, 25, 2, 3, 27, 26, 3, 4, 28, 27, 4, 5, 29, 28, 5, 6, 30, 29, 6, 7, 31, 30, 7, 8, 32, 31, 8, 9, 33, 32, 9, 10, 34, 33, 10, 11, 35, 34, 11, 12, 36, 35, 12, 13, 37, 36, 13, 14, 38, 37, 14, 15, 39, 38, 15, 16, 40, 39, 16, 17, 41, 40, 17, 18, 42, 41, 18, 19, 43, 42, 19, 20, 44, 43, 20, 21, 45, 44, 21, 22, 46, 45, 22, 23, 47, 46, 23, 0, 24, 47, 24, 25, 49, 48, 25, 26, 50, 49, 26, 27, 51, 50, 27, 28, 52, 51, 28, 29, 53, 52, 29, 30, 54, 53, 30, 31, 55, 54, 31, 32, 56, 55, 32, 33, 57, 56, 33, 34, 58, 57, 34, 35, 59, 58, 35, 36, 60, 59, 36, 37, 61, 60, 37, 38, 62, 61, 38, 39, 63, 62, 39, 40, 64, 63, 40, 41, 65, 64, 41, 42, 66, 65, 42, 43, 67, 66, 43, 44, 68, 67, 44, 45, 69, 68, 45, 46, 70, 69, 46, 47, 71, 70, 47, 24, 48, 71, 48, 49, 73, 72, 49, 50, 74, 73, 50, 51, 75, 74, 51, 52, 76, 75, 52, 53, 77, 76, 53, 54, 78, 77, 54, 55, 79, 78, 55, 56, 80, 79, 56, 57, 81, 80, 57, 58, 82, 81, 58, 59, 83, 82, 59, 60, 84, 83, 60, 61, 85, 84, 61, 62, 86, 85, 62, 63, 87, 86, 63, 64, 88, 87, 64, 65, 89, 88, 65, 66, 90, 89, 66, 67, 91, 90, 67, 68, 92, 91, 68, 69, 93, 92, 69, 70, 94, 93, 70, 71, 95, 94, 71, 48, 72, 95, 72, 73, 97, 96, 73, 74, 98, 97, 74, 75, 99, 98, 75, 76, 100, 99, 76, 77, 101, 100, 77, 78, 102, 101, 78, 79, 103, 102, 79, 80, 104, 103, 80, 81, 105, 104, 81, 82, 106, 105, 82, 83, 107, 106, 83, 84, 108, 107, 84, 85, 109, 108, 85, 86, 110, 109, 86, 87, 111, 110, 87, 88, 112, 111, 88, 89, 113, 112, 89, 90, 114, 113, 90, 91, 115, 114, 91, 92, 116, 115, 92, 93, 117, 116, 93, 94, 118, 117, 94, 95, 119, 118, 95, 72, 96, 119, 96, 97, 121, 120, 97, 98, 122, 121, 98, 99, 123, 122, 99, 100, 124, 123, 100, 101, 125, 124, 101, 102, 126, 125, 102, 103, 127, 126, 103, 104, 128, 127, 104, 105, 129, 128, 105, 106, 130, 129, 106, 107, 131, 130, 107, 108, 132, 131, 108, 109, 133, 132, 109, 110, 134, 133, 110, 111, 135, 134, 111, 112, 136, 135, 112, 113, 137, 136, 113, 114, 138, 137, 114, 115, 139, 138, 115, 116, 140, 139, 116, 117, 141, 140, 117, 118, 142, 141, 118, 119, 143, 142, 119, 96, 120, 143, 120, 121, 145, 144, 121, 122, 146, 145, 122, 123, 147, 146, 123, 124, 148, 147, 124, 125, 149, 148, 125, 126, 150, 149, 126, 127, 151, 150, 127, 128, 152, 151, 128, 129, 153, 152, 129, 130, 154, 153, 130, 131, 155, 154, 131, 132, 156, 155, 132, 133, 157, 156, 133, 134, 158, 157, 134, 135, 159, 158, 135, 136, 160, 159, 136, 137, 161, 160, 137, 138, 162, 161, 138, 139, 163, 162, 139, 140, 164, 163, 140, 141, 165, 164, 141, 142, 166, 165, 142, 143, 167, 166, 143, 120, 144, 167, 144, 145, 169, 168, 145, 146, 170, 169, 146, 147, 171, 170, 147, 148, 172, 171, 148, 149, 173, 172, 149, 150, 174, 173, 150, 151, 175, 174, 151, 152, 176, 175, 152, 153, 177, 176, 153, 154, 178, 177, 154, 155, 179, 178, 155, 156, 180, 179, 156, 157, 181, 180, 157, 158, 182, 181, 158, 159, 183, 182, 159, 160, 184, 183, 160, 161, 185, 184, 161, 162, 186, 185, 162, 163, 187, 186, 163, 164, 188, 187, 164, 165, 189, 188, 165, 166, 190, 189, 166, 167, 191, 190, 167, 144, 168, 191, 168, 169, 193, 192, 169, 170, 194, 193, 170, 171, 195, 194, 171, 172, 196, 195, 172, 173, 197, 196, 173, 174, 198, 197, 174, 175, 199, 198, 175, 176, 200, 199, 176, 177, 201, 200, 177, 178, 202, 201, 178, 179, 203, 202, 179, 180, 204, 203, 180, 181, 205, 204, 181, 182, 206, 205, 182, 183, 207, 206, 183, 184, 208, 207, 184, 185, 209, 208, 185, 186, 210, 209, 186, 187, 211, 210, 187, 188, 212, 211, 188, 189, 213, 212, 189, 190, 214, 213, 190, 191, 215, 214, 191, 168, 192, 215, 192, 193, 217, 216, 193, 194, 218, 217, 194, 195, 219, 218, 195, 196, 220, 219, 196, 197, 221, 220, 197, 198, 222, 221, 198, 199, 223, 222, 199, 200, 224, 223, 200, 201, 225, 224, 201, 202, 226, 225, 202, 203, 227, 226, 203, 204, 228, 227, 204, 205, 229, 228, 205, 206, 230, 229, 206, 207, 231, 230, 207, 208, 232, 231, 208, 209, 233, 232, 209, 210, 234, 233, 210, 211, 235, 234, 211, 212, 236, 235, 212, 213, 237, 236, 213, 214, 238, 237, 214, 215, 239, 238, 215, 192, 216, 239, 216, 217, 241, 240, 217, 218, 242, 241, 218, 219, 243, 242, 219, 220, 244, 243, 220, 221, 245, 244, 221, 222, 246, 245, 222, 223, 247, 246, 223, 224, 248, 247, 224, 225, 249, 248, 225, 226, 250, 249, 226, 227, 251, 250, 227, 228, 252, 251, 228, 229, 253, 252, 229, 230, 254, 253, 230, 231, 255, 254, 231, 232, 256, 255, 232, 233, 257, 256, 233, 234, 258, 257, 234, 235, 259, 258, 235, 236, 260, 259, 236, 237, 261, 260, 237, 238, 262, 261, 238, 239, 263, 262, 239, 216, 240, 263, 240, 241, 265, 264, 241, 242, 266, 265, 242, 243, 267, 266, 243, 244, 268, 267, 244, 245, 269, 268, 245, 246, 270, 269, 246, 247, 271, 270, 247, 248, 272, 271, 248, 249, 273, 272, 249, 250, 274, 273, 250, 251, 275, 274, 251, 252, 276, 275, 252, 253, 277, 276, 253, 254, 278, 277, 254, 255, 279, 278, 255, 256, 280, 279, 256, 257, 281, 280, 257, 258, 282, 281, 258, 259, 283, 282, 259, 260, 284, 283, 260, 261, 285, 284, 261, 262, 286, 285, 262, 263, 287, 286, 263, 240, 264, 287, 264, 265, 1, 0, 265, 266, 2, 1, 266, 267, 3, 2, 267, 268, 4, 3, 268, 269, 5, 4, 269, 270, 6, 5, 270, 271, 7, 6, 271, 272, 8, 7, 272, 273, 9, 8, 273, 274, 10, 9, 274, 275, 11, 10, 275, 276, 12, 11, 276, 277, 13, 12, 277, 278, 14, 13, 278, 279, 15, 14, 279, 280, 16, 15, 280, 281, 17, 16, 281, 282, 18, 17, 282, 283, 19, 18, 283, 284, 20, 19, 284, 285, 21, 20, 285, 286, 22, 21, 286, 287, 23, 22, 287, 264, 0, 23]
                uniform token orientation = "leftHanded"
                point3f[] points = [(1.5, -4.371139e-8, -0.0000011682431), (1.4488884, -4.371139e-8, -0.38822964), (1.2990377, -4.371139e-8, -0.7500009), (1.0606595, -4.371139e-8, -1.0606608), (0.7499992, -4.371139e-8, -1.2990385), (0.38822782, -4.371139e-8, -1.4488889), (-6.973684e-7, -4.371139e-8, -1.5), (-0.38822913, -4.371139e-8, -1.4488885), (-0.7500005, -4.371139e-8, -1.2990378), (-1.0606608, -4.371139e-8, -1.0606596), (-1.2990384, -4.371139e-8, -0.7499994), (-1.4488889, -4.371139e-8, -0.38822794), (-1.5, -4.371139e-8, 5.8412155e-7), (-1.4488887, -4.371139e-8, 0.38822907), (-1.2990379, -4.371139e-8, 0.75000036), (-1.0606599, -4.371139e-8, 1.0606604), (-0.74999976, -4.371139e-8, 1.2990383), (-0.3882284, -4.371139e-8, 1.4488888), (1.13246855e-7, -4.371139e-8, 1.5), (0.3882286, -4.371139e-8, 1.4488888), (0.74999994, -4.371139e-8, 1.2990382), (1.0606601, -4.371139e-8, 1.0606601), (1.299038, -4.371139e-8, 0.75), (1.4488888, -4.371139e-8, 0.38822857), (1.4330126, -0.2500001, -0.0000011160714), (1.3841836, -0.2500001, -0.370892), (1.2410249, -0.2500001, -0.71650714), (1.0132923, -0.2500001, -1.0132936), (0.7165056, -0.2500001, -1.2410257), (0.37089023, -0.2500001, -1.384184), (-6.6622516e-7, -0.2500001, -1.4330126), (-0.3708915, -0.2500001, -1.3841836), (-0.7165067, -0.2500001, -1.2410251), (-1.0132935, -0.2500001, -1.0132924), (-1.2410257, -0.2500001, -0.7165057), (-1.384184, -0.2500001, -0.37089035), (-1.4330126, -0.2500001, 5.580357e-7), (-1.3841838, -0.2500001, 0.37089142), (-1.2410251, -0.2500001, 0.71650666), (-1.0132927, -0.2500001, 1.0132931), (-0.71650606, -0.2500001, 1.2410254), (-0.37089077, -0.2500001, 1.384184), (1.0818945e-7, -0.2500001, 1.4330126), (0.370891, -0.2500001, 1.3841839), (0.71650624, -0.2500001, 1.2410253), (1.0132929, -0.2500001, 1.0132929), (1.2410253, -0.2500001, 0.7165063), (1.3841839, -0.2500001, 0.37089095), (1.25, -0.43301272, -9.735359e-7), (1.207407, -0.43301272, -0.3235247), (1.0825313, -0.43301272, -0.6250007), (0.88388294, -0.43301272, -0.8838841), (0.62499934, -0.43301272, -1.0825322), (0.32352316, -0.43301272, -1.2074075), (-5.8114034e-7, -0.43301272, -1.25), (-0.3235243, -0.43301272, -1.2074071), (-0.62500036, -0.43301272, -1.0825315), (-0.88388395, -0.43301272, -0.883883), (-1.082532, -0.43301272, -0.62499946), (-1.2074075, -0.43301272, -0.32352328), (-1.25, -0.43301272, 4.8676793e-7), (-1.2074072, -0.43301272, 0.3235242), (-1.0825316, -0.43301272, 0.6250003), (-0.88388324, -0.43301272, 0.8838837), (-0.6249998, -0.43301272, 1.0825319), (-0.32352364, -0.43301272, 1.2074074), (9.4372375e-8, -0.43301272, 1.25), (0.32352385, -0.43301272, 1.2074072), (0.62499994, -0.43301272, 1.0825318), (0.8838835, -0.43301272, 0.8838835), (1.0825317, -0.43301272, 0.625), (1.2074072, -0.43301272, 0.32352382), (1, -0.5, -7.7882873e-7), (0.96592563, -0.5, -0.25881976), (0.8660251, -0.5, -0.5000006), (0.70710635, -0.5, -0.70710725), (0.4999995, -0.5, -0.8660257), (0.25881854, -0.5, -0.96592593), (-4.649123e-7, -0.5, -1), (-0.25881943, -0.5, -0.9659257), (-0.5000003, -0.5, -0.8660252), (-0.7071072, -0.5, -0.7071064), (-0.8660256, -0.5, -0.49999958), (-0.96592593, -0.5, -0.25881863), (-1, -0.5, 3.8941437e-7), (-0.96592575, -0.5, 0.25881937), (-0.86602527, -0.5, 0.50000024), (-0.7071066, -0.5, 0.70710695), (-0.49999985, -0.5, 0.8660255), (-0.25881892, -0.5, 0.9659259), (7.54979e-8, -0.5, 1), (0.25881907, -0.5, 0.9659258), (0.49999997, -0.5, 0.86602545), (0.70710677, -0.5, 0.70710677), (0.8660254, -0.5, 0.5), (0.9659258, -0.5, 0.25881904), (0.75000006, -0.43301272, -5.841216e-7), (0.72444427, -0.43301272, -0.19411483), (0.64951885, -0.43301272, -0.37500048), (0.5303298, -0.43301272, -0.5303305), (0.37499964, -0.43301272, -0.6495193), (0.19411393, -0.43301272, -0.7244445), (-3.4868424e-7, -0.43301272, -0.75000006), (-0.1941146, -0.43301272, -0.7244443), (-0.37500027, -0.43301272, -0.64951897), (-0.5303304, -0.43301272, -0.5303298), (-0.64951926, -0.43301272, -0.3749997), (-0.7244445, -0.43301272, -0.19411398), (-0.75000006, -0.43301272, 2.920608e-7), (-0.7244444, -0.43301272, 0.19411455), (-0.649519, -0.43301272, 0.3750002), (-0.53033, -0.43301272, 0.53033024), (-0.3749999, -0.43301272, 0.6495192), (-0.19411421, -0.43301272, 0.72444445), (5.662343e-8, -0.43301272, 0.75000006), (0.19411433, -0.43301272, 0.7244444), (0.375, -0.43301272, 0.64951915), (0.5303301, -0.43301272, 0.5303301), (0.6495191, -0.43301272, 0.37500003), (0.7244444, -0.43301272, 0.1941143), (0.56698734, -0.2500001, -4.4158602e-7), (0.5476676, -0.2500001, -0.14674753), (0.49102527, -0.2500001, -0.283494), (0.40092036, -0.2500001, -0.40092087), (0.28349337, -0.2500001, -0.4910256), (0.14674683, -0.2500001, -0.54766774), (-2.635994e-7, -0.2500001, -0.56698734), (-0.14674734, -0.2500001, -0.5476676), (-0.28349385, -0.2500001, -0.49102533), (-0.4009208, -0.2500001, -0.4009204), (-0.49102557, -0.2500001, -0.28349343), (-0.54766774, -0.2500001, -0.14674689), (-0.56698734, -0.2500001, 2.2079301e-7), (-0.5476677, -0.2500001, 0.1467473), (-0.49102536, -0.2500001, 0.28349382), (-0.40092048, -0.2500001, 0.4009207), (-0.28349358, -0.2500001, 0.4910255), (-0.14674705, -0.2500001, 0.54766774), (4.2806352e-8, -0.2500001, 0.56698734), (0.14674714, -0.2500001, 0.5476677), (0.28349364, -0.2500001, 0.49102545), (0.40092057, -0.2500001, 0.40092057), (0.49102542, -0.2500001, 0.28349367), (0.5476677, -0.2500001, 0.14674713), (0.5, -1.509958e-7, -3.8941437e-7), (0.48296282, -1.509958e-7, -0.12940988), (0.43301255, -1.509958e-7, -0.2500003), (0.35355318, -1.509958e-7, -0.35355362), (0.24999975, -1.509958e-7, -0.43301284), (0.12940927, -1.509958e-7, -0.48296297), (-2.3245614e-7, -1.509958e-7, -0.5), (-0.12940972, -1.509958e-7, -0.48296285), (-0.25000015, -1.509958e-7, -0.4330126), (-0.3535536, -1.509958e-7, -0.3535532), (-0.4330128, -1.509958e-7, -0.24999979), (-0.48296297, -1.509958e-7, -0.12940931), (-0.5, -1.509958e-7, 1.9470718e-7), (-0.48296288, -1.509958e-7, 0.12940969), (-0.43301263, -1.509958e-7, 0.25000012), (-0.3535533, -1.509958e-7, 0.35355347), (-0.24999993, -1.509958e-7, 0.43301275), (-0.12940946, -1.509958e-7, 0.48296294), (3.774895e-8, -1.509958e-7, 0.5), (0.12940954, -1.509958e-7, 0.4829629), (0.24999999, -1.509958e-7, 0.43301272), (0.35355338, -1.509958e-7, 0.35355338), (0.4330127, -1.509958e-7, 0.25), (0.4829629, -1.509958e-7, 0.12940952), (0.56698716, 0.24999982, -4.4158588e-7), (0.54766744, 0.24999982, -0.14674748), (0.4910251, 0.24999982, -0.2834939), (0.4009202, 0.24999982, -0.40092072), (0.28349328, 0.24999982, -0.49102545), (0.14674678, 0.24999982, -0.5476676), (-2.635993e-7, 0.24999982, -0.56698716), (-0.14674729, 0.24999982, -0.54766744), (-0.28349376, 0.24999982, -0.49102518), (-0.4009207, 0.24999982, -0.40092024), (-0.49102542, 0.24999982, -0.28349334), (-0.5476676, 0.24999982, -0.14674684), (-0.56698716, 0.24999982, 2.2079294e-7), (-0.5476675, 0.24999982, 0.14674726), (-0.4910252, 0.24999982, 0.28349373), (-0.40092036, 0.24999982, 0.40092057), (-0.2834935, 0.24999982, 0.49102533), (-0.14674701, 0.24999982, 0.54766756), (4.280634e-8, 0.24999982, 0.56698716), (0.1467471, 0.24999982, 0.5476675), (0.28349355, 0.24999982, 0.4910253), (0.40092045, 0.24999982, 0.40092045), (0.49102527, 0.24999982, 0.28349358), (0.5476675, 0.24999982, 0.14674707), (0.74999976, 0.43301257, -5.841214e-7), (0.724444, 0.43301257, -0.19411476), (0.6495186, 0.43301257, -0.37500033), (0.5303296, 0.43301257, -0.53033024), (0.3749995, 0.43301257, -0.6495191), (0.19411384, 0.43301257, -0.7244442), (-3.486841e-7, 0.43301257, -0.74999976), (-0.1941145, 0.43301257, -0.72444403), (-0.3750001, 0.43301257, -0.6495187), (-0.53033024, 0.43301257, -0.53032964), (-0.649519, 0.43301257, -0.37499958), (-0.7244442, 0.43301257, -0.19411391), (-0.74999976, 0.43301257, 2.920607e-7), (-0.7244441, 0.43301257, 0.19411446), (-0.6495187, 0.43301257, 0.37500006), (-0.53032976, 0.43301257, 0.53033006), (-0.37499976, 0.43301257, 0.6495189), (-0.19411413, 0.43301257, 0.72444415), (5.6623406e-8, 0.43301257, 0.74999976), (0.19411424, 0.43301257, 0.72444415), (0.37499985, 0.43301257, 0.6495189), (0.5303299, 0.43301257, 0.5303299), (0.64951885, 0.43301257, 0.37499988), (0.72444415, 0.43301257, 0.19411422), (0.9999997, 0.5, -7.788285e-7), (0.96592534, 0.5, -0.25881967), (0.86602485, 0.5, -0.5000004), (0.7071061, 0.5, -0.707107), (0.49999934, 0.5, -0.86602545), (0.25881845, 0.5, -0.96592563), (-4.6491215e-7, 0.5, -0.9999997), (-0.25881934, 0.5, -0.9659254), (-0.5000001, 0.5, -0.866025), (-0.70710695, 0.5, -0.7071062), (-0.8660254, 0.5, -0.49999943), (-0.96592563, 0.5, -0.25881854), (-0.9999997, 0.5, 3.8941425e-7), (-0.96592546, 0.5, 0.25881928), (-0.86602503, 0.5, 0.50000006), (-0.70710635, 0.5, 0.7071067), (-0.4999997, 0.5, 0.86602527), (-0.25881884, 0.5, 0.9659256), (7.549788e-8, 0.5, 0.9999997), (0.25881898, 0.5, 0.9659255), (0.49999982, 0.5, 0.8660252), (0.70710653, 0.5, 0.70710653), (0.86602515, 0.5, 0.49999985), (0.9659255, 0.5, 0.25881895), (1.2499996, 0.43301287, -9.735356e-7), (1.2074066, 0.43301287, -0.3235246), (1.0825311, 0.43301287, -0.62500054), (0.8838827, 0.43301287, -0.88388383), (0.62499917, 0.43301287, -1.0825318), (0.32352307, 0.43301287, -1.2074071), (-5.8114017e-7, 0.43301287, -1.2499996), (-0.3235242, 0.43301287, -1.2074068), (-0.6250002, 0.43301287, -1.0825312), (-0.8838837, 0.43301287, -0.88388276), (-1.0825317, 0.43301287, -0.6249993), (-1.2074071, 0.43301287, -0.3235232), (-1.2499996, 0.43301287, 4.867678e-7), (-1.2074069, 0.43301287, 0.32352412), (-1.0825313, 0.43301287, 0.6250001), (-0.883883, 0.43301287, 0.8838834), (-0.62499964, 0.43301287, 1.0825316), (-0.32352355, 0.43301287, 1.207407), (9.4372346e-8, 0.43301287, 1.2499996), (0.32352376, 0.43301287, 1.2074069), (0.62499976, 0.43301287, 1.0825315), (0.88388324, 0.43301287, 0.88388324), (1.0825315, 0.43301287, 0.6249998), (1.2074069, 0.43301287, 0.3235237), (1.4330125, 0.25000036, -0.0000011160713), (1.3841835, 0.25000036, -0.37089196), (1.2410247, 0.25000036, -0.7165071), (1.0132922, 0.25000036, -1.0132935), (0.7165055, 0.25000036, -1.2410256), (0.3708902, 0.25000036, -1.3841839), (-6.662251e-7, 0.25000036, -1.4330125), (-0.37089148, 0.25000036, -1.3841835), (-0.71650666, 0.25000036, -1.241025), (-1.0132934, 0.25000036, -1.0132923), (-1.2410256, 0.25000036, -0.71650565), (-1.3841839, 0.25000036, -0.37089032), (-1.4330125, 0.25000036, 5.5803565e-7), (-1.3841836, 0.25000036, 0.3708914), (-1.241025, 0.25000036, 0.7165066), (-1.0132926, 0.25000036, 1.013293), (-0.716506, 0.25000036, 1.2410253), (-0.37089074, 0.25000036, 1.3841839), (1.0818943e-7, 0.25000036, 1.4330125), (0.37089097, 0.25000036, 1.3841838), (0.7165062, 0.25000036, 1.2410253), (1.0132928, 0.25000036, 1.0132928), (1.2410252, 0.25000036, 0.71650624), (1.3841838, 0.25000036, 0.37089092)] (
                    interpolation = "vertex"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Scope "materials"
        {
            def Material "arnold_materialbuilder1"
            {
                token outputs:arnold:surface.connect = </instances_rbg/Prototypes/materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

                def Shader "standard_surface1"
                {
                    uniform token info:id = "arnold:standard_surface"
                    string inputs:aov_id1 = ""
                    string inputs:aov_id2 = ""
                    string inputs:aov_id3 = ""
                    string inputs:aov_id4 = ""
                    string inputs:aov_id5 = ""
                    string inputs:aov_id6 = ""
                    string inputs:aov_id7 = ""
                    string inputs:aov_id8 = ""
                    float inputs:base = 0.8
                    color3f inputs:base_color = (0.493, 0.799, 1)
                    color3f inputs:base_color.connect = </instances_rbg/Prototypes/materials/arnold_materialbuilder1/user_data_rgb1.outputs:rgb>
                    int inputs:caustics = 0
                    float inputs:coat = 0
                    float inputs:coat_affect_color = 0
                    float inputs:coat_affect_roughness = 0
                    float inputs:coat_anisotropy = 0
                    color3f inputs:coat_color = (1, 1, 1)
                    float inputs:coat_IOR = 1.5
                    vector3f inputs:coat_normal = (0, 0, 0)
                    float inputs:coat_rotation = 0
                    float inputs:coat_roughness = 0.1
                    int inputs:dielectric_priority = 0
                    float inputs:diffuse_roughness = 0
                    float inputs:emission = 0
                    color3f inputs:emission_color = (1, 1, 1)
                    int inputs:exit_to_background = 0
                    color3f inputs:id1 = (0, 0, 0)
                    color3f inputs:id2 = (0, 0, 0)
                    color3f inputs:id3 = (0, 0, 0)
                    color3f inputs:id4 = (0, 0, 0)
                    color3f inputs:id5 = (0, 0, 0)
                    color3f inputs:id6 = (0, 0, 0)
                    color3f inputs:id7 = (0, 0, 0)
                    color3f inputs:id8 = (0, 0, 0)
                    float inputs:indirect_diffuse = 1
                    float inputs:indirect_specular = 1
                    int inputs:internal_reflections = 1
                    float inputs:metalness = 0
                    vector3f inputs:normal = (0, 0, 0)
                    color3f inputs:opacity = (1, 1, 1)
                    float inputs:sheen = 0
                    color3f inputs:sheen_color = (1, 1, 1)
                    float inputs:sheen_roughness = 0.3
                    float inputs:specular = 1
                    float inputs:specular_anisotropy = 0
                    color3f inputs:specular_color = (1, 1, 1)
                    float inputs:specular_IOR = 1.5
                    float inputs:specular_rotation = 0
                    float inputs:specular_roughness = 0.2
                    float inputs:subsurface = 0
                    float inputs:subsurface_anisotropy = 0
                    color3f inputs:subsurface_color = (1, 1, 1)
                    color3f inputs:subsurface_radius = (1, 1, 1)
                    float inputs:subsurface_scale = 1
                    token inputs:subsurface_type = "randomwalk"
                    vector3f inputs:tangent = (0, 0, 0)
                    float inputs:thin_film_IOR = 1.5
                    float inputs:thin_film_thickness = 0
                    int inputs:thin_walled = 0
                    float inputs:transmission = 0
                    color3f inputs:transmission_color = (1, 1, 1)
                    float inputs:transmission_depth = 0
                    float inputs:transmission_dispersion = 0
                    float inputs:transmission_extra_roughness = 0
                    color3f inputs:transmission_scatter = (0, 0, 0)
                    float inputs:transmission_scatter_anisotropy = 0
                    int inputs:transmit_aovs = 0
                    token outputs:shader
                }

                def Shader "user_data_rgb1"
                {
                    uniform token info:id = "arnold:user_data_rgb"
                    string inputs:attribute = "mycolor"
                    color3f inputs:default = (0, 0, 0)
                    vector3f outputs:rgb
                }
            }
        }
    }
}

def PointInstancer "instances_float32"
{
    int64[] invisibleIds = []
    quath[] orientations = [(0, 0, 1, 0), (-0.273193, 0.961914, 0, 0), (0.273193, -0.297363, 0.915039, 0), (0.525879, -0.850586, 0, 0), (-0.487061, 0.706543, -0.513184, 0), (0.525879, -0.262939, 0.809082, 0), (0.273193, 0.77832, 0.56543, 0), (0.487061, 0.27002, 0.830566, 0), (0.525879, 0.687988, 0.5, 0), (0.273193, 0.77832, -0.56543, 0), (0.487061, 0.873535, 0, 0), (0.525879, 0.687988, -0.5, 0), (-0.273193, 0.297363, 0.915039, 0), (-0.487061, -0.27002, 0.830566, 0), (0.525879, -0.262939, -0.809082, 0), (-0.487061, 0.706543, 0.513184, 0), (0.707031, -0.672363, -0.218506, 0), (0.707031, -0.415527, -0.572266, 0), (0.850586, -0.425293, -0.309082, 0), (0.707031, 0, -0.707031, 0), (0.707031, 0.415527, -0.572266, 0), (0.850586, 0.162476, -0.5, 0), (0.707031, 0.672363, -0.218506, 0), (0.707031, 0.672363, 0.218506, 0), (0.850586, 0.525879, 0, 0), (0.707031, 0.415527, 0.572266, 0), (0.707031, 0, 0.707031, 0), (0.850586, 0.162476, 0.5, 0), (0.707031, -0.415527, 0.572266, 0), (0.707031, -0.672363, 0.218506, 0), (0.850586, -0.425293, 0.309082, 0), (0.873535, -0.487061, 0, 0), (0.873535, -0.150513, -0.463135, 0), (0.873535, 0.394043, -0.286133, 0), (0.873535, 0.394043, 0.286133, 0), (0.873535, -0.150513, 0.463135, 0), (1, 0, 0, 0), (0.961914, -0.221069, 0.160645, 0), (0.961914, -0.221069, -0.160645, 0), (0.961914, 0.0844727, 0.26001, 0), (0.961914, 0.273193, 0, 0), (0.961914, 0.0844727, -0.26001, 0)]
    point3f[] positions = [(0, 0, -1), (0, 0.5257312, -0.8506508), (0.49999997, 0.1624601, -0.8506508), (0, 0.89442736, -0.44721314), (0.49999997, 0.68819135, -0.5257306), (0.85065085, 0.27639368, -0.4472132), (0.309017, -0.42532542, -0.85065085), (0.80901724, -0.2628654, -0.5257308), (0.5257312, -0.72360694, -0.44721326), (-0.309017, -0.42532542, -0.85065085), (0, -0.850651, -0.5257307), (-0.5257312, -0.72360694, -0.44721326), (-0.49999997, 0.1624601, -0.8506508), (-0.80901724, -0.2628654, -0.5257308), (-0.85065085, 0.27639368, -0.4472132), (-0.49999997, 0.68819135, -0.5257306), (-0.30901697, 0.9510566, 0), (-0.8090168, 0.5877854, 0), (-0.5257312, 0.72360694, 0.44721326), (-1, 0, 0), (-0.8090168, -0.5877854, 0), (-0.85065085, -0.27639368, 0.4472132), (-0.30901697, -0.9510566, 0), (0.30901697, -0.9510566, 0), (0, -0.89442736, 0.44721314), (0.8090168, -0.5877854, 0), (1, 0, 0), (0.85065085, -0.27639368, 0.4472132), (0.8090168, 0.5877854, 0), (0.30901697, 0.9510566, 0), (0.5257312, 0.72360694, 0.44721326), (0, 0.850651, 0.5257307), (-0.80901724, 0.2628654, 0.5257308), (-0.49999997, -0.68819135, 0.5257306), (0.49999997, -0.68819135, 0.5257306), (0.80901724, 0.2628654, 0.5257308), (0, 0, 1), (0.309017, 0.42532542, 0.85065085), (-0.309017, 0.42532542, 0.85065085), (0.49999997, -0.1624601, 0.8506508), (0, -0.5257312, 0.8506508), (-0.49999997, -0.1624601, 0.8506508)]
    float[] primvars:myfloat (
        interpolation = "varying"
    )
    float[] primvars:myfloat.timeSamples = {
        1: [0.9582039, 0.7727308, 0.46929908, 0.6583303, 0.89987314, 0.17178833, 0.26358795, 0.8879849, 0.01825583, 0.7850044, 0.6721076, 0.09140968, 0.94789493, 0.7328118, 0.48378193, 0.5246879, 0.28825068, 0.98389125, 0.8634243, 0.002426505, 0.5140139, 0.43425107, 0.4673605, 0.40474534, 0.74608994, 0.179497, 0.027473927, 0.6077249, 0.54621065, 0.41257632, 0.97525024, 0.93635607, 0.4246949, 0.72551084, 0.17928433, 0.9023677, 0.7364843, 0.010159135, 0.11265361, 0.6870955, 0.4114622, 0.092295766],
    }
    int[] protoIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    rel prototypes = </instances_float32/Prototypes/torus1>

    def Scope "Prototypes"
    {
        def Xform "torus1" (
            kind = "component"
        )
        {
            rel material:binding = </instances_float32/Prototypes/materials/arnold_materialbuilder1>
            matrix4d xformOp:transform:xform = ( (0.19, 0, 0, 0), (0, 0, 0.19, 0), (0, -0.19, 0, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform:xform"]

            def Mesh "mesh_0"
            {
                float3[] extent = [(-1.5, -0.5, -1.5), (1.5, 0.5, 1.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 25, 24, 1, 2, 26, 25, 2, 3, 27, 26, 3, 4, 28, 27, 4, 5, 29, 28, 5, 6, 30, 29, 6, 7, 31, 30, 7, 8, 32, 31, 8, 9, 33, 32, 9, 10, 34, 33, 10, 11, 35, 34, 11, 12, 36, 35, 12, 13, 37, 36, 13, 14, 38, 37, 14, 15, 39, 38, 15, 16, 40, 39, 16, 17, 41, 40, 17, 18, 42, 41, 18, 19, 43, 42, 19, 20, 44, 43, 20, 21, 45, 44, 21, 22, 46, 45, 22, 23, 47, 46, 23, 0, 24, 47, 24, 25, 49, 48, 25, 26, 50, 49, 26, 27, 51, 50, 27, 28, 52, 51, 28, 29, 53, 52, 29, 30, 54, 53, 30, 31, 55, 54, 31, 32, 56, 55, 32, 33, 57, 56, 33, 34, 58, 57, 34, 35, 59, 58, 35, 36, 60, 59, 36, 37, 61, 60, 37, 38, 62, 61, 38, 39, 63, 62, 39, 40, 64, 63, 40, 41, 65, 64, 41, 42, 66, 65, 42, 43, 67, 66, 43, 44, 68, 67, 44, 45, 69, 68, 45, 46, 70, 69, 46, 47, 71, 70, 47, 24, 48, 71, 48, 49, 73, 72, 49, 50, 74, 73, 50, 51, 75, 74, 51, 52, 76, 75, 52, 53, 77, 76, 53, 54, 78, 77, 54, 55, 79, 78, 55, 56, 80, 79, 56, 57, 81, 80, 57, 58, 82, 81, 58, 59, 83, 82, 59, 60, 84, 83, 60, 61, 85, 84, 61, 62, 86, 85, 62, 63, 87, 86, 63, 64, 88, 87, 64, 65, 89, 88, 65, 66, 90, 89, 66, 67, 91, 90, 67, 68, 92, 91, 68, 69, 93, 92, 69, 70, 94, 93, 70, 71, 95, 94, 71, 48, 72, 95, 72, 73, 97, 96, 73, 74, 98, 97, 74, 75, 99, 98, 75, 76, 100, 99, 76, 77, 101, 100, 77, 78, 102, 101, 78, 79, 103, 102, 79, 80, 104, 103, 80, 81, 105, 104, 81, 82, 106, 105, 82, 83, 107, 106, 83, 84, 108, 107, 84, 85, 109, 108, 85, 86, 110, 109, 86, 87, 111, 110, 87, 88, 112, 111, 88, 89, 113, 112, 89, 90, 114, 113, 90, 91, 115, 114, 91, 92, 116, 115, 92, 93, 117, 116, 93, 94, 118, 117, 94, 95, 119, 118, 95, 72, 96, 119, 96, 97, 121, 120, 97, 98, 122, 121, 98, 99, 123, 122, 99, 100, 124, 123, 100, 101, 125, 124, 101, 102, 126, 125, 102, 103, 127, 126, 103, 104, 128, 127, 104, 105, 129, 128, 105, 106, 130, 129, 106, 107, 131, 130, 107, 108, 132, 131, 108, 109, 133, 132, 109, 110, 134, 133, 110, 111, 135, 134, 111, 112, 136, 135, 112, 113, 137, 136, 113, 114, 138, 137, 114, 115, 139, 138, 115, 116, 140, 139, 116, 117, 141, 140, 117, 118, 142, 141, 118, 119, 143, 142, 119, 96, 120, 143, 120, 121, 145, 144, 121, 122, 146, 145, 122, 123, 147, 146, 123, 124, 148, 147, 124, 125, 149, 148, 125, 126, 150, 149, 126, 127, 151, 150, 127, 128, 152, 151, 128, 129, 153, 152, 129, 130, 154, 153, 130, 131, 155, 154, 131, 132, 156, 155, 132, 133, 157, 156, 133, 134, 158, 157, 134, 135, 159, 158, 135, 136, 160, 159, 136, 137, 161, 160, 137, 138, 162, 161, 138, 139, 163, 162, 139, 140, 164, 163, 140, 141, 165, 164, 141, 142, 166, 165, 142, 143, 167, 166, 143, 120, 144, 167, 144, 145, 169, 168, 145, 146, 170, 169, 146, 147, 171, 170, 147, 148, 172, 171, 148, 149, 173, 172, 149, 150, 174, 173, 150, 151, 175, 174, 151, 152, 176, 175, 152, 153, 177, 176, 153, 154, 178, 177, 154, 155, 179, 178, 155, 156, 180, 179, 156, 157, 181, 180, 157, 158, 182, 181, 158, 159, 183, 182, 159, 160, 184, 183, 160, 161, 185, 184, 161, 162, 186, 185, 162, 163, 187, 186, 163, 164, 188, 187, 164, 165, 189, 188, 165, 166, 190, 189, 166, 167, 191, 190, 167, 144, 168, 191, 168, 169, 193, 192, 169, 170, 194, 193, 170, 171, 195, 194, 171, 172, 196, 195, 172, 173, 197, 196, 173, 174, 198, 197, 174, 175, 199, 198, 175, 176, 200, 199, 176, 177, 201, 200, 177, 178, 202, 201, 178, 179, 203, 202, 179, 180, 204, 203, 180, 181, 205, 204, 181, 182, 206, 205, 182, 183, 207, 206, 183, 184, 208, 207, 184, 185, 209, 208, 185, 186, 210, 209, 186, 187, 211, 210, 187, 188, 212, 211, 188, 189, 213, 212, 189, 190, 214, 213, 190, 191, 215, 214, 191, 168, 192, 215, 192, 193, 217, 216, 193, 194, 218, 217, 194, 195, 219, 218, 195, 196, 220, 219, 196, 197, 221, 220, 197, 198, 222, 221, 198, 199, 223, 222, 199, 200, 224, 223, 200, 201, 225, 224, 201, 202, 226, 225, 202, 203, 227, 226, 203, 204, 228, 227, 204, 205, 229, 228, 205, 206, 230, 229, 206, 207, 231, 230, 207, 208, 232, 231, 208, 209, 233, 232, 209, 210, 234, 233, 210, 211, 235, 234, 211, 212, 236, 235, 212, 213, 237, 236, 213, 214, 238, 237, 214, 215, 239, 238, 215, 192, 216, 239, 216, 217, 241, 240, 217, 218, 242, 241, 218, 219, 243, 242, 219, 220, 244, 243, 220, 221, 245, 244, 221, 222, 246, 245, 222, 223, 247, 246, 223, 224, 248, 247, 224, 225, 249, 248, 225, 226, 250, 249, 226, 227, 251, 250, 227, 228, 252, 251, 228, 229, 253, 252, 229, 230, 254, 253, 230, 231, 255, 254, 231, 232, 256, 255, 232, 233, 257, 256, 233, 234, 258, 257, 234, 235, 259, 258, 235, 236, 260, 259, 236, 237, 261, 260, 237, 238, 262, 261, 238, 239, 263, 262, 239, 216, 240, 263, 240, 241, 265, 264, 241, 242, 266, 265, 242, 243, 267, 266, 243, 244, 268, 267, 244, 245, 269, 268, 245, 246, 270, 269, 246, 247, 271, 270, 247, 248, 272, 271, 248, 249, 273, 272, 249, 250, 274, 273, 250, 251, 275, 274, 251, 252, 276, 275, 252, 253, 277, 276, 253, 254, 278, 277, 254, 255, 279, 278, 255, 256, 280, 279, 256, 257, 281, 280, 257, 258, 282, 281, 258, 259, 283, 282, 259, 260, 284, 283, 260, 261, 285, 284, 261, 262, 286, 285, 262, 263, 287, 286, 263, 240, 264, 287, 264, 265, 1, 0, 265, 266, 2, 1, 266, 267, 3, 2, 267, 268, 4, 3, 268, 269, 5, 4, 269, 270, 6, 5, 270, 271, 7, 6, 271, 272, 8, 7, 272, 273, 9, 8, 273, 274, 10, 9, 274, 275, 11, 10, 275, 276, 12, 11, 276, 277, 13, 12, 277, 278, 14, 13, 278, 279, 15, 14, 279, 280, 16, 15, 280, 281, 17, 16, 281, 282, 18, 17, 282, 283, 19, 18, 283, 284, 20, 19, 284, 285, 21, 20, 285, 286, 22, 21, 286, 287, 23, 22, 287, 264, 0, 23]
                uniform token orientation = "leftHanded"
                point3f[] points = [(1.5, -4.371139e-8, -0.0000011682431), (1.4488884, -4.371139e-8, -0.38822964), (1.2990377, -4.371139e-8, -0.7500009), (1.0606595, -4.371139e-8, -1.0606608), (0.7499992, -4.371139e-8, -1.2990385), (0.38822782, -4.371139e-8, -1.4488889), (-6.973684e-7, -4.371139e-8, -1.5), (-0.38822913, -4.371139e-8, -1.4488885), (-0.7500005, -4.371139e-8, -1.2990378), (-1.0606608, -4.371139e-8, -1.0606596), (-1.2990384, -4.371139e-8, -0.7499994), (-1.4488889, -4.371139e-8, -0.38822794), (-1.5, -4.371139e-8, 5.8412155e-7), (-1.4488887, -4.371139e-8, 0.38822907), (-1.2990379, -4.371139e-8, 0.75000036), (-1.0606599, -4.371139e-8, 1.0606604), (-0.74999976, -4.371139e-8, 1.2990383), (-0.3882284, -4.371139e-8, 1.4488888), (1.13246855e-7, -4.371139e-8, 1.5), (0.3882286, -4.371139e-8, 1.4488888), (0.74999994, -4.371139e-8, 1.2990382), (1.0606601, -4.371139e-8, 1.0606601), (1.299038, -4.371139e-8, 0.75), (1.4488888, -4.371139e-8, 0.38822857), (1.4330126, -0.2500001, -0.0000011160714), (1.3841836, -0.2500001, -0.370892), (1.2410249, -0.2500001, -0.71650714), (1.0132923, -0.2500001, -1.0132936), (0.7165056, -0.2500001, -1.2410257), (0.37089023, -0.2500001, -1.384184), (-6.6622516e-7, -0.2500001, -1.4330126), (-0.3708915, -0.2500001, -1.3841836), (-0.7165067, -0.2500001, -1.2410251), (-1.0132935, -0.2500001, -1.0132924), (-1.2410257, -0.2500001, -0.7165057), (-1.384184, -0.2500001, -0.37089035), (-1.4330126, -0.2500001, 5.580357e-7), (-1.3841838, -0.2500001, 0.37089142), (-1.2410251, -0.2500001, 0.71650666), (-1.0132927, -0.2500001, 1.0132931), (-0.71650606, -0.2500001, 1.2410254), (-0.37089077, -0.2500001, 1.384184), (1.0818945e-7, -0.2500001, 1.4330126), (0.370891, -0.2500001, 1.3841839), (0.71650624, -0.2500001, 1.2410253), (1.0132929, -0.2500001, 1.0132929), (1.2410253, -0.2500001, 0.7165063), (1.3841839, -0.2500001, 0.37089095), (1.25, -0.43301272, -9.735359e-7), (1.207407, -0.43301272, -0.3235247), (1.0825313, -0.43301272, -0.6250007), (0.88388294, -0.43301272, -0.8838841), (0.62499934, -0.43301272, -1.0825322), (0.32352316, -0.43301272, -1.2074075), (-5.8114034e-7, -0.43301272, -1.25), (-0.3235243, -0.43301272, -1.2074071), (-0.62500036, -0.43301272, -1.0825315), (-0.88388395, -0.43301272, -0.883883), (-1.082532, -0.43301272, -0.62499946), (-1.2074075, -0.43301272, -0.32352328), (-1.25, -0.43301272, 4.8676793e-7), (-1.2074072, -0.43301272, 0.3235242), (-1.0825316, -0.43301272, 0.6250003), (-0.88388324, -0.43301272, 0.8838837), (-0.6249998, -0.43301272, 1.0825319), (-0.32352364, -0.43301272, 1.2074074), (9.4372375e-8, -0.43301272, 1.25), (0.32352385, -0.43301272, 1.2074072), (0.62499994, -0.43301272, 1.0825318), (0.8838835, -0.43301272, 0.8838835), (1.0825317, -0.43301272, 0.625), (1.2074072, -0.43301272, 0.32352382), (1, -0.5, -7.7882873e-7), (0.96592563, -0.5, -0.25881976), (0.8660251, -0.5, -0.5000006), (0.70710635, -0.5, -0.70710725), (0.4999995, -0.5, -0.8660257), (0.25881854, -0.5, -0.96592593), (-4.649123e-7, -0.5, -1), (-0.25881943, -0.5, -0.9659257), (-0.5000003, -0.5, -0.8660252), (-0.7071072, -0.5, -0.7071064), (-0.8660256, -0.5, -0.49999958), (-0.96592593, -0.5, -0.25881863), (-1, -0.5, 3.8941437e-7), (-0.96592575, -0.5, 0.25881937), (-0.86602527, -0.5, 0.50000024), (-0.7071066, -0.5, 0.70710695), (-0.49999985, -0.5, 0.8660255), (-0.25881892, -0.5, 0.9659259), (7.54979e-8, -0.5, 1), (0.25881907, -0.5, 0.9659258), (0.49999997, -0.5, 0.86602545), (0.70710677, -0.5, 0.70710677), (0.8660254, -0.5, 0.5), (0.9659258, -0.5, 0.25881904), (0.75000006, -0.43301272, -5.841216e-7), (0.72444427, -0.43301272, -0.19411483), (0.64951885, -0.43301272, -0.37500048), (0.5303298, -0.43301272, -0.5303305), (0.37499964, -0.43301272, -0.6495193), (0.19411393, -0.43301272, -0.7244445), (-3.4868424e-7, -0.43301272, -0.75000006), (-0.1941146, -0.43301272, -0.7244443), (-0.37500027, -0.43301272, -0.64951897), (-0.5303304, -0.43301272, -0.5303298), (-0.64951926, -0.43301272, -0.3749997), (-0.7244445, -0.43301272, -0.19411398), (-0.75000006, -0.43301272, 2.920608e-7), (-0.7244444, -0.43301272, 0.19411455), (-0.649519, -0.43301272, 0.3750002), (-0.53033, -0.43301272, 0.53033024), (-0.3749999, -0.43301272, 0.6495192), (-0.19411421, -0.43301272, 0.72444445), (5.662343e-8, -0.43301272, 0.75000006), (0.19411433, -0.43301272, 0.7244444), (0.375, -0.43301272, 0.64951915), (0.5303301, -0.43301272, 0.5303301), (0.6495191, -0.43301272, 0.37500003), (0.7244444, -0.43301272, 0.1941143), (0.56698734, -0.2500001, -4.4158602e-7), (0.5476676, -0.2500001, -0.14674753), (0.49102527, -0.2500001, -0.283494), (0.40092036, -0.2500001, -0.40092087), (0.28349337, -0.2500001, -0.4910256), (0.14674683, -0.2500001, -0.54766774), (-2.635994e-7, -0.2500001, -0.56698734), (-0.14674734, -0.2500001, -0.5476676), (-0.28349385, -0.2500001, -0.49102533), (-0.4009208, -0.2500001, -0.4009204), (-0.49102557, -0.2500001, -0.28349343), (-0.54766774, -0.2500001, -0.14674689), (-0.56698734, -0.2500001, 2.2079301e-7), (-0.5476677, -0.2500001, 0.1467473), (-0.49102536, -0.2500001, 0.28349382), (-0.40092048, -0.2500001, 0.4009207), (-0.28349358, -0.2500001, 0.4910255), (-0.14674705, -0.2500001, 0.54766774), (4.2806352e-8, -0.2500001, 0.56698734), (0.14674714, -0.2500001, 0.5476677), (0.28349364, -0.2500001, 0.49102545), (0.40092057, -0.2500001, 0.40092057), (0.49102542, -0.2500001, 0.28349367), (0.5476677, -0.2500001, 0.14674713), (0.5, -1.509958e-7, -3.8941437e-7), (0.48296282, -1.509958e-7, -0.12940988), (0.43301255, -1.509958e-7, -0.2500003), (0.35355318, -1.509958e-7, -0.35355362), (0.24999975, -1.509958e-7, -0.43301284), (0.12940927, -1.509958e-7, -0.48296297), (-2.3245614e-7, -1.509958e-7, -0.5), (-0.12940972, -1.509958e-7, -0.48296285), (-0.25000015, -1.509958e-7, -0.4330126), (-0.3535536, -1.509958e-7, -0.3535532), (-0.4330128, -1.509958e-7, -0.24999979), (-0.48296297, -1.509958e-7, -0.12940931), (-0.5, -1.509958e-7, 1.9470718e-7), (-0.48296288, -1.509958e-7, 0.12940969), (-0.43301263, -1.509958e-7, 0.25000012), (-0.3535533, -1.509958e-7, 0.35355347), (-0.24999993, -1.509958e-7, 0.43301275), (-0.12940946, -1.509958e-7, 0.48296294), (3.774895e-8, -1.509958e-7, 0.5), (0.12940954, -1.509958e-7, 0.4829629), (0.24999999, -1.509958e-7, 0.43301272), (0.35355338, -1.509958e-7, 0.35355338), (0.4330127, -1.509958e-7, 0.25), (0.4829629, -1.509958e-7, 0.12940952), (0.56698716, 0.24999982, -4.4158588e-7), (0.54766744, 0.24999982, -0.14674748), (0.4910251, 0.24999982, -0.2834939), (0.4009202, 0.24999982, -0.40092072), (0.28349328, 0.24999982, -0.49102545), (0.14674678, 0.24999982, -0.5476676), (-2.635993e-7, 0.24999982, -0.56698716), (-0.14674729, 0.24999982, -0.54766744), (-0.28349376, 0.24999982, -0.49102518), (-0.4009207, 0.24999982, -0.40092024), (-0.49102542, 0.24999982, -0.28349334), (-0.5476676, 0.24999982, -0.14674684), (-0.56698716, 0.24999982, 2.2079294e-7), (-0.5476675, 0.24999982, 0.14674726), (-0.4910252, 0.24999982, 0.28349373), (-0.40092036, 0.24999982, 0.40092057), (-0.2834935, 0.24999982, 0.49102533), (-0.14674701, 0.24999982, 0.54766756), (4.280634e-8, 0.24999982, 0.56698716), (0.1467471, 0.24999982, 0.5476675), (0.28349355, 0.24999982, 0.4910253), (0.40092045, 0.24999982, 0.40092045), (0.49102527, 0.24999982, 0.28349358), (0.5476675, 0.24999982, 0.14674707), (0.74999976, 0.43301257, -5.841214e-7), (0.724444, 0.43301257, -0.19411476), (0.6495186, 0.43301257, -0.37500033), (0.5303296, 0.43301257, -0.53033024), (0.3749995, 0.43301257, -0.6495191), (0.19411384, 0.43301257, -0.7244442), (-3.486841e-7, 0.43301257, -0.74999976), (-0.1941145, 0.43301257, -0.72444403), (-0.3750001, 0.43301257, -0.6495187), (-0.53033024, 0.43301257, -0.53032964), (-0.649519, 0.43301257, -0.37499958), (-0.7244442, 0.43301257, -0.19411391), (-0.74999976, 0.43301257, 2.920607e-7), (-0.7244441, 0.43301257, 0.19411446), (-0.6495187, 0.43301257, 0.37500006), (-0.53032976, 0.43301257, 0.53033006), (-0.37499976, 0.43301257, 0.6495189), (-0.19411413, 0.43301257, 0.72444415), (5.6623406e-8, 0.43301257, 0.74999976), (0.19411424, 0.43301257, 0.72444415), (0.37499985, 0.43301257, 0.6495189), (0.5303299, 0.43301257, 0.5303299), (0.64951885, 0.43301257, 0.37499988), (0.72444415, 0.43301257, 0.19411422), (0.9999997, 0.5, -7.788285e-7), (0.96592534, 0.5, -0.25881967), (0.86602485, 0.5, -0.5000004), (0.7071061, 0.5, -0.707107), (0.49999934, 0.5, -0.86602545), (0.25881845, 0.5, -0.96592563), (-4.6491215e-7, 0.5, -0.9999997), (-0.25881934, 0.5, -0.9659254), (-0.5000001, 0.5, -0.866025), (-0.70710695, 0.5, -0.7071062), (-0.8660254, 0.5, -0.49999943), (-0.96592563, 0.5, -0.25881854), (-0.9999997, 0.5, 3.8941425e-7), (-0.96592546, 0.5, 0.25881928), (-0.86602503, 0.5, 0.50000006), (-0.70710635, 0.5, 0.7071067), (-0.4999997, 0.5, 0.86602527), (-0.25881884, 0.5, 0.9659256), (7.549788e-8, 0.5, 0.9999997), (0.25881898, 0.5, 0.9659255), (0.49999982, 0.5, 0.8660252), (0.70710653, 0.5, 0.70710653), (0.86602515, 0.5, 0.49999985), (0.9659255, 0.5, 0.25881895), (1.2499996, 0.43301287, -9.735356e-7), (1.2074066, 0.43301287, -0.3235246), (1.0825311, 0.43301287, -0.62500054), (0.8838827, 0.43301287, -0.88388383), (0.62499917, 0.43301287, -1.0825318), (0.32352307, 0.43301287, -1.2074071), (-5.8114017e-7, 0.43301287, -1.2499996), (-0.3235242, 0.43301287, -1.2074068), (-0.6250002, 0.43301287, -1.0825312), (-0.8838837, 0.43301287, -0.88388276), (-1.0825317, 0.43301287, -0.6249993), (-1.2074071, 0.43301287, -0.3235232), (-1.2499996, 0.43301287, 4.867678e-7), (-1.2074069, 0.43301287, 0.32352412), (-1.0825313, 0.43301287, 0.6250001), (-0.883883, 0.43301287, 0.8838834), (-0.62499964, 0.43301287, 1.0825316), (-0.32352355, 0.43301287, 1.207407), (9.4372346e-8, 0.43301287, 1.2499996), (0.32352376, 0.43301287, 1.2074069), (0.62499976, 0.43301287, 1.0825315), (0.88388324, 0.43301287, 0.88388324), (1.0825315, 0.43301287, 0.6249998), (1.2074069, 0.43301287, 0.3235237), (1.4330125, 0.25000036, -0.0000011160713), (1.3841835, 0.25000036, -0.37089196), (1.2410247, 0.25000036, -0.7165071), (1.0132922, 0.25000036, -1.0132935), (0.7165055, 0.25000036, -1.2410256), (0.3708902, 0.25000036, -1.3841839), (-6.662251e-7, 0.25000036, -1.4330125), (-0.37089148, 0.25000036, -1.3841835), (-0.71650666, 0.25000036, -1.241025), (-1.0132934, 0.25000036, -1.0132923), (-1.2410256, 0.25000036, -0.71650565), (-1.3841839, 0.25000036, -0.37089032), (-1.4330125, 0.25000036, 5.5803565e-7), (-1.3841836, 0.25000036, 0.3708914), (-1.241025, 0.25000036, 0.7165066), (-1.0132926, 0.25000036, 1.013293), (-0.716506, 0.25000036, 1.2410253), (-0.37089074, 0.25000036, 1.3841839), (1.0818943e-7, 0.25000036, 1.4330125), (0.37089097, 0.25000036, 1.3841838), (0.7165062, 0.25000036, 1.2410253), (1.0132928, 0.25000036, 1.0132928), (1.2410252, 0.25000036, 0.71650624), (1.3841838, 0.25000036, 0.37089092)] (
                    interpolation = "vertex"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Scope "materials"
        {
            def Material "arnold_materialbuilder1"
            {
                token outputs:arnold:surface.connect = </instances_float32/Prototypes/materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

                def Shader "standard_surface1"
                {
                    uniform token info:id = "arnold:standard_surface"
                    string inputs:aov_id1 = ""
                    string inputs:aov_id2 = ""
                    string inputs:aov_id3 = ""
                    string inputs:aov_id4 = ""
                    string inputs:aov_id5 = ""
                    string inputs:aov_id6 = ""
                    string inputs:aov_id7 = ""
                    string inputs:aov_id8 = ""
                    float inputs:base = 0.8
                    color3f inputs:base_color = (0.493, 0.799, 1)
                    color3f inputs:base_color.connect = </instances_float32/Prototypes/materials/arnold_materialbuilder1/ramp_rgb1.outputs:rgb>
                    int inputs:caustics = 0
                    float inputs:coat = 0
                    float inputs:coat_affect_color = 0
                    float inputs:coat_affect_roughness = 0
                    float inputs:coat_anisotropy = 0
                    color3f inputs:coat_color = (1, 1, 1)
                    float inputs:coat_IOR = 1.5
                    vector3f inputs:coat_normal = (0, 0, 0)
                    float inputs:coat_rotation = 0
                    float inputs:coat_roughness = 0.1
                    int inputs:dielectric_priority = 0
                    float inputs:diffuse_roughness = 0
                    float inputs:emission = 0
                    color3f inputs:emission_color = (1, 1, 1)
                    int inputs:exit_to_background = 0
                    color3f inputs:id1 = (0, 0, 0)
                    color3f inputs:id2 = (0, 0, 0)
                    color3f inputs:id3 = (0, 0, 0)
                    color3f inputs:id4 = (0, 0, 0)
                    color3f inputs:id5 = (0, 0, 0)
                    color3f inputs:id6 = (0, 0, 0)
                    color3f inputs:id7 = (0, 0, 0)
                    color3f inputs:id8 = (0, 0, 0)
                    float inputs:indirect_diffuse = 1
                    float inputs:indirect_specular = 1
                    int inputs:internal_reflections = 1
                    float inputs:metalness = 0
                    vector3f inputs:normal = (0, 0, 0)
                    color3f inputs:opacity = (1, 1, 1)
                    float inputs:sheen = 0
                    color3f inputs:sheen_color = (1, 1, 1)
                    float inputs:sheen_roughness = 0.3
                    float inputs:specular = 1
                    float inputs:specular_anisotropy = 0
                    color3f inputs:specular_color = (1, 1, 1)
                    float inputs:specular_IOR = 1.5
                    float inputs:specular_rotation = 0
                    float inputs:specular_roughness = 0.2
                    float inputs:subsurface = 0
                    float inputs:subsurface_anisotropy = 0
                    color3f inputs:subsurface_color = (1, 1, 1)
                    color3f inputs:subsurface_radius = (1, 1, 1)
                    float inputs:subsurface_scale = 1
                    token inputs:subsurface_type = "randomwalk"
                    vector3f inputs:tangent = (0, 0, 0)
                    float inputs:thin_film_IOR = 1.5
                    float inputs:thin_film_thickness = 0
                    int inputs:thin_walled = 0
                    float inputs:transmission = 0
                    color3f inputs:transmission_color = (1, 1, 1)
                    float inputs:transmission_depth = 0
                    float inputs:transmission_dispersion = 0
                    float inputs:transmission_extra_roughness = 0
                    color3f inputs:transmission_scatter = (0, 0, 0)
                    float inputs:transmission_scatter_anisotropy = 0
                    int inputs:transmit_aovs = 0
                    token outputs:shader
                }

                def Shader "ramp_rgb1"
                {
                    uniform token info:id = "arnold:ramp_rgb"
                    color3f[] inputs:color = [(1, 0, 0), (0.5, 1, 0)]
                    float inputs:input = 0
                    float inputs:input.connect = </instances_float32/Prototypes/materials/arnold_materialbuilder1/user_data_float1.outputs:float>
                    int[] inputs:interpolation = [1, 1]
                    float[] inputs:position = [0, 1]
                    color3f inputs:ramp1c = (1, 0, 0)
                    int inputs:ramp1interp = 1
                    float inputs:ramp1pos = 0
                    color3f inputs:ramp2c = (0.5, 1, 0)
                    int inputs:ramp2interp = 1
                    float inputs:ramp2pos = 1
                    token inputs:type = "custom"
                    token inputs:use_implicit_uvs = "off"
                    string inputs:uvset = ""
                    int inputs:wrap_uvs = 0
                    vector3f outputs:rgb
                }

                def Shader "user_data_float1"
                {
                    uniform token info:id = "arnold:user_data_float"
                    string inputs:attribute = "myfloat"
                    float inputs:default = 0
                    float outputs:float
                }
            }
        }
    }
}

def PointInstancer "instances_float64"
{
    int64[] invisibleIds = []
    quath[] orientations = [(0, 0, 1, 0), (-0.273193, 0.961914, 0, 0), (0.273193, -0.297363, 0.915039, 0), (0.525879, -0.850586, 0, 0), (-0.487061, 0.706543, -0.513184, 0), (0.525879, -0.262939, 0.809082, 0), (0.273193, 0.77832, 0.56543, 0), (0.487061, 0.27002, 0.830566, 0), (0.525879, 0.687988, 0.5, 0), (0.273193, 0.77832, -0.56543, 0), (0.487061, 0.873535, 0, 0), (0.525879, 0.687988, -0.5, 0), (-0.273193, 0.297363, 0.915039, 0), (-0.487061, -0.27002, 0.830566, 0), (0.525879, -0.262939, -0.809082, 0), (-0.487061, 0.706543, 0.513184, 0), (0.707031, -0.672363, -0.218506, 0), (0.707031, -0.415527, -0.572266, 0), (0.850586, -0.425293, -0.309082, 0), (0.707031, 0, -0.707031, 0), (0.707031, 0.415527, -0.572266, 0), (0.850586, 0.162476, -0.5, 0), (0.707031, 0.672363, -0.218506, 0), (0.707031, 0.672363, 0.218506, 0), (0.850586, 0.525879, 0, 0), (0.707031, 0.415527, 0.572266, 0), (0.707031, 0, 0.707031, 0), (0.850586, 0.162476, 0.5, 0), (0.707031, -0.415527, 0.572266, 0), (0.707031, -0.672363, 0.218506, 0), (0.850586, -0.425293, 0.309082, 0), (0.873535, -0.487061, 0, 0), (0.873535, -0.150513, -0.463135, 0), (0.873535, 0.394043, -0.286133, 0), (0.873535, 0.394043, 0.286133, 0), (0.873535, -0.150513, 0.463135, 0), (1, 0, 0, 0), (0.961914, -0.221069, 0.160645, 0), (0.961914, -0.221069, -0.160645, 0), (0.961914, 0.0844727, 0.26001, 0), (0.961914, 0.273193, 0, 0), (0.961914, 0.0844727, -0.26001, 0)]
    point3f[] positions = [(0, 0, -1), (0, 0.5257312, -0.8506508), (0.49999997, 0.1624601, -0.8506508), (0, 0.89442736, -0.44721314), (0.49999997, 0.68819135, -0.5257306), (0.85065085, 0.27639368, -0.4472132), (0.309017, -0.42532542, -0.85065085), (0.80901724, -0.2628654, -0.5257308), (0.5257312, -0.72360694, -0.44721326), (-0.309017, -0.42532542, -0.85065085), (0, -0.850651, -0.5257307), (-0.5257312, -0.72360694, -0.44721326), (-0.49999997, 0.1624601, -0.8506508), (-0.80901724, -0.2628654, -0.5257308), (-0.85065085, 0.27639368, -0.4472132), (-0.49999997, 0.68819135, -0.5257306), (-0.30901697, 0.9510566, 0), (-0.8090168, 0.5877854, 0), (-0.5257312, 0.72360694, 0.44721326), (-1, 0, 0), (-0.8090168, -0.5877854, 0), (-0.85065085, -0.27639368, 0.4472132), (-0.30901697, -0.9510566, 0), (0.30901697, -0.9510566, 0), (0, -0.89442736, 0.44721314), (0.8090168, -0.5877854, 0), (1, 0, 0), (0.85065085, -0.27639368, 0.4472132), (0.8090168, 0.5877854, 0), (0.30901697, 0.9510566, 0), (0.5257312, 0.72360694, 0.44721326), (0, 0.850651, 0.5257307), (-0.80901724, 0.2628654, 0.5257308), (-0.49999997, -0.68819135, 0.5257306), (0.49999997, -0.68819135, 0.5257306), (0.80901724, 0.2628654, 0.5257308), (0, 0, 1), (0.309017, 0.42532542, 0.85065085), (-0.309017, 0.42532542, 0.85065085), (0.49999997, -0.1624601, 0.8506508), (0, -0.5257312, 0.8506508), (-0.49999997, -0.1624601, 0.8506508)]
    double[] primvars:myfloat (
        interpolation = "varying"
    )
    double[] primvars:myfloat.timeSamples = {
        1: [0.958203911781311, 0.772730827331543, 0.4692990779876709, 0.6583303213119507, 0.8998731374740601, 0.17178833484649658, 0.26358795166015625, 0.8879848718643188, 0.01825582981109619, 0.7850043773651123, 0.6721075773239136, 0.09140968322753906, 0.9478949308395386, 0.7328118085861206, 0.48378193378448486, 0.5246878862380981, 0.2882506847381592, 0.9838912487030029, 0.8634243011474609, 0.0024265050888061523, 0.5140138864517212, 0.434251070022583, 0.4673604965209961, 0.40474534034729004, 0.7460899353027344, 0.17949700355529785, 0.027473926544189453, 0.6077249050140381, 0.5462106466293335, 0.4125763177871704, 0.975250244140625, 0.9363560676574707, 0.42469489574432373, 0.725510835647583, 0.17928433418273926, 0.9023677110671997, 0.7364842891693115, 0.010159134864807129, 0.11265361309051514, 0.6870955228805542, 0.4114621877670288, 0.09229576587677002],
    }
    int[] protoIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    rel prototypes = </instances_float64/Prototypes/torus1>
    matrix4d xformOp:transform:transform3 = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:transform3"]

    def Scope "Prototypes"
    {
        def Xform "torus1" (
            kind = "component"
        )
        {
            rel material:binding = </instances_float64/Prototypes/materials/arnold_materialbuilder1>
            matrix4d xformOp:transform:xform = ( (0.19, 0, 0, 0), (0, 0, 0.19, 0), (0, -0.19, 0, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform:xform"]

            def Mesh "mesh_0"
            {
                float3[] extent = [(-1.5, -0.5, -1.5), (1.5, 0.5, 1.5)]
                int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                int[] faceVertexIndices = [0, 1, 25, 24, 1, 2, 26, 25, 2, 3, 27, 26, 3, 4, 28, 27, 4, 5, 29, 28, 5, 6, 30, 29, 6, 7, 31, 30, 7, 8, 32, 31, 8, 9, 33, 32, 9, 10, 34, 33, 10, 11, 35, 34, 11, 12, 36, 35, 12, 13, 37, 36, 13, 14, 38, 37, 14, 15, 39, 38, 15, 16, 40, 39, 16, 17, 41, 40, 17, 18, 42, 41, 18, 19, 43, 42, 19, 20, 44, 43, 20, 21, 45, 44, 21, 22, 46, 45, 22, 23, 47, 46, 23, 0, 24, 47, 24, 25, 49, 48, 25, 26, 50, 49, 26, 27, 51, 50, 27, 28, 52, 51, 28, 29, 53, 52, 29, 30, 54, 53, 30, 31, 55, 54, 31, 32, 56, 55, 32, 33, 57, 56, 33, 34, 58, 57, 34, 35, 59, 58, 35, 36, 60, 59, 36, 37, 61, 60, 37, 38, 62, 61, 38, 39, 63, 62, 39, 40, 64, 63, 40, 41, 65, 64, 41, 42, 66, 65, 42, 43, 67, 66, 43, 44, 68, 67, 44, 45, 69, 68, 45, 46, 70, 69, 46, 47, 71, 70, 47, 24, 48, 71, 48, 49, 73, 72, 49, 50, 74, 73, 50, 51, 75, 74, 51, 52, 76, 75, 52, 53, 77, 76, 53, 54, 78, 77, 54, 55, 79, 78, 55, 56, 80, 79, 56, 57, 81, 80, 57, 58, 82, 81, 58, 59, 83, 82, 59, 60, 84, 83, 60, 61, 85, 84, 61, 62, 86, 85, 62, 63, 87, 86, 63, 64, 88, 87, 64, 65, 89, 88, 65, 66, 90, 89, 66, 67, 91, 90, 67, 68, 92, 91, 68, 69, 93, 92, 69, 70, 94, 93, 70, 71, 95, 94, 71, 48, 72, 95, 72, 73, 97, 96, 73, 74, 98, 97, 74, 75, 99, 98, 75, 76, 100, 99, 76, 77, 101, 100, 77, 78, 102, 101, 78, 79, 103, 102, 79, 80, 104, 103, 80, 81, 105, 104, 81, 82, 106, 105, 82, 83, 107, 106, 83, 84, 108, 107, 84, 85, 109, 108, 85, 86, 110, 109, 86, 87, 111, 110, 87, 88, 112, 111, 88, 89, 113, 112, 89, 90, 114, 113, 90, 91, 115, 114, 91, 92, 116, 115, 92, 93, 117, 116, 93, 94, 118, 117, 94, 95, 119, 118, 95, 72, 96, 119, 96, 97, 121, 120, 97, 98, 122, 121, 98, 99, 123, 122, 99, 100, 124, 123, 100, 101, 125, 124, 101, 102, 126, 125, 102, 103, 127, 126, 103, 104, 128, 127, 104, 105, 129, 128, 105, 106, 130, 129, 106, 107, 131, 130, 107, 108, 132, 131, 108, 109, 133, 132, 109, 110, 134, 133, 110, 111, 135, 134, 111, 112, 136, 135, 112, 113, 137, 136, 113, 114, 138, 137, 114, 115, 139, 138, 115, 116, 140, 139, 116, 117, 141, 140, 117, 118, 142, 141, 118, 119, 143, 142, 119, 96, 120, 143, 120, 121, 145, 144, 121, 122, 146, 145, 122, 123, 147, 146, 123, 124, 148, 147, 124, 125, 149, 148, 125, 126, 150, 149, 126, 127, 151, 150, 127, 128, 152, 151, 128, 129, 153, 152, 129, 130, 154, 153, 130, 131, 155, 154, 131, 132, 156, 155, 132, 133, 157, 156, 133, 134, 158, 157, 134, 135, 159, 158, 135, 136, 160, 159, 136, 137, 161, 160, 137, 138, 162, 161, 138, 139, 163, 162, 139, 140, 164, 163, 140, 141, 165, 164, 141, 142, 166, 165, 142, 143, 167, 166, 143, 120, 144, 167, 144, 145, 169, 168, 145, 146, 170, 169, 146, 147, 171, 170, 147, 148, 172, 171, 148, 149, 173, 172, 149, 150, 174, 173, 150, 151, 175, 174, 151, 152, 176, 175, 152, 153, 177, 176, 153, 154, 178, 177, 154, 155, 179, 178, 155, 156, 180, 179, 156, 157, 181, 180, 157, 158, 182, 181, 158, 159, 183, 182, 159, 160, 184, 183, 160, 161, 185, 184, 161, 162, 186, 185, 162, 163, 187, 186, 163, 164, 188, 187, 164, 165, 189, 188, 165, 166, 190, 189, 166, 167, 191, 190, 167, 144, 168, 191, 168, 169, 193, 192, 169, 170, 194, 193, 170, 171, 195, 194, 171, 172, 196, 195, 172, 173, 197, 196, 173, 174, 198, 197, 174, 175, 199, 198, 175, 176, 200, 199, 176, 177, 201, 200, 177, 178, 202, 201, 178, 179, 203, 202, 179, 180, 204, 203, 180, 181, 205, 204, 181, 182, 206, 205, 182, 183, 207, 206, 183, 184, 208, 207, 184, 185, 209, 208, 185, 186, 210, 209, 186, 187, 211, 210, 187, 188, 212, 211, 188, 189, 213, 212, 189, 190, 214, 213, 190, 191, 215, 214, 191, 168, 192, 215, 192, 193, 217, 216, 193, 194, 218, 217, 194, 195, 219, 218, 195, 196, 220, 219, 196, 197, 221, 220, 197, 198, 222, 221, 198, 199, 223, 222, 199, 200, 224, 223, 200, 201, 225, 224, 201, 202, 226, 225, 202, 203, 227, 226, 203, 204, 228, 227, 204, 205, 229, 228, 205, 206, 230, 229, 206, 207, 231, 230, 207, 208, 232, 231, 208, 209, 233, 232, 209, 210, 234, 233, 210, 211, 235, 234, 211, 212, 236, 235, 212, 213, 237, 236, 213, 214, 238, 237, 214, 215, 239, 238, 215, 192, 216, 239, 216, 217, 241, 240, 217, 218, 242, 241, 218, 219, 243, 242, 219, 220, 244, 243, 220, 221, 245, 244, 221, 222, 246, 245, 222, 223, 247, 246, 223, 224, 248, 247, 224, 225, 249, 248, 225, 226, 250, 249, 226, 227, 251, 250, 227, 228, 252, 251, 228, 229, 253, 252, 229, 230, 254, 253, 230, 231, 255, 254, 231, 232, 256, 255, 232, 233, 257, 256, 233, 234, 258, 257, 234, 235, 259, 258, 235, 236, 260, 259, 236, 237, 261, 260, 237, 238, 262, 261, 238, 239, 263, 262, 239, 216, 240, 263, 240, 241, 265, 264, 241, 242, 266, 265, 242, 243, 267, 266, 243, 244, 268, 267, 244, 245, 269, 268, 245, 246, 270, 269, 246, 247, 271, 270, 247, 248, 272, 271, 248, 249, 273, 272, 249, 250, 274, 273, 250, 251, 275, 274, 251, 252, 276, 275, 252, 253, 277, 276, 253, 254, 278, 277, 254, 255, 279, 278, 255, 256, 280, 279, 256, 257, 281, 280, 257, 258, 282, 281, 258, 259, 283, 282, 259, 260, 284, 283, 260, 261, 285, 284, 261, 262, 286, 285, 262, 263, 287, 286, 263, 240, 264, 287, 264, 265, 1, 0, 265, 266, 2, 1, 266, 267, 3, 2, 267, 268, 4, 3, 268, 269, 5, 4, 269, 270, 6, 5, 270, 271, 7, 6, 271, 272, 8, 7, 272, 273, 9, 8, 273, 274, 10, 9, 274, 275, 11, 10, 275, 276, 12, 11, 276, 277, 13, 12, 277, 278, 14, 13, 278, 279, 15, 14, 279, 280, 16, 15, 280, 281, 17, 16, 281, 282, 18, 17, 282, 283, 19, 18, 283, 284, 20, 19, 284, 285, 21, 20, 285, 286, 22, 21, 286, 287, 23, 22, 287, 264, 0, 23]
                uniform token orientation = "leftHanded"
                point3f[] points = [(1.5, -4.371139e-8, -0.0000011682431), (1.4488884, -4.371139e-8, -0.38822964), (1.2990377, -4.371139e-8, -0.7500009), (1.0606595, -4.371139e-8, -1.0606608), (0.7499992, -4.371139e-8, -1.2990385), (0.38822782, -4.371139e-8, -1.4488889), (-6.973684e-7, -4.371139e-8, -1.5), (-0.38822913, -4.371139e-8, -1.4488885), (-0.7500005, -4.371139e-8, -1.2990378), (-1.0606608, -4.371139e-8, -1.0606596), (-1.2990384, -4.371139e-8, -0.7499994), (-1.4488889, -4.371139e-8, -0.38822794), (-1.5, -4.371139e-8, 5.8412155e-7), (-1.4488887, -4.371139e-8, 0.38822907), (-1.2990379, -4.371139e-8, 0.75000036), (-1.0606599, -4.371139e-8, 1.0606604), (-0.74999976, -4.371139e-8, 1.2990383), (-0.3882284, -4.371139e-8, 1.4488888), (1.13246855e-7, -4.371139e-8, 1.5), (0.3882286, -4.371139e-8, 1.4488888), (0.74999994, -4.371139e-8, 1.2990382), (1.0606601, -4.371139e-8, 1.0606601), (1.299038, -4.371139e-8, 0.75), (1.4488888, -4.371139e-8, 0.38822857), (1.4330126, -0.2500001, -0.0000011160714), (1.3841836, -0.2500001, -0.370892), (1.2410249, -0.2500001, -0.71650714), (1.0132923, -0.2500001, -1.0132936), (0.7165056, -0.2500001, -1.2410257), (0.37089023, -0.2500001, -1.384184), (-6.6622516e-7, -0.2500001, -1.4330126), (-0.3708915, -0.2500001, -1.3841836), (-0.7165067, -0.2500001, -1.2410251), (-1.0132935, -0.2500001, -1.0132924), (-1.2410257, -0.2500001, -0.7165057), (-1.384184, -0.2500001, -0.37089035), (-1.4330126, -0.2500001, 5.580357e-7), (-1.3841838, -0.2500001, 0.37089142), (-1.2410251, -0.2500001, 0.71650666), (-1.0132927, -0.2500001, 1.0132931), (-0.71650606, -0.2500001, 1.2410254), (-0.37089077, -0.2500001, 1.384184), (1.0818945e-7, -0.2500001, 1.4330126), (0.370891, -0.2500001, 1.3841839), (0.71650624, -0.2500001, 1.2410253), (1.0132929, -0.2500001, 1.0132929), (1.2410253, -0.2500001, 0.7165063), (1.3841839, -0.2500001, 0.37089095), (1.25, -0.43301272, -9.735359e-7), (1.207407, -0.43301272, -0.3235247), (1.0825313, -0.43301272, -0.6250007), (0.88388294, -0.43301272, -0.8838841), (0.62499934, -0.43301272, -1.0825322), (0.32352316, -0.43301272, -1.2074075), (-5.8114034e-7, -0.43301272, -1.25), (-0.3235243, -0.43301272, -1.2074071), (-0.62500036, -0.43301272, -1.0825315), (-0.88388395, -0.43301272, -0.883883), (-1.082532, -0.43301272, -0.62499946), (-1.2074075, -0.43301272, -0.32352328), (-1.25, -0.43301272, 4.8676793e-7), (-1.2074072, -0.43301272, 0.3235242), (-1.0825316, -0.43301272, 0.6250003), (-0.88388324, -0.43301272, 0.8838837), (-0.6249998, -0.43301272, 1.0825319), (-0.32352364, -0.43301272, 1.2074074), (9.4372375e-8, -0.43301272, 1.25), (0.32352385, -0.43301272, 1.2074072), (0.62499994, -0.43301272, 1.0825318), (0.8838835, -0.43301272, 0.8838835), (1.0825317, -0.43301272, 0.625), (1.2074072, -0.43301272, 0.32352382), (1, -0.5, -7.7882873e-7), (0.96592563, -0.5, -0.25881976), (0.8660251, -0.5, -0.5000006), (0.70710635, -0.5, -0.70710725), (0.4999995, -0.5, -0.8660257), (0.25881854, -0.5, -0.96592593), (-4.649123e-7, -0.5, -1), (-0.25881943, -0.5, -0.9659257), (-0.5000003, -0.5, -0.8660252), (-0.7071072, -0.5, -0.7071064), (-0.8660256, -0.5, -0.49999958), (-0.96592593, -0.5, -0.25881863), (-1, -0.5, 3.8941437e-7), (-0.96592575, -0.5, 0.25881937), (-0.86602527, -0.5, 0.50000024), (-0.7071066, -0.5, 0.70710695), (-0.49999985, -0.5, 0.8660255), (-0.25881892, -0.5, 0.9659259), (7.54979e-8, -0.5, 1), (0.25881907, -0.5, 0.9659258), (0.49999997, -0.5, 0.86602545), (0.70710677, -0.5, 0.70710677), (0.8660254, -0.5, 0.5), (0.9659258, -0.5, 0.25881904), (0.75000006, -0.43301272, -5.841216e-7), (0.72444427, -0.43301272, -0.19411483), (0.64951885, -0.43301272, -0.37500048), (0.5303298, -0.43301272, -0.5303305), (0.37499964, -0.43301272, -0.6495193), (0.19411393, -0.43301272, -0.7244445), (-3.4868424e-7, -0.43301272, -0.75000006), (-0.1941146, -0.43301272, -0.7244443), (-0.37500027, -0.43301272, -0.64951897), (-0.5303304, -0.43301272, -0.5303298), (-0.64951926, -0.43301272, -0.3749997), (-0.7244445, -0.43301272, -0.19411398), (-0.75000006, -0.43301272, 2.920608e-7), (-0.7244444, -0.43301272, 0.19411455), (-0.649519, -0.43301272, 0.3750002), (-0.53033, -0.43301272, 0.53033024), (-0.3749999, -0.43301272, 0.6495192), (-0.19411421, -0.43301272, 0.72444445), (5.662343e-8, -0.43301272, 0.75000006), (0.19411433, -0.43301272, 0.7244444), (0.375, -0.43301272, 0.64951915), (0.5303301, -0.43301272, 0.5303301), (0.6495191, -0.43301272, 0.37500003), (0.7244444, -0.43301272, 0.1941143), (0.56698734, -0.2500001, -4.4158602e-7), (0.5476676, -0.2500001, -0.14674753), (0.49102527, -0.2500001, -0.283494), (0.40092036, -0.2500001, -0.40092087), (0.28349337, -0.2500001, -0.4910256), (0.14674683, -0.2500001, -0.54766774), (-2.635994e-7, -0.2500001, -0.56698734), (-0.14674734, -0.2500001, -0.5476676), (-0.28349385, -0.2500001, -0.49102533), (-0.4009208, -0.2500001, -0.4009204), (-0.49102557, -0.2500001, -0.28349343), (-0.54766774, -0.2500001, -0.14674689), (-0.56698734, -0.2500001, 2.2079301e-7), (-0.5476677, -0.2500001, 0.1467473), (-0.49102536, -0.2500001, 0.28349382), (-0.40092048, -0.2500001, 0.4009207), (-0.28349358, -0.2500001, 0.4910255), (-0.14674705, -0.2500001, 0.54766774), (4.2806352e-8, -0.2500001, 0.56698734), (0.14674714, -0.2500001, 0.5476677), (0.28349364, -0.2500001, 0.49102545), (0.40092057, -0.2500001, 0.40092057), (0.49102542, -0.2500001, 0.28349367), (0.5476677, -0.2500001, 0.14674713), (0.5, -1.509958e-7, -3.8941437e-7), (0.48296282, -1.509958e-7, -0.12940988), (0.43301255, -1.509958e-7, -0.2500003), (0.35355318, -1.509958e-7, -0.35355362), (0.24999975, -1.509958e-7, -0.43301284), (0.12940927, -1.509958e-7, -0.48296297), (-2.3245614e-7, -1.509958e-7, -0.5), (-0.12940972, -1.509958e-7, -0.48296285), (-0.25000015, -1.509958e-7, -0.4330126), (-0.3535536, -1.509958e-7, -0.3535532), (-0.4330128, -1.509958e-7, -0.24999979), (-0.48296297, -1.509958e-7, -0.12940931), (-0.5, -1.509958e-7, 1.9470718e-7), (-0.48296288, -1.509958e-7, 0.12940969), (-0.43301263, -1.509958e-7, 0.25000012), (-0.3535533, -1.509958e-7, 0.35355347), (-0.24999993, -1.509958e-7, 0.43301275), (-0.12940946, -1.509958e-7, 0.48296294), (3.774895e-8, -1.509958e-7, 0.5), (0.12940954, -1.509958e-7, 0.4829629), (0.24999999, -1.509958e-7, 0.43301272), (0.35355338, -1.509958e-7, 0.35355338), (0.4330127, -1.509958e-7, 0.25), (0.4829629, -1.509958e-7, 0.12940952), (0.56698716, 0.24999982, -4.4158588e-7), (0.54766744, 0.24999982, -0.14674748), (0.4910251, 0.24999982, -0.2834939), (0.4009202, 0.24999982, -0.40092072), (0.28349328, 0.24999982, -0.49102545), (0.14674678, 0.24999982, -0.5476676), (-2.635993e-7, 0.24999982, -0.56698716), (-0.14674729, 0.24999982, -0.54766744), (-0.28349376, 0.24999982, -0.49102518), (-0.4009207, 0.24999982, -0.40092024), (-0.49102542, 0.24999982, -0.28349334), (-0.5476676, 0.24999982, -0.14674684), (-0.56698716, 0.24999982, 2.2079294e-7), (-0.5476675, 0.24999982, 0.14674726), (-0.4910252, 0.24999982, 0.28349373), (-0.40092036, 0.24999982, 0.40092057), (-0.2834935, 0.24999982, 0.49102533), (-0.14674701, 0.24999982, 0.54766756), (4.280634e-8, 0.24999982, 0.56698716), (0.1467471, 0.24999982, 0.5476675), (0.28349355, 0.24999982, 0.4910253), (0.40092045, 0.24999982, 0.40092045), (0.49102527, 0.24999982, 0.28349358), (0.5476675, 0.24999982, 0.14674707), (0.74999976, 0.43301257, -5.841214e-7), (0.724444, 0.43301257, -0.19411476), (0.6495186, 0.43301257, -0.37500033), (0.5303296, 0.43301257, -0.53033024), (0.3749995, 0.43301257, -0.6495191), (0.19411384, 0.43301257, -0.7244442), (-3.486841e-7, 0.43301257, -0.74999976), (-0.1941145, 0.43301257, -0.72444403), (-0.3750001, 0.43301257, -0.6495187), (-0.53033024, 0.43301257, -0.53032964), (-0.649519, 0.43301257, -0.37499958), (-0.7244442, 0.43301257, -0.19411391), (-0.74999976, 0.43301257, 2.920607e-7), (-0.7244441, 0.43301257, 0.19411446), (-0.6495187, 0.43301257, 0.37500006), (-0.53032976, 0.43301257, 0.53033006), (-0.37499976, 0.43301257, 0.6495189), (-0.19411413, 0.43301257, 0.72444415), (5.6623406e-8, 0.43301257, 0.74999976), (0.19411424, 0.43301257, 0.72444415), (0.37499985, 0.43301257, 0.6495189), (0.5303299, 0.43301257, 0.5303299), (0.64951885, 0.43301257, 0.37499988), (0.72444415, 0.43301257, 0.19411422), (0.9999997, 0.5, -7.788285e-7), (0.96592534, 0.5, -0.25881967), (0.86602485, 0.5, -0.5000004), (0.7071061, 0.5, -0.707107), (0.49999934, 0.5, -0.86602545), (0.25881845, 0.5, -0.96592563), (-4.6491215e-7, 0.5, -0.9999997), (-0.25881934, 0.5, -0.9659254), (-0.5000001, 0.5, -0.866025), (-0.70710695, 0.5, -0.7071062), (-0.8660254, 0.5, -0.49999943), (-0.96592563, 0.5, -0.25881854), (-0.9999997, 0.5, 3.8941425e-7), (-0.96592546, 0.5, 0.25881928), (-0.86602503, 0.5, 0.50000006), (-0.70710635, 0.5, 0.7071067), (-0.4999997, 0.5, 0.86602527), (-0.25881884, 0.5, 0.9659256), (7.549788e-8, 0.5, 0.9999997), (0.25881898, 0.5, 0.9659255), (0.49999982, 0.5, 0.8660252), (0.70710653, 0.5, 0.70710653), (0.86602515, 0.5, 0.49999985), (0.9659255, 0.5, 0.25881895), (1.2499996, 0.43301287, -9.735356e-7), (1.2074066, 0.43301287, -0.3235246), (1.0825311, 0.43301287, -0.62500054), (0.8838827, 0.43301287, -0.88388383), (0.62499917, 0.43301287, -1.0825318), (0.32352307, 0.43301287, -1.2074071), (-5.8114017e-7, 0.43301287, -1.2499996), (-0.3235242, 0.43301287, -1.2074068), (-0.6250002, 0.43301287, -1.0825312), (-0.8838837, 0.43301287, -0.88388276), (-1.0825317, 0.43301287, -0.6249993), (-1.2074071, 0.43301287, -0.3235232), (-1.2499996, 0.43301287, 4.867678e-7), (-1.2074069, 0.43301287, 0.32352412), (-1.0825313, 0.43301287, 0.6250001), (-0.883883, 0.43301287, 0.8838834), (-0.62499964, 0.43301287, 1.0825316), (-0.32352355, 0.43301287, 1.207407), (9.4372346e-8, 0.43301287, 1.2499996), (0.32352376, 0.43301287, 1.2074069), (0.62499976, 0.43301287, 1.0825315), (0.88388324, 0.43301287, 0.88388324), (1.0825315, 0.43301287, 0.6249998), (1.2074069, 0.43301287, 0.3235237), (1.4330125, 0.25000036, -0.0000011160713), (1.3841835, 0.25000036, -0.37089196), (1.2410247, 0.25000036, -0.7165071), (1.0132922, 0.25000036, -1.0132935), (0.7165055, 0.25000036, -1.2410256), (0.3708902, 0.25000036, -1.3841839), (-6.662251e-7, 0.25000036, -1.4330125), (-0.37089148, 0.25000036, -1.3841835), (-0.71650666, 0.25000036, -1.241025), (-1.0132934, 0.25000036, -1.0132923), (-1.2410256, 0.25000036, -0.71650565), (-1.3841839, 0.25000036, -0.37089032), (-1.4330125, 0.25000036, 5.5803565e-7), (-1.3841836, 0.25000036, 0.3708914), (-1.241025, 0.25000036, 0.7165066), (-1.0132926, 0.25000036, 1.013293), (-0.716506, 0.25000036, 1.2410253), (-0.37089074, 0.25000036, 1.3841839), (1.0818943e-7, 0.25000036, 1.4330125), (0.37089097, 0.25000036, 1.3841838), (0.7165062, 0.25000036, 1.2410253), (1.0132928, 0.25000036, 1.0132928), (1.2410252, 0.25000036, 0.71650624), (1.3841838, 0.25000036, 0.37089092)] (
                    interpolation = "vertex"
                )
                uniform token subdivisionScheme = "none"
            }
        }

        def Scope "materials"
        {
            def Material "arnold_materialbuilder1"
            {
                token outputs:arnold:surface.connect = </instances_float64/Prototypes/materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

                def Shader "standard_surface1"
                {
                    uniform token info:id = "arnold:standard_surface"
                    string inputs:aov_id1 = ""
                    string inputs:aov_id2 = ""
                    string inputs:aov_id3 = ""
                    string inputs:aov_id4 = ""
                    string inputs:aov_id5 = ""
                    string inputs:aov_id6 = ""
                    string inputs:aov_id7 = ""
                    string inputs:aov_id8 = ""
                    float inputs:base = 0.8
                    color3f inputs:base_color = (0.493, 0.799, 1)
                    color3f inputs:base_color.connect = </instances_float64/Prototypes/materials/arnold_materialbuilder1/ramp_rgb1.outputs:rgb>
                    int inputs:caustics = 0
                    float inputs:coat = 0
                    float inputs:coat_affect_color = 0
                    float inputs:coat_affect_roughness = 0
                    float inputs:coat_anisotropy = 0
                    color3f inputs:coat_color = (1, 1, 1)
                    float inputs:coat_IOR = 1.5
                    vector3f inputs:coat_normal = (0, 0, 0)
                    float inputs:coat_rotation = 0
                    float inputs:coat_roughness = 0.1
                    int inputs:dielectric_priority = 0
                    float inputs:diffuse_roughness = 0
                    float inputs:emission = 0
                    color3f inputs:emission_color = (1, 1, 1)
                    int inputs:exit_to_background = 0
                    color3f inputs:id1 = (0, 0, 0)
                    color3f inputs:id2 = (0, 0, 0)
                    color3f inputs:id3 = (0, 0, 0)
                    color3f inputs:id4 = (0, 0, 0)
                    color3f inputs:id5 = (0, 0, 0)
                    color3f inputs:id6 = (0, 0, 0)
                    color3f inputs:id7 = (0, 0, 0)
                    color3f inputs:id8 = (0, 0, 0)
                    float inputs:indirect_diffuse = 1
                    float inputs:indirect_specular = 1
                    int inputs:internal_reflections = 1
                    float inputs:metalness = 0
                    vector3f inputs:normal = (0, 0, 0)
                    color3f inputs:opacity = (1, 1, 1)
                    float inputs:sheen = 0
                    color3f inputs:sheen_color = (1, 1, 1)
                    float inputs:sheen_roughness = 0.3
                    float inputs:specular = 1
                    float inputs:specular_anisotropy = 0
                    color3f inputs:specular_color = (1, 1, 1)
                    float inputs:specular_IOR = 1.5
                    float inputs:specular_rotation = 0
                    float inputs:specular_roughness = 0.2
                    float inputs:subsurface = 0
                    float inputs:subsurface_anisotropy = 0
                    color3f inputs:subsurface_color = (1, 1, 1)
                    color3f inputs:subsurface_radius = (1, 1, 1)
                    float inputs:subsurface_scale = 1
                    token inputs:subsurface_type = "randomwalk"
                    vector3f inputs:tangent = (0, 0, 0)
                    float inputs:thin_film_IOR = 1.5
                    float inputs:thin_film_thickness = 0
                    int inputs:thin_walled = 0
                    float inputs:transmission = 0
                    color3f inputs:transmission_color = (1, 1, 1)
                    float inputs:transmission_depth = 0
                    float inputs:transmission_dispersion = 0
                    float inputs:transmission_extra_roughness = 0
                    color3f inputs:transmission_scatter = (0, 0, 0)
                    float inputs:transmission_scatter_anisotropy = 0
                    int inputs:transmit_aovs = 0
                    token outputs:shader
                }

                def Shader "ramp_rgb1"
                {
                    uniform token info:id = "arnold:ramp_rgb"
                    color3f[] inputs:color = [(1, 0, 0), (0.5, 1, 0)]
                    float inputs:input = 0
                    float inputs:input.connect = </instances_float64/Prototypes/materials/arnold_materialbuilder1/user_data_float1.outputs:float>
                    int[] inputs:interpolation = [1, 1]
                    float[] inputs:position = [0, 1]
                    color3f inputs:ramp1c = (1, 0, 0)
                    int inputs:ramp1interp = 1
                    float inputs:ramp1pos = 0
                    color3f inputs:ramp2c = (0.5, 1, 0)
                    int inputs:ramp2interp = 1
                    float inputs:ramp2pos = 1
                    token inputs:type = "custom"
                    token inputs:use_implicit_uvs = "off"
                    string inputs:uvset = ""
                    int inputs:wrap_uvs = 0
                    vector3f outputs:rgb
                }

                def Shader "user_data_float1"
                {
                    uniform token info:id = "arnold:user_data_float"
                    string inputs:attribute = "myfloat"
                    float inputs:default = 0
                    float outputs:float
                }
            }
        }
    }
}

def Xform "lights"
{
    def DomeLight "domelight1"
    {
        color3f inputs:color = (1, 1, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        rel inputs:filters = None
        float inputs:intensity = 1
        bool inputs:normalize = 0
        rel inputs:portals = None
        float inputs:specular = 1
        asset inputs:texture:file = @@
        token inputs:texture:format = "automatic"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings1"
    {
        custom int arnold:global:AA_samples = 3
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            1: 1,
        }
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        rel products = None
        int2 resolution = (160, 120)
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 32.66517808322864, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}




