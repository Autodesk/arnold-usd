#usda 1.0
(
    defaultPrim = "viewport_camera"
    endTimeCode = 10
    framesPerSecond = 24
    startTimeCode = 0
    timeCodesPerSecond = 24
)

def ArnoldOptions "options"
{
    int arnold:AA_samples = 3
    int arnold:AA_seed = 0
    string arnold:background = "/background"
    string arnold:camera = "/viewport_camera"
    string arnold:color_manager = "/color_manager_ocio"
    int arnold:GI_diffuse_depth = 1
    int arnold:GI_specular_depth = 1
    int arnold:GI_transmission_depth = 8
    float arnold:meters_per_unit = 0.0254
    string arnold:name = "options"
    bool arnold:texture_automip = 0
    int arnold:threads = 20
    int arnold:xres = 1280
    int arnold:yres = 720
}

def ArnoldGaussianFilter "max_filter"
{
    string arnold:name = "max_filter"
}

def Camera "viewport_camera"
{
    float2 clippingRange = (0.0001, 1000000000000)
    float focusDistance = 0
    float horizontalAperture = 41.421356
    float[] primvars:arnold:aperture_size = [0]
    float[] primvars:arnold:fov = [30]
    float2[] primvars:arnold:lens_shift = [(0, 0)]
    float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
    vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
    vector3f[] primvars:arnold:position = [(0, 0, 0)]
    float2[] primvars:arnold:screen_window_max = [(1, 1)]
    float2[] primvars:arnold:screen_window_min = [(-1, -1)]
    vector3f[] primvars:arnold:up = [(0, 1, 0)]
    token projection = "perspective"
    double shutter:close = 0.5
    double shutter:open = -0.5
    float verticalAperture = 23.299513
    matrix4d xformOp:transform = ( (0.7071068286895752, -0.7071068286895752, 0, 0), (0.3535533845424652, 0.3535533845424652, 0.8660255670547485, 0), (-0.6123725175857544, -0.6123725175857544, 0.5, 0), (-169.0859375, -169.5145263671875, 85.30084991455078, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}

def ArnoldColorManagerOcio "color_manager_ocio"
{
    string arnold:color_space_linear = "scene-linear Rec.709-sRGB"
    string arnold:color_space_narrow = "sRGB"
}

def DomeLight "scene_skydome_light"
{
    color3f inputs:color = (0, 0, 0)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    float inputs:specular = 1
    token inputs:texture:format = "latlong"
    string primvars:arnold:aov = "Environment"
    float primvars:arnold:camera = 0
    bool primvars:arnold:normalize = 1
    token primvars:arnold:portal_mode = "interior_exterior"
    int primvars:arnold:resolution = 10
    float primvars:arnold:transmission = 0
}

def DistantLight "DefaultLight00"
{
    float inputs:angle = 0
    color3f inputs:color = (3.1415927, 3.1415927, 3.1415927)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    float inputs:specular = 1
    bool primvars:arnold:cast_shadows = 0
    bool primvars:arnold:cast_volumetric_shadows = 0
    vector3f[] primvars:arnold:direction = [(0.20046024, 0.5540137, -0.80801266)]
    bool primvars:arnold:normalize = 1
}

def Shader "background"
{
    uniform token info:id = "arnold:shuffle"
    float inputs:alpha = 0
    color3f inputs:color = (0, 0, 0)
    prepend color3f inputs:color.connect = </background_ray_switch.outputs:out>

    def Shader "user_data_rbg"
    {
        uniform token info:id = "arnold:user_data_rgb"
        color3f outputs:out
    }
}

def Shader "background_ray_switch"
{
    uniform token info:id = "arnold:ray_switch_rgba"
    color4f inputs:camera = (0, 0, 0, 1)
    prepend color4f inputs:camera.connect = </background/user_data_rbg.outputs:out>
    color4f inputs:diffuse_transmission = (0, 0, 0, 1)
    prepend color4f inputs:diffuse_transmission.connect = </background/user_data_rbg.outputs:out>
    color4f inputs:specular_transmission = (0, 0, 0, 1)
    prepend color4f inputs:specular_transmission.connect = </background/user_data_rbg.outputs:out>
    color4f outputs:out
}

def "Sphere" (
    references = @sphere_skin.usda@
)
{
    over "Bone001"
    {
        token visibility = "invisible"
    }

    over "Bones"
    {
        token visibility = "invisible"
    }
}

