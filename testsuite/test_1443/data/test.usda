#usda 1.0
(
    defaultPrim = "viewport_camera"
    endTimeCode = 10
    framesPerSecond = 24
    startTimeCode = -2
    timeCodesPerSecond = 24
)

def ArnoldGaussianFilter "max_filter"
{
    string arnold:name = "max_filter"
}

def ArnoldColorManagerOcio "color_manager_ocio"
{
    string arnold:color_space_linear = "sRGB"
    string arnold:color_space_narrow = "sRGB"
}

def DistantLight "DefaultLight00"
{
    float inputs:angle = 0
    color3f inputs:color = (3.1415927, 3.1415927, 3.1415927)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    float inputs:specular = 1
    bool primvars:arnold:cast_shadows = 0
    bool primvars:arnold:cast_volumetric_shadows = 0
    vector3f[] primvars:arnold:direction = [(0.20046024, 0.5540137, -0.80801266)]
    bool primvars:arnold:normalize = 1
    float3 xformOp:rotateXYZ = (165.87503, -0, -0)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
}

def Shader "background"
{
    uniform token info:id = "arnold:shuffle"
    float inputs:alpha = 0
    color3f inputs:color = (0, 0, 0)
    prepend color3f inputs:color.connect = </background_ray_switch.outputs:out>

    def Shader "user_data_rbg"
    {
        uniform token info:id = "arnold:user_data_rgb"
        color3f outputs:out
    }
}

def Shader "background_ray_switch"
{
    uniform token info:id = "arnold:ray_switch_rgba"
    color4f inputs:camera = (0, 0, 0, 1)
    prepend color4f inputs:camera.connect = </background/user_data_rbg.outputs:out>
    color4f inputs:diffuse_transmission = (0, 0, 0, 1)
    prepend color4f inputs:diffuse_transmission.connect = </background/user_data_rbg.outputs:out>
    color4f inputs:specular_transmission = (0, 0, 0, 1)
    prepend color4f inputs:specular_transmission.connect = </background/user_data_rbg.outputs:out>
    color4f outputs:out
}

def "Sphere" (
    references = @sphere_skin.usda@
)
{
    over "Bone001"
    {
        token visibility = "invisible"
    }

    over "Bones"
    {
        token visibility = "invisible"
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings3"
    {
        custom int arnold:global:AA_samples = 1
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            224: 224,
        }
        token aspectRatioConformPolicy = "expandAperture"
        rel camera = </Cameras/camera>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default"]
        bool instantaneousShutter = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (160, 120)
    }
}

def "Cameras"
{
    def Camera "camera"
    {
        float4[] clippingPlanes.timeSamples = {
            3: [],
        }
        float2 clippingRange.timeSamples = {
            3: (1, 1000000),
        }
        float focalLength.timeSamples = {
            3: 18.147562,
        }
        float focusDistance.timeSamples = {
            3: 63.17077,
        }
        float fStop.timeSamples = {
            3: 0,
        }
        float horizontalAperture.timeSamples = {
            3: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            3: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            3: "perspective",
        }
        double shutter:close = 1
        double shutter:open = -1
        float verticalAperture.timeSamples = {
            3: 11.964843,
        }
        float verticalApertureOffset.timeSamples = {
            3: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            3: ( (-0.9993908270190959, -2.5695591487906455e-15, 0.03489949670249861, 0), (0.004253178748300873, 0.9925461516413228, 0.1217951038939391, 0), (-0.03463936114628434, 0.12186934340514195, -0.9919415193434425, 0), (-63.89259550865278, -17.11481681747386, -93.92284138310275, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

