#usda 1.0
(
    customLayerData = {
        timecode[] timeCodeArray = [0]
    }
    defaultPrim = "Cube"
    endFrame = 0
    framesPerSecond = 30
    startFrame = 0
    timeCodesPerSecond = 30
)

def Mesh "Cube"
{
    uniform bool doubleSided = 1
    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 2, 3, 1, 2, 4, 5, 3, 4, 6, 7, 5, 6, 0, 1, 7, 1, 3, 5, 7, 6, 4, 2, 0]
    rel material:binding = </mtl/mat/standard_surface>
    uniform token orientation = "rightHanded"
    point3f[] points = [(-1, -1, 1), (-1, 1, 1), (1, -1, 1), (1, 1, 1), (1, -1, -1), (1, 1, -1), (-1, -1, -1), (-1, 1, -1)]
    float primvars:arnold:disp_height = 0.1
    uint primvars:arnold:id = 192429043
    uchar primvars:arnold:subdiv_iterations = 1
    vector3f[] primvars:normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, -0), (1, 0, -0), (1, 0, -0), (1, 0, -0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (-1, 0, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, 1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0), (0, -1, -0)] (
        elementSize = 24
        interpolation = "faceVarying"
    )
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    float2[] primvars:st = [(0, 0), (0, 1), (1, 0), (1, 1)] (
        elementSize = 4
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1, 0, 2, 3, 1]
    uniform token subdivisionScheme = "none"
}

def "mtl"
{
    def "mat"
    {
        def Material "standard_surface"
        {
            token outputs:arnold:surface.connect = </mtl/mat/standard_surface/standard_surface.outputs:surface>

            def Shader "standard_surface"
            {
                uniform token info:id = "arnold:standard_surface"
                string inputs:aov_id1 = "id1"
                string inputs:aov_id2 = "id2"
                string inputs:aov_id3 = "id3"
                string inputs:aov_id4 = "id4"
                string inputs:aov_id5 = "id5"
                string inputs:aov_id6 = "id6"
                string inputs:aov_id7 = "id7"
                string inputs:aov_id8 = "id8"
                color3f inputs:base_color = (0.8, 0.8, 0.8)
                prepend color3f inputs:base_color.connect = </mtl/mat/standard_surface/uvgrid.outputs:out>
                color3f inputs:subsurface_radius = (0.1, 0.1, 0.1)
                token outputs:surface
            }

            def Shader "uvgrid"
            {
                uniform token info:id = "arnold:image"
                asset inputs:filename = @uvgrid.jpg@
                color4f inputs:missing_texture_color = (0, 0, 0, 1)
                color4f outputs:out
            }
        }
    }
}

