#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def PointInstancer "instancer1" (
    kind = "group"
)
{
    float3[] extent.timeSamples = {
        1: [(-5.44, -0.44, -5.44), (5.44, 0.44, 5.44)],
    }
    int64[] invisibleIds = []
    quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
    point3f[] positions = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)]
    int[] primvars:index (
        interpolation = "varying"
    )
    int[] primvars:index.timeSamples = {
        1: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    }
    float3[] primvars:sphereCOL (
        interpolation = "varying"
    )
    float3[] primvars:sphereCOL.timeSamples = {
        1: [(0.4172318, 0.62565434, 0.15674162), (0.0029251575, 0.864668, 0.38891935), (0.8134322, 0.12721193, 0.3018682), (0.26238048, 0.7365496, 0.11614144), (0.0022482872, 0.19705522, 0.20787787), (0.18949378, 0.9932461, 0.7956027), (0.11619651, 0.8678963, 0.9862462), (0.6177759, 0.3251351, 0.3887856), (0.9162111, 0.19502723, 0.57043004), (0.5199168, 0.3331176, 0.44702578), (0.09368181, 0.5853981, 0.6025264), (0.11982691, 0.7589636, 0.7279576), (0.9744946, 0.45167446, 0.29960525), (0.9223701, 0.9178548, 0.104334235), (0.1491077, 0.3521992, 0.2348814), (0.0862304, 0.5187421, 0.03500974), (0.80475235, 0.27194202, 0.15674806), (0.86910784, 0.5982485, 0.42088783), (0.8762624, 0.5820662, 0.57227325), (0.024951339, 0.9939649, 0.3094641), (0.74814475, 0.49984932, 0.55527294), (0.3745625, 0.5152894, 0.9983649), (0.16958499, 0.32152903, 0.97679424), (0.35533643, 0.23410046, 0.9366584), (0.67235017, 0.53057206, 0.31959772), (0.9425061, 0.791134, 0.18786001), (0.60025203, 0.3808329, 0.7672149), (0.39106798, 0.29907453, 0.89985156), (0.8550682, 0.2737044, 0.6991904), (0.05255854, 0.872756, 0.05491531), (0.9929136, 0.38313842, 0.3423525), (0.722306, 0.28326952, 0.0721941), (0.95017123, 0.63711894, 0.26305676), (0.93023956, 0.8674481, 0.9013177), (0.5721128, 0.9230429, 0.8389549), (0.9952482, 0.37442565, 0.721274), (0.21738088, 0.7782638, 0.43064272), (0.93819416, 0.49380708, 0.092324376), (0.33784437, 0.26976526, 0.88260055), (0.9948045, 0.82971716, 0.82133806), (0.28117776, 0.27638543, 0.31888247), (0.21284902, 0.38341212, 0.9303833), (0.79645276, 0.3983003, 0.65719366), (0.3431281, 0.14271379, 0.5300647), (0.582495, 0.3136264, 0.86453867), (0.86238384, 0.33218658, 0.7333844), (0.8141068, 0.024714708, 0.11668217), (0.16465974, 0.11809647, 0.3949151), (0.6494167, 0.17457545, 0.06444454), (0.39164162, 0.12904155, 0.7570498), (0.3589337, 0.96250546, 0.2672515), (0.30209255, 0.47222793, 0.06368756), (0.9353763, 0.08009958, 0.6246494), (0.9642974, 0.0195508, 0.66271055), (0.7435914, 0.38816595, 0.7960161), (0.69675195, 0.9099901, 0.09181464), (0.8771876, 0.5727923, 0.9560462), (0.44762373, 0.75549066, 0.95874953), (0.14282644, 0.043431044, 0.9246918), (0.07970464, 0.23651958, 0.6125771), (0.5342611, 0.8366716, 0.6464869), (0.004083395, 0.7798716, 0.6134701), (0.036474943, 0.32156718, 0.4733839), (0.8283776, 0.098906755, 0.63391316), (0.11082137, 0.80155945, 0.6073874), (0.43084478, 0.7805284, 0.9453733), (0.21854389, 0.6305411, 0.268304), (0.12870312, 0.4232434, 0.09290433), (0.7063519, 0.22363186, 0.6866139), (0.6552845, 0.33905315, 0.31795013), (0.5867262, 0.27598083, 0.8581784), (0.024151087, 0.95456994, 0.38918734), (0.7420248, 0.6625993, 0.008547425), (0.86900795, 0.3165543, 0.42622197), (0.38192856, 0.50832605, 0.2912029), (0.86179256, 0.13504684, 0.7076771), (0.85443115, 0.8806571, 0.5876219), (0.6783936, 0.97778904, 0.17589903), (0.7528448, 0.87497604, 0.35800672), (0.51347065, 0.600026, 0.16353917), (0.32063746, 0.94243777, 0.09255314), (0.6306287, 0.11203337, 0.20726907), (0.5754781, 0.512812, 0.29172015), (0.0009969473, 0.3104875, 0.08734381), (0.0777086, 0.7774656, 0.7645041), (0.40565705, 0.17293656, 0.09221125), (0.3948797, 0.9973695, 0.3800913), (0.26823175, 0.3196962, 0.16408789), (0.65427995, 0.19604981, 0.67588663), (0.6638756, 0.36632526, 0.41888642), (0.012147427, 0.56207216, 0.025363684), (0.47290123, 0.7784951, 0.37871754), (0.7486918, 0.08063042, 0.2193799), (0.81005454, 0.90105116, 0.055015564), (0.5057571, 0.19274294, 0.31527042), (0.71400034, 0.28985882, 0.11592376), (0.3447945, 0.95154774, 0.8718715), (0.981385, 0.72160876, 0.68466663), (0.53005993, 0.8778815, 0.6154436), (0.743237, 0.46516263, 0.70157504)],
    }
    int[] protoIndices = [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]
    rel prototypes = [
        </instancer1/Prototypes/cube>,
        </instancer1/Prototypes/sphere>,
    ]

    def Scope "Prototypes" (
        kind = "group"
    )
    {
        def Xform "sphere" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            kind = "component"
        )
        {
            rel material:binding = </instancer1/Prototypes/sphere/materials/arnold_materialbuilder1>
            matrix4d xformOp:transform:transform2 = ( (0.44, 0, 0, 0), (0, 0.44, 0, 0), (0, 0, 0.44, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform:transform2"]

            def Scope "geo_GRP" (
                kind = "group"
            )
            {
                def Sphere "sphere_GEO"
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    double radius = 1
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Scope "materials"
            {
                def Material "arnold_materialbuilder1"
                {
                    token outputs:arnold:surface.connect = </instancer1/Prototypes/sphere/materials/arnold_materialbuilder1/user_data_rgb1.outputs:shader>

                    def Shader "user_data_rgb1"
                    {
                        uniform token info:id = "arnold:user_data_rgb"
                        string inputs:attribute = "sphereCOL"
                        color3f inputs:default = (0, 0, 0)
                        token outputs:shader
                    }
                }
            }
        }

        def Xform "cube" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            kind = "component"
        )
        {
            rel material:binding = </instancer1/Prototypes/cube/materials/arnold_materialbuilder1>
            matrix4d xformOp:transform:transform1 = ( (0.44, 0, 0, 0), (0, 0.44, 0, 0), (0, 0, 0.44, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform:transform1"]

            def Scope "geo_GRP" (
                kind = "group"
            )
            {
                def Cube "cube_GEO"
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    double size = 2
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Scope "materials"
            {
                def Material "arnold_materialbuilder1"
                {
                    token outputs:arnold:surface.connect = </instancer1/Prototypes/cube/materials/arnold_materialbuilder1/add1.outputs:shader>

                    def Shader "add1"
                    {
                        uniform token info:id = "arnold:add"
                        color3f inputs:input1 = (0, 0, 0)
                        color3f inputs:input2 = (0, 0, 0)
                        token outputs:shader
                    }
                }
            }
        }
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.9300755951084595, 1.9428902930940237e-16, -0.3673681904896569, 0), (-0.19064731203701327, 0.8548019691974211, -0.48266675446862184, 0), (0.3140270526510519, 0.5189543269462268, 0.7950304502011745, 0), (11.644482113918212, 19.13139406872139, 30.754597307885643, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{    
    def RenderSettings "rendersettings"
    {
        custom int arnold:global:AA_seed
        int arnold:global:AA_seed.timeSamples = {
            1: 1,
        }
        
        rel camera = </cameras/camera1>
        token[] includedPurposes = ["default"]
        token[] materialBindingPurposes = ["full", "allPurpose"]
        rel products = None
        int2 resolution = (1920, 1080)
    }
}


