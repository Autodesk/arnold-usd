#usda 1.0
(
    defaultPrim = "torus1"
    endTimeCode = 1003
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1001
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "torus1" (
    active = true
)
{
    token visibility = "invisible"
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-0.75, -0.25, -0.75), (0.75, 0.25, 0.75)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 24, 25, 1, 1, 25, 26, 2, 2, 26, 27, 3, 3, 27, 28, 4, 4, 28, 29, 5, 5, 29, 30, 6, 6, 30, 31, 7, 7, 31, 32, 8, 8, 32, 33, 9, 9, 33, 34, 10, 10, 34, 35, 11, 11, 35, 36, 12, 12, 36, 37, 13, 13, 37, 38, 14, 14, 38, 39, 15, 15, 39, 40, 16, 16, 40, 41, 17, 17, 41, 42, 18, 18, 42, 43, 19, 19, 43, 44, 20, 20, 44, 45, 21, 21, 45, 46, 22, 22, 46, 47, 23, 23, 47, 24, 0, 24, 48, 49, 25, 25, 49, 50, 26, 26, 50, 51, 27, 27, 51, 52, 28, 28, 52, 53, 29, 29, 53, 54, 30, 30, 54, 55, 31, 31, 55, 56, 32, 32, 56, 57, 33, 33, 57, 58, 34, 34, 58, 59, 35, 35, 59, 60, 36, 36, 60, 61, 37, 37, 61, 62, 38, 38, 62, 63, 39, 39, 63, 64, 40, 40, 64, 65, 41, 41, 65, 66, 42, 42, 66, 67, 43, 43, 67, 68, 44, 44, 68, 69, 45, 45, 69, 70, 46, 46, 70, 71, 47, 47, 71, 48, 24, 48, 72, 73, 49, 49, 73, 74, 50, 50, 74, 75, 51, 51, 75, 76, 52, 52, 76, 77, 53, 53, 77, 78, 54, 54, 78, 79, 55, 55, 79, 80, 56, 56, 80, 81, 57, 57, 81, 82, 58, 58, 82, 83, 59, 59, 83, 84, 60, 60, 84, 85, 61, 61, 85, 86, 62, 62, 86, 87, 63, 63, 87, 88, 64, 64, 88, 89, 65, 65, 89, 90, 66, 66, 90, 91, 67, 67, 91, 92, 68, 68, 92, 93, 69, 69, 93, 94, 70, 70, 94, 95, 71, 71, 95, 72, 48, 72, 96, 97, 73, 73, 97, 98, 74, 74, 98, 99, 75, 75, 99, 100, 76, 76, 100, 101, 77, 77, 101, 102, 78, 78, 102, 103, 79, 79, 103, 104, 80, 80, 104, 105, 81, 81, 105, 106, 82, 82, 106, 107, 83, 83, 107, 108, 84, 84, 108, 109, 85, 85, 109, 110, 86, 86, 110, 111, 87, 87, 111, 112, 88, 88, 112, 113, 89, 89, 113, 114, 90, 90, 114, 115, 91, 91, 115, 116, 92, 92, 116, 117, 93, 93, 117, 118, 94, 94, 118, 119, 95, 95, 119, 96, 72, 96, 120, 121, 97, 97, 121, 122, 98, 98, 122, 123, 99, 99, 123, 124, 100, 100, 124, 125, 101, 101, 125, 126, 102, 102, 126, 127, 103, 103, 127, 128, 104, 104, 128, 129, 105, 105, 129, 130, 106, 106, 130, 131, 107, 107, 131, 132, 108, 108, 132, 133, 109, 109, 133, 134, 110, 110, 134, 135, 111, 111, 135, 136, 112, 112, 136, 137, 113, 113, 137, 138, 114, 114, 138, 139, 115, 115, 139, 140, 116, 116, 140, 141, 117, 117, 141, 142, 118, 118, 142, 143, 119, 119, 143, 120, 96, 120, 144, 145, 121, 121, 145, 146, 122, 122, 146, 147, 123, 123, 147, 148, 124, 124, 148, 149, 125, 125, 149, 150, 126, 126, 150, 151, 127, 127, 151, 152, 128, 128, 152, 153, 129, 129, 153, 154, 130, 130, 154, 155, 131, 131, 155, 156, 132, 132, 156, 157, 133, 133, 157, 158, 134, 134, 158, 159, 135, 135, 159, 160, 136, 136, 160, 161, 137, 137, 161, 162, 138, 138, 162, 163, 139, 139, 163, 164, 140, 140, 164, 165, 141, 141, 165, 166, 142, 142, 166, 167, 143, 143, 167, 144, 120, 144, 168, 169, 145, 145, 169, 170, 146, 146, 170, 171, 147, 147, 171, 172, 148, 148, 172, 173, 149, 149, 173, 174, 150, 150, 174, 175, 151, 151, 175, 176, 152, 152, 176, 177, 153, 153, 177, 178, 154, 154, 178, 179, 155, 155, 179, 180, 156, 156, 180, 181, 157, 157, 181, 182, 158, 158, 182, 183, 159, 159, 183, 184, 160, 160, 184, 185, 161, 161, 185, 186, 162, 162, 186, 187, 163, 163, 187, 188, 164, 164, 188, 189, 165, 165, 189, 190, 166, 166, 190, 191, 167, 167, 191, 168, 144, 168, 192, 193, 169, 169, 193, 194, 170, 170, 194, 195, 171, 171, 195, 196, 172, 172, 196, 197, 173, 173, 197, 198, 174, 174, 198, 199, 175, 175, 199, 200, 176, 176, 200, 201, 177, 177, 201, 202, 178, 178, 202, 203, 179, 179, 203, 204, 180, 180, 204, 205, 181, 181, 205, 206, 182, 182, 206, 207, 183, 183, 207, 208, 184, 184, 208, 209, 185, 185, 209, 210, 186, 186, 210, 211, 187, 187, 211, 212, 188, 188, 212, 213, 189, 189, 213, 214, 190, 190, 214, 215, 191, 191, 215, 192, 168, 192, 216, 217, 193, 193, 217, 218, 194, 194, 218, 219, 195, 195, 219, 220, 196, 196, 220, 221, 197, 197, 221, 222, 198, 198, 222, 223, 199, 199, 223, 224, 200, 200, 224, 225, 201, 201, 225, 226, 202, 202, 226, 227, 203, 203, 227, 228, 204, 204, 228, 229, 205, 205, 229, 230, 206, 206, 230, 231, 207, 207, 231, 232, 208, 208, 232, 233, 209, 209, 233, 234, 210, 210, 234, 235, 211, 211, 235, 236, 212, 212, 236, 237, 213, 213, 237, 238, 214, 214, 238, 239, 215, 215, 239, 216, 192, 216, 240, 241, 217, 217, 241, 242, 218, 218, 242, 243, 219, 219, 243, 244, 220, 220, 244, 245, 221, 221, 245, 246, 222, 222, 246, 247, 223, 223, 247, 248, 224, 224, 248, 249, 225, 225, 249, 250, 226, 226, 250, 251, 227, 227, 251, 252, 228, 228, 252, 253, 229, 229, 253, 254, 230, 230, 254, 255, 231, 231, 255, 256, 232, 232, 256, 257, 233, 233, 257, 258, 234, 234, 258, 259, 235, 235, 259, 260, 236, 236, 260, 261, 237, 237, 261, 262, 238, 238, 262, 263, 239, 239, 263, 240, 216, 240, 264, 265, 241, 241, 265, 266, 242, 242, 266, 267, 243, 243, 267, 268, 244, 244, 268, 269, 245, 245, 269, 270, 246, 246, 270, 271, 247, 247, 271, 272, 248, 248, 272, 273, 249, 249, 273, 274, 250, 250, 274, 275, 251, 251, 275, 276, 252, 252, 276, 277, 253, 253, 277, 278, 254, 254, 278, 279, 255, 255, 279, 280, 256, 256, 280, 281, 257, 257, 281, 282, 258, 258, 282, 283, 259, 259, 283, 284, 260, 260, 284, 285, 261, 261, 285, 286, 262, 262, 286, 287, 263, 263, 287, 264, 240, 264, 0, 1, 265, 265, 1, 2, 266, 266, 2, 3, 267, 267, 3, 4, 268, 268, 4, 5, 269, 269, 5, 6, 270, 270, 6, 7, 271, 271, 7, 8, 272, 272, 8, 9, 273, 273, 9, 10, 274, 274, 10, 11, 275, 275, 11, 12, 276, 276, 12, 13, 277, 277, 13, 14, 278, 278, 14, 15, 279, 279, 15, 16, 280, 280, 16, 17, 281, 281, 17, 18, 282, 282, 18, 19, 283, 283, 19, 20, 284, 284, 20, 21, 285, 285, 21, 22, 286, 286, 22, 23, 287, 287, 23, 0, 264]
        uniform token orientation = "rightHanded"
        point3f[] points = [(0.75, -2.1855694e-8, -5.8412155e-7), (0.7244442, -2.1855694e-8, -0.19411482), (0.64951885, -2.1855694e-8, -0.37500045), (0.53032976, -2.1855694e-8, -0.5303304), (0.3749996, -2.1855694e-8, -0.64951926), (0.19411391, -2.1855694e-8, -0.72444445), (-3.486842e-7, -2.1855694e-8, -0.75), (-0.19411457, -2.1855694e-8, -0.72444427), (-0.37500024, -2.1855694e-8, -0.6495189), (-0.5303304, -2.1855694e-8, -0.5303298), (-0.6495192, -2.1855694e-8, -0.3749997), (-0.72444445, -2.1855694e-8, -0.19411397), (-0.75, -2.1855694e-8, 2.9206078e-7), (-0.7244443, -2.1855694e-8, 0.19411454), (-0.64951897, -2.1855694e-8, 0.37500018), (-0.53032994, -2.1855694e-8, 0.5303302), (-0.37499988, -2.1855694e-8, 0.64951915), (-0.1941142, -2.1855694e-8, 0.7244444), (5.6623428e-8, -2.1855694e-8, 0.75), (0.1941143, -2.1855694e-8, 0.7244444), (0.37499997, -2.1855694e-8, 0.6495191), (0.53033006, -2.1855694e-8, 0.53033006), (0.649519, -2.1855694e-8, 0.375), (0.7244444, -2.1855694e-8, 0.19411428), (0.7165063, -0.12500004, -5.580357e-7), (0.6920918, -0.12500004, -0.185446), (0.6205124, -0.12500004, -0.35825357), (0.50664616, -0.12500004, -0.5066468), (0.3582528, -0.12500004, -0.62051284), (0.18544511, -0.12500004, -0.692092), (-3.3311258e-7, -0.12500004, -0.7165063), (-0.18544576, -0.12500004, -0.6920918), (-0.35825336, -0.12500004, -0.62051255), (-0.50664675, -0.12500004, -0.5066462), (-0.62051284, -0.12500004, -0.35825285), (-0.692092, -0.12500004, -0.18544517), (-0.7165063, -0.12500004, 2.7901785e-7), (-0.6920919, -0.12500004, 0.18544571), (-0.62051255, -0.12500004, 0.35825333), (-0.50664634, -0.12500004, 0.5066466), (-0.35825303, -0.12500004, 0.6205127), (-0.18544538, -0.12500004, 0.692092), (5.4094723e-8, -0.12500004, 0.7165063), (0.1854455, -0.12500004, 0.69209194), (0.35825312, -0.12500004, 0.62051266), (0.50664645, -0.12500004, 0.50664645), (0.62051266, -0.12500004, 0.35825315), (0.69209194, -0.12500004, 0.18544547), (0.625, -0.21650636, -4.8676793e-7), (0.6037035, -0.21650636, -0.16176236), (0.54126567, -0.21650636, -0.31250036), (0.44194147, -0.21650636, -0.44194204), (0.31249967, -0.21650636, -0.5412661), (0.16176158, -0.21650636, -0.60370374), (-2.9057017e-7, -0.21650636, -0.625), (-0.16176215, -0.21650636, -0.60370356), (-0.31250018, -0.21650636, -0.5412657), (-0.44194198, -0.21650636, -0.4419415), (-0.541266, -0.21650636, -0.31249973), (-0.60370374, -0.21650636, -0.16176164), (-0.625, -0.21650636, 2.4338397e-7), (-0.6037036, -0.21650636, 0.1617621), (-0.5412658, -0.21650636, 0.31250015), (-0.44194162, -0.21650636, 0.44194186), (-0.3124999, -0.21650636, 0.54126596), (-0.16176182, -0.21650636, 0.6037037), (4.7186187e-8, -0.21650636, 0.625), (0.16176192, -0.21650636, 0.6037036), (0.31249997, -0.21650636, 0.5412659), (0.44194174, -0.21650636, 0.44194174), (0.54126585, -0.21650636, 0.3125), (0.6037036, -0.21650636, 0.16176191), (0.5, -0.25, -3.8941437e-7), (0.48296282, -0.25, -0.12940988), (0.43301255, -0.25, -0.2500003), (0.35355318, -0.25, -0.35355362), (0.24999975, -0.25, -0.43301284), (0.12940927, -0.25, -0.48296297), (-2.3245614e-7, -0.25, -0.5), (-0.12940972, -0.25, -0.48296285), (-0.25000015, -0.25, -0.4330126), (-0.3535536, -0.25, -0.3535532), (-0.4330128, -0.25, -0.24999979), (-0.48296297, -0.25, -0.12940931), (-0.5, -0.25, 1.9470718e-7), (-0.48296288, -0.25, 0.12940969), (-0.43301263, -0.25, 0.25000012), (-0.3535533, -0.25, 0.35355347), (-0.24999993, -0.25, 0.43301275), (-0.12940946, -0.25, 0.48296294), (3.774895e-8, -0.25, 0.5), (0.12940954, -0.25, 0.4829629), (0.24999999, -0.25, 0.43301272), (0.35355338, -0.25, 0.35355338), (0.4330127, -0.25, 0.25), (0.4829629, -0.25, 0.12940952), (0.37500003, -0.21650636, -2.920608e-7), (0.36222214, -0.21650636, -0.09705742), (0.32475942, -0.21650636, -0.18750024), (0.2651649, -0.21650636, -0.26516524), (0.18749982, -0.21650636, -0.32475966), (0.09705696, -0.21650636, -0.36222225), (-1.7434212e-7, -0.21650636, -0.37500003), (-0.0970573, -0.21650636, -0.36222216), (-0.18750013, -0.21650636, -0.32475948), (-0.2651652, -0.21650636, -0.2651649), (-0.32475963, -0.21650636, -0.18749985), (-0.36222225, -0.21650636, -0.09705699), (-0.37500003, -0.21650636, 1.460304e-7), (-0.3622222, -0.21650636, 0.097057275), (-0.3247595, -0.21650636, 0.1875001), (-0.265165, -0.21650636, 0.26516512), (-0.18749996, -0.21650636, 0.3247596), (-0.097057104, -0.21650636, 0.36222222), (2.8311716e-8, -0.21650636, 0.37500003), (0.09705716, -0.21650636, 0.3622222), (0.1875, -0.21650636, 0.32475957), (0.26516506, -0.21650636, 0.26516506), (0.32475954, -0.21650636, 0.18750001), (0.3622222, -0.21650636, 0.09705715), (0.28349367, -0.12500004, -2.2079301e-7), (0.2738338, -0.12500004, -0.073373765), (0.24551263, -0.12500004, -0.141747), (0.20046018, -0.12500004, -0.20046043), (0.14174668, -0.12500004, -0.2455128), (0.073373415, -0.12500004, -0.27383387), (-1.317997e-7, -0.12500004, -0.28349367), (-0.07337367, -0.12500004, -0.2738338), (-0.14174692, -0.12500004, -0.24551266), (-0.2004604, -0.12500004, -0.2004602), (-0.24551278, -0.12500004, -0.14174671), (-0.27383387, -0.12500004, -0.073373444), (-0.28349367, -0.12500004, 1.10396506e-7), (-0.27383384, -0.12500004, 0.07337365), (-0.24551268, -0.12500004, 0.14174691), (-0.20046024, -0.12500004, 0.20046034), (-0.14174679, -0.12500004, 0.24551275), (-0.07337353, -0.12500004, 0.27383387), (2.1403176e-8, -0.12500004, 0.28349367), (0.07337357, -0.12500004, 0.27383384), (0.14174682, -0.12500004, 0.24551272), (0.20046028, -0.12500004, 0.20046028), (0.24551271, -0.12500004, 0.14174683), (0.27383384, -0.12500004, 0.07337356), (0.25, -7.54979e-8, -1.9470718e-7), (0.24148141, -7.54979e-8, -0.06470494), (0.21650627, -7.54979e-8, -0.12500015), (0.17677659, -7.54979e-8, -0.17677681), (0.12499987, -7.54979e-8, -0.21650642), (0.064704634, -7.54979e-8, -0.24148148), (-1.1622807e-7, -7.54979e-8, -0.25), (-0.06470486, -7.54979e-8, -0.24148142), (-0.12500007, -7.54979e-8, -0.2165063), (-0.1767768, -7.54979e-8, -0.1767766), (-0.2165064, -7.54979e-8, -0.124999896), (-0.24148148, -7.54979e-8, -0.06470466), (-0.25, -7.54979e-8, 9.735359e-8), (-0.24148144, -7.54979e-8, 0.06470484), (-0.21650632, -7.54979e-8, 0.12500006), (-0.17677665, -7.54979e-8, 0.17677674), (-0.12499996, -7.54979e-8, 0.21650638), (-0.06470473, -7.54979e-8, 0.24148147), (1.8874475e-8, -7.54979e-8, 0.25), (0.06470477, -7.54979e-8, 0.24148145), (0.12499999, -7.54979e-8, 0.21650636), (0.17677669, -7.54979e-8, 0.17677669), (0.21650635, -7.54979e-8, 0.125), (0.24148145, -7.54979e-8, 0.06470476), (0.28349358, 0.12499991, -2.2079294e-7), (0.27383372, 0.12499991, -0.07337374), (0.24551255, 0.12499991, -0.14174695), (0.2004601, 0.12499991, -0.20046036), (0.14174664, 0.12499991, -0.24551272), (0.07337339, 0.12499991, -0.2738338), (-1.3179965e-7, 0.12499991, -0.28349358), (-0.073373646, 0.12499991, -0.27383372), (-0.14174688, 0.12499991, -0.24551259), (-0.20046034, 0.12499991, -0.20046012), (-0.24551271, 0.12499991, -0.14174667), (-0.2738338, 0.12499991, -0.07337342), (-0.28349358, 0.12499991, 1.1039647e-7), (-0.27383375, 0.12499991, 0.07337363), (-0.2455126, 0.12499991, 0.14174686), (-0.20046018, 0.12499991, 0.20046028), (-0.14174674, 0.12499991, 0.24551266), (-0.073373504, 0.12499991, 0.27383378), (2.140317e-8, 0.12499991, 0.28349358), (0.07337355, 0.12499991, 0.27383375), (0.14174677, 0.12499991, 0.24551265), (0.20046023, 0.12499991, 0.20046023), (0.24551263, 0.12499991, 0.14174679), (0.27383375, 0.12499991, 0.073373534), (0.37499988, 0.21650629, -2.920607e-7), (0.362222, 0.21650629, -0.09705738), (0.3247593, 0.21650629, -0.18750016), (0.2651648, 0.21650629, -0.26516512), (0.18749975, 0.21650629, -0.32475954), (0.09705692, 0.21650629, -0.3622221), (-1.7434205e-7, 0.21650629, -0.37499988), (-0.09705725, 0.21650629, -0.36222202), (-0.18750004, 0.21650629, -0.32475936), (-0.26516512, 0.21650629, -0.26516482), (-0.3247595, 0.21650629, -0.18749979), (-0.3622221, 0.21650629, -0.097056955), (-0.37499988, 0.21650629, 1.4603035e-7), (-0.36222205, 0.21650629, 0.09705723), (-0.32475936, 0.21650629, 0.18750003), (-0.26516488, 0.21650629, 0.26516503), (-0.18749988, 0.21650629, 0.32475945), (-0.09705707, 0.21650629, 0.36222208), (2.8311703e-8, 0.21650629, 0.37499988), (0.09705712, 0.21650629, 0.36222208), (0.18749993, 0.21650629, 0.32475945), (0.26516494, 0.21650629, 0.26516494), (0.32475942, 0.21650629, 0.18749994), (0.36222208, 0.21650629, 0.09705711), (0.49999985, 0.25, -3.8941425e-7), (0.48296267, 0.25, -0.12940983), (0.43301243, 0.25, -0.2500002), (0.35355306, 0.25, -0.3535535), (0.24999967, 0.25, -0.43301272), (0.12940922, 0.25, -0.48296282), (-2.3245607e-7, 0.25, -0.49999985), (-0.12940967, 0.25, -0.4829627), (-0.25000006, 0.25, -0.4330125), (-0.35355347, 0.25, -0.3535531), (-0.4330127, 0.25, -0.24999972), (-0.48296282, 0.25, -0.12940927), (-0.49999985, 0.25, 1.9470713e-7), (-0.48296273, 0.25, 0.12940964), (-0.43301252, 0.25, 0.25000003), (-0.35355318, 0.25, 0.35355335), (-0.24999985, 0.25, 0.43301263), (-0.12940942, 0.25, 0.4829628), (3.774894e-8, 0.25, 0.49999985), (0.12940949, 0.25, 0.48296276), (0.24999991, 0.25, 0.4330126), (0.35355327, 0.25, 0.35355327), (0.43301257, 0.25, 0.24999993), (0.48296276, 0.25, 0.12940948), (0.6249998, 0.21650644, -4.867678e-7), (0.6037033, 0.21650644, -0.1617623), (0.54126555, 0.21650644, -0.31250027), (0.44194135, 0.21650644, -0.44194192), (0.31249958, 0.21650644, -0.5412659), (0.16176154, 0.21650644, -0.60370356), (-2.9057009e-7, 0.21650644, -0.6249998), (-0.1617621, 0.21650644, -0.6037034), (-0.3125001, 0.21650644, -0.5412656), (-0.44194186, 0.21650644, -0.44194138), (-0.54126585, 0.21650644, -0.31249964), (-0.60370356, 0.21650644, -0.1617616), (-0.6249998, 0.21650644, 2.433839e-7), (-0.60370344, 0.21650644, 0.16176206), (-0.54126567, 0.21650644, 0.31250006), (-0.4419415, 0.21650644, 0.4419417), (-0.31249982, 0.21650644, 0.5412658), (-0.16176178, 0.21650644, 0.6037035), (4.7186173e-8, 0.21650644, 0.6249998), (0.16176188, 0.21650644, 0.60370344), (0.31249988, 0.21650644, 0.5412657), (0.44194162, 0.21650644, 0.44194162), (0.5412657, 0.21650644, 0.3124999), (0.60370344, 0.21650644, 0.16176185), (0.71650624, 0.12500018, -5.5803565e-7), (0.69209176, 0.12500018, -0.18544598), (0.62051237, 0.12500018, -0.35825354), (0.5066461, 0.12500018, -0.50664675), (0.35825276, 0.12500018, -0.6205128), (0.1854451, 0.12500018, -0.69209194), (-3.3311255e-7, 0.12500018, -0.71650624), (-0.18544574, 0.12500018, -0.69209176), (-0.35825333, 0.12500018, -0.6205125), (-0.5066467, 0.12500018, -0.50664616), (-0.6205128, 0.12500018, -0.35825282), (-0.69209194, 0.12500018, -0.18544516), (-0.71650624, 0.12500018, 2.7901783e-7), (-0.6920918, 0.12500018, 0.1854457), (-0.6205125, 0.12500018, 0.3582533), (-0.5066463, 0.12500018, 0.5066465), (-0.358253, 0.12500018, 0.62051266), (-0.18544537, 0.12500018, 0.69209194), (5.4094716e-8, 0.12500018, 0.71650624), (0.18544549, 0.12500018, 0.6920919), (0.3582531, 0.12500018, 0.62051266), (0.5066464, 0.12500018, 0.5066464), (0.6205126, 0.12500018, 0.35825312), (0.6920919, 0.12500018, 0.18544546)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def PointInstancer "instancer1" (
    kind = "group"
)
{
    float3[] extent.timeSamples = {
        1001: [(-0.07161552, -0.041718513, -0.051374707), (0.053999234, 0.03980607, 0.0599651)],
        1002: [(-0.10660864, -0.07152471, -0.07079914), (0.06527282, 0.053929158, 0.08199966)],
        1003: [(-0.1406249, -0.124468796, -0.10109238), (0.08680156, 0.052216742, 0.10329108)],
    }
    int64[] ids.timeSamples = {
        1001: [0, 1, 2, 3],
        1002: [0, 1, 2, 3, 4, 5, 6, 7],
        1003: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    }
    int64[] invisibleIds.timeSamples = {
        1001: [],
        1002: [],
        1003: [],
    }
    quath[] orientations.timeSamples = {
        1001: [(0.773438, 0.305176, -0.555664, 0), (0.582031, 0.171143, 0.794922, 0), (0.930664, 0.216675, -0.29541, 0), (0.922363, 0.386475, 0.00717926, 0)],
        1002: [(0.766602, 0.402588, -0.5, 0), (0.605957, 0.488281, 0.62793, 0), (0.908691, 0.319092, -0.269287, 0), (0.890625, 0.454346, 0.00622177, 0), (0.652344, 0.399902, 0.644043, 0), (0.177368, 0.00115871, 0.984375, 0), (0.660645, 0.729004, 0.178711, 0), (0.963379, -0.208984, -0.167358, 0)],
        1003: [(0.759766, 0.4729, -0.445801, 0), (0.630859, 0.62207, 0.464111, 0), (0.88623, 0.395508, -0.241699, 0), (0.865234, 0.500977, 0.00543213, 0), (0.652344, 0.399902, 0.644043, 0), (0.177368, 0.00115871, 0.984375, 0), (0.660645, 0.729004, 0.178711, 0), (0.963379, -0.208984, -0.167358, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
    }
    point3f[] positions.timeSamples = {
        1001: [(-0.020800471, -0.0007863436, 0.0047630602), (0.0060053496, 0.005461781, -0.0020949547), (-0.00516158, 0.00087375013, 0.0068703755), (0.00039023682, -0.0060092323, 0.020670213)],
        1002: [(-0.054078728, -0.019069834, 0.012383385), (0.021142466, 0.0022033402, -0.007375509), (-0.024021056, -0.012959161, 0.031973477), (0.0008332086, -0.029855963, 0.04413371), (0.0048989058, -0.00008028814, -0.00087056716), (0.008390876, 0.012649403, -0.022524578), (0.008974458, -0.024846537, -0.0048446315), (-0.0036808273, 0.011158129, 0.009780526)],
        1003: [(-0.087356985, -0.054378763, 0.02000371), (0.03627958, -0.018080536, -0.012656063), (-0.04288053, -0.043817505, 0.05707658), (0.0012761804, -0.07072813, 0.06759721), (0.033054344, -0.017567161, -0.00587397), (0.019675745, 0.012636118, -0.052817825), (0.021948114, -0.077790625, -0.0118481275), (-0.013231777, 0.02308562, 0.035158873), (0.0031816144, 0.0115365125, -0.009421182), (0.031128991, -0.016383309, -0.011699339), (-0.013807224, 0.013046687, 0.00071621436), (0.008822828, 0.025376597, -0.01404691)],
    }
    float[] primvars:age (
        interpolation = "varying"
    )
    float[] primvars:age.timeSamples = {
        1001: [0.02604362, 0.01653042, 0.011403596, 0.03670633],
        1002: [0.06771029, 0.05819709, 0.053070262, 0.078373, 0.0072497926, 0.030981299, 0.028822696, 0.01605786],
        1003: [0.10937695, 0.09986375, 0.09473693, 0.12003967, 0.04891646, 0.07264797, 0.07048936, 0.057724528, 0.017324965, 0.0379308, 0.023788195, 0.037266936],
    }
    int[] primvars:dead (
        interpolation = "varying"
    )
    int[] primvars:dead.timeSamples = {
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    float3[] primvars:force (
        interpolation = "varying"
    )
    float3[] primvars:force.timeSamples = {
        1002: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    int[] primvars:has_pprevious (
        interpolation = "varying"
    )
    int[] primvars:has_pprevious.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [1, 1, 1, 1, 0, 0, 0, 0],
        1003: [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    }
    float3[] primvars:hitnml (
        interpolation = "varying"
    )
    float3[] primvars:hitnml.timeSamples = {
        1001: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1002: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    int[] primvars:hitnum (
        interpolation = "varying"
    )
    int[] primvars:hitnum.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    string[] primvars:hitpath (
        interpolation = "varying"
    )
    string[] primvars:hitpath.timeSamples = {
        1001: ["", "", "", ""],
        1002: ["", "", "", "", "", "", "", ""],
        1003: ["", "", "", "", "", "", "", "", "", "", "", ""],
    }
    float3[] primvars:hitpos (
        interpolation = "varying"
    )
    float3[] primvars:hitpos.timeSamples = {
        1001: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1002: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    int[] primvars:hitprim (
        interpolation = "varying"
    )
    int[] primvars:hitprim.timeSamples = {
        1001: [-1, -1, -1, -1],
        1002: [-1, -1, -1, -1, -1, -1, -1, -1],
        1003: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    }
    float[] primvars:hittime (
        interpolation = "varying"
    )
    float[] primvars:hittime.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    int[] primvars:hittotal (
        interpolation = "varying"
    )
    int[] primvars:hittotal.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    float3[] primvars:hituv (
        interpolation = "varying"
    )
    float3[] primvars:hituv.timeSamples = {
        1001: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1002: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    float3[] primvars:hitv (
        interpolation = "varying"
    )
    float3[] primvars:hitv.timeSamples = {
        1001: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1002: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    int[] primvars:id (
        interpolation = "varying"
    )
    int[] primvars:id.timeSamples = {
        1001: [0, 1, 2, 3],
        1002: [0, 1, 2, 3, 4, 5, 6, 7],
        1003: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    }
    float[] primvars:life (
        interpolation = "varying"
    )
    float[] primvars:life.timeSamples = {
        1001: [100, 100, 100, 100],
        1002: [100, 100, 100, 100, 100, 100, 100, 100],
        1003: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
    }
    float3[] primvars:pprevious (
        interpolation = "varying"
    )
    float3[] primvars:pprevious.timeSamples = {
        1001: [(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1002: [(-0.020800471, -0.0007863436, 0.0047630602), (0.0060053496, 0.005461781, -0.0020949547), (-0.00516158, 0.00087375013, 0.0068703755), (0.00039023682, -0.0060092323, 0.020670213), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
        1003: [(-0.054078728, -0.019069834, 0.012383385), (0.021142466, 0.0022033402, -0.007375509), (-0.024021056, -0.012959161, 0.031973477), (0.0008332086, -0.029855963, 0.04413371), (0.0048989058, -0.00008028814, -0.00087056716), (0.008390876, 0.012649403, -0.022524578), (0.008974458, -0.024846537, -0.0048446315), (-0.0036808273, 0.011158129, 0.009780526), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }
    float[] primvars:pscale (
        interpolation = "varying"
    )
    float[] primvars:pscale.timeSamples = {
        1001: [0.05, 0.05, 0.05, 0.05],
        1002: [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05],
        1003: [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05],
    }
    int[] primvars:sourceptnum (
        interpolation = "varying"
    )
    int[] primvars:sourceptnum.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    int[] protoIndices.timeSamples = {
        1001: [0, 0, 0, 0],
        1002: [0, 0, 0, 0, 0, 0, 0, 0],
        1003: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    }
    rel prototypes = </instancer1/Prototypes/torus1>
    float3[] scales.timeSamples = {
        1001: [(0.050000004, 0.050000004, 0.05), (0.05, 0.05, 0.049999997), (0.050000004, 0.050000004, 0.05), (0.05, 0.05, 0.05)],
        1002: [(0.05, 0.05, 0.050000004), (0.05, 0.05, 0.049999997), (0.05, 0.05, 0.049999997), (0.050000004, 0.05, 0.050000004), (0.05, 0.05, 0.05), (0.050000004, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05)],
        1003: [(0.05, 0.05, 0.05), (0.05, 0.050000004, 0.050000004), (0.050000004, 0.05, 0.05), (0.050000004, 0.05, 0.05), (0.05, 0.05, 0.05), (0.050000004, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05), (0.05, 0.05, 0.05)],
    }
    vector3f[] velocities.timeSamples = {
        1001: [(-0.39933908, -0.21940188, 0.0914439), (0.1816454, -0.039101288, -0.06336665), (-0.22631371, -0.16599493, 0.30123723), (0.0053156614, -0.28616077, 0.28156197)],
        1002: [(-0.79867816, -0.6431091, 0.1828878), (0.3632908, -0.2825078, -0.1267333), (-0.45262742, -0.53629506, 0.60247445), (0.010631323, -0.7766268, 0.56312394), (0.6757305, -0.41968498, -0.12008167), (0.27083683, -0.0003188476, -0.7270379), (0.31136775, -1.270658, -0.1680839), (-0.22922279, 0.28625977, 0.6090803)],
        1003: [(-0.39933908, -0.42370713, 0.091443904), (0.1816454, -0.2434065, -0.063366644), (-0.22631371, -0.37030014, 0.30123723), (0.0053156614, -0.490466, 0.28156197), (0.33786526, -0.20984249, -0.060040835), (0.13541842, -0.0001594238, -0.36351895), (0.15568388, -0.635329, -0.08404195), (-0.114611395, 0.14312989, 0.30454016), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
    }

    def Scope "Prototypes" (
        kind = "group"
    )
    {
        def "torus1" (
            append references = </torus1>
        )
        {
            token visibility = None
        }
    }
}

def "Cameras"
{
    def Camera "camera1"
    {
        float4[] clippingPlanes = []
        float4[] clippingPlanes.timeSamples = {
            1001: [],
            1002: [],
        }
        float2 clippingRange = (0.01, 20000)
        float2 clippingRange.timeSamples = {
            1001: (0.01, 20000),
            1002: (0.01, 20000),
        }
        float focalLength.timeSamples = {
            1002: 50,
        }
        float focusDistance = 0.5310207
        float focusDistance.timeSamples = {
            1001: 1.1429656,
            1002: 1.1721516,
        }
        float fStop = 0
        float fStop.timeSamples = {
            1001: 0,
            1002: 0,
        }
        float horizontalAperture = 20.955
        float horizontalAperture.timeSamples = {
            1001: 20.955,
            1002: 20.955,
        }
        float horizontalApertureOffset = 0
        float horizontalApertureOffset.timeSamples = {
            1001: 0,
            1002: 0,
        }
        token projection = "perspective"
        token projection.timeSamples = {
            1001: "perspective",
            1002: "perspective",
        }
        double shutter:close = 0.7
        double shutter:open = -0.7
        float verticalAperture = 11.787188
        float verticalAperture.timeSamples = {
            1001: 11.787188,
            1002: 11.787188,
        }
        float verticalApertureOffset = 0
        float verticalApertureOffset.timeSamples = {
            1001: 0,
            1002: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            1002: ( (0.9612616959383137, -1.5031645437635784e-15, 0.27563735581701726, 0), (0.1844373910329904, 0.7431448254774067, -0.6432096214727345, 0), (-0.20483847468369018, 0.6691306063588444, 0.7143566552661943, 0), (-0.24117886519996412, 0.7677396340395063, 0.8487931667896195, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def DistantLight "prim0001"
{
    float inputs:intensity = 2
    bool inputs:normalize = 1
    float3 xformOp:rotateXYZ = (-43.34102, -0, -0)
    double3 xformOp:translate = (-0.21276037729605052, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

