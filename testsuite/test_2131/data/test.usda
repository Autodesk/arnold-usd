#usda 1.0
(
    defaultPrim = "aiSkyDomeLight1"
    framesPerSecond = 24
    metersPerUnit = 0.01
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def DistantLight "directionalLight1" (
    prepend apiSchemas = ["ArnoldLightAPI", "ShadowAPI"]
    kind = "assembly"
)
{
    float inputs:angle = 0
    color3f inputs:color = (1, 1, 1)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    color3f inputs:shadow:color
    bool inputs:shadow:enable
    float inputs:specular = 1
    vector3f[] primvars:arnold:direction = [(0, 0, -1)]
    bool primvars:arnold:normalize = 1
    string primvars:dcc_name = "directionalLightShape1" (
        elementSize = 1
        interpolation = "constant"
    )
}

def DomeLight "aiSkyDomeLight1" (
    kind = "assembly"
)
{
    color3f inputs:color = (1, 1, 1)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    float inputs:specular = 1
    token inputs:texture:format = "latlong"
    bool primvars:arnold:normalize = 1
    string primvars:dcc_name = "aiSkyDomeLightShape1" (
        elementSize = 1
        interpolation = "constant"
    )
}

def Scope "Render"
{
    def RenderSettings "settings"
    {
        custom int arnold:AA_samples = 3
        int arnold:AA_seed = 1000
        float arnold:frame = 1000
        custom int arnold:GI_diffuse_depth = 1
        custom int arnold:GI_specular_depth = 1
        int arnold:GI_transmission_depth = 8
        float arnold:meters_per_unit = 0.01
        string arnold:name = "options"
        bool arnold:texture_automip = 0
        bool arnold:texture_per_file_stats = 1
        prepend rel camera = </persp>
        uniform float pixelAspectRatio = 1
        string primvars:render_layer = "defaultRenderLayer" (
            elementSize = 1
            interpolation = "constant"
        )
        uniform int2 resolution = (160, 120)
    }

}

def Camera "persp"
{
    float2 clippingRange = (0.1, 10000)
    float focalLength = 35
    float focusDistance = 1
    float horizontalAperture = 35.999928
    float[] primvars:arnold:aperture_size = [0]
    float[] primvars:arnold:fov = [54.432224]
    float2[] primvars:arnold:lens_shift = [(0, 0)]
    float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
    vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
    float primvars:arnold:motion_end = 0
    vector3f[] primvars:arnold:position = [(0, 0, 0)]
    float2[] primvars:arnold:screen_window_max = [(1, 1)]
    float2[] primvars:arnold:screen_window_min = [(-1, -1)]
    vector3f[] primvars:arnold:up = [(0, 1, 0)]
    color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
    string primvars:dcc_name = "cameraShape1" (
        elementSize = 1
        interpolation = "constant"
    )
    token projection = "perspective"
    double shutter:close = 0
    double shutter:open = 0
    float verticalAperture = 23.999952
    float3 xformOp:rotateXYZ = (-2.4, -0.4, 1.5530431e-18)
    double3 xformOp:translate = (-0.07733574018658106, 0.46428978921476305, 6.07734882650468)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

}


def Xform "Xform1"
{
    double3 xformOp:translate = (2, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    def "cube_1" (
        references = @./cube.usda@</cube>
    )
    {
    }
}

def Xform "Xform2"
{
    double3 xformOp:translate = (-2, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate"]

    def "cube_2" (
        instanceable = true
        references = @./cube.usda@</cube>
    )
    {
    }
}

