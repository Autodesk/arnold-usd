#usda 1.0
(
    doc = """Generated from Composed Stage of root layer 
"""
    endTimeCode = 24
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 10
    timeCode = 10
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "grid" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0" (
        apiSchemas = ["MaterialBindingAPI"]
    )
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        rel material:binding = </materials/arnold_materialbuilder1>
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Scope "materials"
{
    def Material "arnold_materialbuilder1"
    {
        token outputs:arnold:surface.connect = </materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

        def Shader "standard_surface1"
        {
            uniform token info:id = "arnold:standard_surface"
            string inputs:aov_id1 = ""
            string inputs:aov_id2 = ""
            string inputs:aov_id3 = ""
            string inputs:aov_id4 = ""
            string inputs:aov_id5 = ""
            string inputs:aov_id6 = ""
            string inputs:aov_id7 = ""
            string inputs:aov_id8 = ""
            float inputs:base = 1
            color3f inputs:base_color = (0.8, 0.8, 0.8)
            bool inputs:caustics = 0
            float inputs:coat = 0
            float inputs:coat_affect_color = 0
            float inputs:coat_affect_roughness = 0
            float inputs:coat_anisotropy = 0
            color3f inputs:coat_color = (1, 1, 1)
            float inputs:coat_IOR = 1.5
            vector3f inputs:coat_normal = (0, 0, 0)
            float inputs:coat_rotation = 0
            float inputs:coat_roughness = 0.1
            int inputs:dielectric_priority = 0
            float inputs:diffuse_roughness = 0
            float inputs:emission = 0
            color3f inputs:emission_color = (1, 1, 1)
            bool inputs:exit_to_background = 0
            color3f inputs:id1 = (0, 0, 0)
            color3f inputs:id2 = (0, 0, 0)
            color3f inputs:id3 = (0, 0, 0)
            color3f inputs:id4 = (0, 0, 0)
            color3f inputs:id5 = (0, 0, 0)
            color3f inputs:id6 = (0, 0, 0)
            color3f inputs:id7 = (0, 0, 0)
            color3f inputs:id8 = (0, 0, 0)
            float inputs:indirect_diffuse = 1
            float inputs:indirect_specular = 1
            bool inputs:internal_reflections = 1
            float inputs:metalness = 0
            vector3f inputs:normal = (0, 0, 0)
            color3f inputs:opacity = (1, 1, 1)
            float inputs:sheen = 0
            color3f inputs:sheen_color = (1, 1, 1)
            float inputs:sheen_roughness = 0.3
            float inputs:specular = 1
            float inputs:specular_anisotropy = 0
            color3f inputs:specular_color = (1, 1, 1)
            float inputs:specular_IOR = 1.5
            float inputs:specular_rotation = 0
            float inputs:specular_roughness = 0
            float inputs:subsurface = 0
            float inputs:subsurface_anisotropy = 0
            color3f inputs:subsurface_color = (1, 1, 1)
            color3f inputs:subsurface_radius = (1, 1, 1)
            float inputs:subsurface_scale = 1
            token inputs:subsurface_type = "randomwalk"
            vector3f inputs:tangent = (0, 0, 0)
            float inputs:thin_film_IOR = 1.5
            float inputs:thin_film_thickness = 0
            bool inputs:thin_walled = 0
            float inputs:transmission = 0
            color3f inputs:transmission_color = (1, 1, 1)
            float inputs:transmission_depth = 0
            float inputs:transmission_dispersion = 0
            float inputs:transmission_extra_roughness = 0
            color3f inputs:transmission_scatter = (0, 0, 0)
            float inputs:transmission_scatter_anisotropy = 0
            bool inputs:transmit_aovs = 0
            token outputs:shader
        }
    }
}

def Xform "cameras"
{
    def Camera "render_cam" (
        apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.182923, 5512.07)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.414214
        float horizontalApertureOffset = 0
        asset houdini:backgroundimage = @@
        asset houdini:foregroundimage = @@
        float houdini:guidescale = 1
        uniform bool houdini:inviewermenu = 1
        string primvars:arnold:shutter_type = "box" (
            interpolation = "constant"
        )
        token projection = "perspective"
        double shutter:close = 1
        double shutter:open = -1
        float verticalAperture = 0.23299538
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.9935214409696066, -2.614701880273765e-7, -0.11364482537101377, 0), (-0.03637036693030646, 0.947404854217196, -0.3179642096448094, 0), (0.10766774235132569, 0.32003756374154746, 0.941267026433702, 0), (1.56109727442893, 5.239732966342149, 16.340067684797937, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Scope "Render"
{
    def RenderSettings "rendersettings1"
    {
        custom int arnold:global:AA_samples = 5
        custom int arnold:global:AA_seed
        
        uniform token aspectRatioConformPolicy = "expandAperture"
        rel camera = </cameras/render_cam>
        uniform token[] includedPurposes = ["default"]
        uniform bool instantaneousShutter = 0
        uniform token[] materialBindingPurposes = ["full", "allPurpose"]
        uniform float pixelAspectRatio = 1
        rel products
        uniform int2 resolution = (1280, 720)
    }
}

def Xform "lights"
{
    def CylinderLight "cylinder_light"
    {
        custom float houdini:guidescale
        float houdini:guidescale.timeSamples = {
            1: 1,
            2: 1,
            3: 1,
            4: 1,
            5: 1,
            6: 1,
            7: 1,
            8: 1,
            9: 1,
            10: 1,
            11: 1,
            12: 1,
            13: 1,
            14: 1,
            15: 1,
            16: 1,
            17: 1,
            18: 1,
            19: 1,
            20: 1,
            21: 1,
            22: 1,
            23: 1,
            24: 1,
        }
        color3f inputs:color = (1, 0, 1)
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 2
        float inputs:intensity = 1
        float inputs:length = 1
        bool inputs:normalize = 0
        float inputs:radius = 0.5
        float inputs:specular = 1

        float primvars:arnold:camera = 1 (
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-2.1058109998703003, 0.9949543476104736, 0, 1) ),
            1: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-2.1058109998703003, 0.9949543476104736, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-2.077456766414478, 0.9949543476104736, 0, 1) ),
            3: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-1.995779646161138, 0.9949543476104734, 0, 1) ),
            4: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-1.8658580092814732, 0.9949543476104736, 0, 1) ),
            5: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-1.692770225946676, 0.9949543476104737, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-1.4815946663279373, 0.9949543476104736, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-1.2374097005964506, 0.9949543476104734, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-0.9652936989234078, 0.9949543476104736, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-0.6703250314799997, 0.9949543476104737, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-0.35758206843741913, 0.9949543476104736, 0, 1) ),
            11: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (-0.032143179966858226, 0.9949543476104734, 0, 1) ),
            12: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0.3009132637604901, 0.9949543476104734, 0, 1) ),
            13: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0.6365088925734341, 0.9949543476104736, 0, 1) ),
            14: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0.9695653363007829, 0.9949543476104736, 0, 1) ),
            15: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (1.2950042247713434, 0.9949543476104736, 0, 1) ),
            16: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (1.6077471878139242, 0.9949543476104736, 0, 1) ),
            17: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (1.9027158552573318, 0.9949543476104736, 0, 1) ),
            18: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (2.174831856930375, 0.9949543476104736, 0, 1) ),
            19: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (2.4190168226618614, 0.9949543476104736, 0, 1) ),
            20: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (2.6301923822806, 0.9949543476104736, 0, 1) ),
            21: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (2.8032801656153974, 0.9949543476104736, 0, 1) ),
            22: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (2.933201802495062, 0.9949543476104736, 0, 1) ),
            23: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (3.0148789227484016, 0.9949543476104736, 0, 1) ),
            24: ( (1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (3.0432331562042236, 0.9949543476104736, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

