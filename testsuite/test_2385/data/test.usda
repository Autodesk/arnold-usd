#usda 1.0
(
    defaultPrim = "persp"
    framesPerSecond = 24
    metersPerUnit = 0.01
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Mesh "pCube1" (
    prepend apiSchemas = ["ArnoldPolymeshAPI", "MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
    rel material:binding = </mtl/Standard_Surface1SG>
    uniform token orientation = "rightHanded"
    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
    uint primvars:arnold:id = 137147339
    uchar primvars:arnold:subdiv_iterations = 1
    uchar primvars:arnold:visibility = 253
    bool primvars:arnold:visibility:camera = 0
    
    string primvars:dcc_name = "pCubeShape1" (
        elementSize = 1
        interpolation = "constant"
    )
    vector3f[] primvars:normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
        elementSize = 24
        interpolation = "faceVarying"
    )
    int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
    texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
    uniform token subdivisionScheme = "none"

    def GeomSubset "back"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [2]
    }

    def GeomSubset "bottom"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [3]
    }

    def GeomSubset "front"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [0]
    }

    def GeomSubset "left"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [5]
    }

    def GeomSubset "right"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [4]
    }

    def GeomSubset "top"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [1]
    }
}

def DomeLight "aiSkyDomeLight1" (
    kind = "assembly"
)
{
    color3f inputs:color = (1, 1, 1)
    float inputs:diffuse = 1
    float inputs:exposure = 0
    float inputs:intensity = 1
    float inputs:specular = 1
    token inputs:texture:format = "latlong"
    bool primvars:arnold:normalize = 1
    string primvars:dcc_name = "aiSkyDomeLightShape1" (
        elementSize = 1
        interpolation = "constant"
    )
}

def Mesh "pPlane1" (
    prepend apiSchemas = ["ArnoldPolymeshAPI", "MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    rel material:binding = </mtl/initialShadingGroup>
    uniform token orientation = "rightHanded"
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    uint primvars:arnold:id = 404087512
    uchar primvars:arnold:subdiv_iterations = 1
    string primvars:dcc_name = "pPlaneShape1" (
        elementSize = 1
        interpolation = "constant"
    )
    vector3f[] primvars:normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
        elementSize = 4
        interpolation = "faceVarying"
    )
    int[] primvars:normals:indices = [0, 1, 2, 3]
    texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2]
    uniform token subdivisionScheme = "none"
    float3 xformOp:scale = (9.407043, 9.407043, 9.407043)
    double3 xformOp:translate = (0, -0.8536414677694428, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
}

def Xform "materialXStack1" (
    kind = "assembly"
)
{
}

def Scope "mtl" (
    kind = "assembly"
)
{
    def Material "initialShadingGroup"
    {
        token outputs:arnold:surface.connect = </mtl/initialShadingGroup/openPBR_shader1.outputs:out>

        def Shader "openPBR_shader1"
        {
            uniform token info:id = "arnold:openpbr_surface"
            color3f inputs:base_color = (0.4, 0.4, 0.4)
            float inputs:base_metalness = 0.8493003
            float inputs:base_weight = 0
            vector3f inputs:geometry_normal = (1, 1, 1)
            vector3f inputs:geometry_tangent = (1, 1, 1)
            float inputs:specular_ior = 5
            float inputs:specular_roughness = 0
            token outputs:out
        }
    }

    def Material "initialParticleSE"
    {
    }

    def Material "Ray_Switch_Shader1SG"
    {
    }

    def Material "Standard_Surface1SG"
    {
        token outputs:arnold:surface.connect = </mtl/Standard_Surface1SG/standard_surface1.outputs:out>

        def Shader "standard_surface1"
        {
            uniform token info:id = "arnold:standard_surface"
            color3f inputs:base_color = (0.8, 0, 0)
            token outputs:out
            string primvars:material_surface = "Standard_Surface1" (
                elementSize = 1
                interpolation = "constant"
            )
        }
    }
}

def Scope "Render"
{
    def RenderSettings "settings"
    {
        custom int arnold:AA_samples = 3
        int arnold:AA_seed = 1001
        string arnold:asset_searchpath = "C:/Users/blaines/OneDrive - Autodesk/Documents/maya/projects/default/sourceimages"
        float arnold:frame = 1001
        custom int arnold:GI_diffuse_depth = 1
        custom int arnold:GI_specular_depth = 1
        custom int arnold:GI_transmission_depth = 8
        float arnold:meters_per_unit = 0.01
        string arnold:name = "options"
        bool arnold:texture_automip = 0
        bool arnold:texture_per_file_stats = 1
        prepend rel camera = </persp>
        uniform float pixelAspectRatio = 1
        uniform int2 resolution = (160, 120)
    }

}

def Camera "persp"
{
    float2 clippingRange = (0.1, 10000)
    float focusDistance = 1
    float horizontalAperture = 51.428566
    float[] primvars:arnold:aperture_size = [0]
    float[] primvars:arnold:fov = [54.432224]
    float2[] primvars:arnold:lens_shift = [(0, 0)]
    float2[] primvars:arnold:lens_tilt_angle = [(0, 0)]
    vector3f[] primvars:arnold:look_at = [(0, 0, -1)]
    float primvars:arnold:motion_end = 0
    vector3f[] primvars:arnold:position = [(0, 0, 0)]
    float2[] primvars:arnold:screen_window_max = [(1, 1)]
    float2[] primvars:arnold:screen_window_min = [(-1, -1)]
    vector3f[] primvars:arnold:up = [(0, 1, 0)]
    color4f primvars:arnold:uv_remap = (0, 0, 0, 1)
    string primvars:dcc_name = "perspShape" (
        elementSize = 1
        interpolation = "constant"
    )
    token projection = "perspective"
    double shutter:close = 0
    double shutter:open = 0
    float verticalAperture = 28.928568
    matrix4d xformOp:transform = ( (0.9063078165054321, 0, -0.4226182699203491, 0), (-0.15789389610290527, 0.9275863766670227, -0.33860453963279724, 0), (0.3920149505138397, 0.3736087679862976, 0.8406787514686584, 0), (1.9603346586227417, 1.0457321405410767, 4.378447532653809, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
}


