#usda 1.0
(
    endTimeCode = 10
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        custom string arnold:global:usdlux_version = "None"
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        uniform bool disableMotionBlur = 1
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:ior = 1
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Xform "cameras"
{
    matrix4d xformOp:transform.timeSamples = {
        1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        2: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        3: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        4: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        5: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        7: ( (0.9396926207859084, 0, 0.34202014332566866, 0), (0, 1, 0, 0), (-0.34202014332566866, 0, 0.9396926207859084, 0), (0, 0, 0, 1) ),
        8: ( (0.766044443118978, 0, 0.6427876096865394, 0), (0, 1, 0, 0), (-0.6427876096865394, 0, 0.766044443118978, 0), (0, 0, 0, 1) ),
        9: ( (0.5000000000000001, 0, 0.8660254037844386, 0), (0, 1, 0, 0), (-0.8660254037844386, 0, 0.5000000000000001, 0), (0, 0, 0, 1) ),
        10: ( (0.17364817766693041, 0, 0.984807753012208, 0), (0, 1, 0, 0), (-0.984807753012208, 0, 0.17364817766693041, 0), (0, 0, 0, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Camera "camera1" (
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.20955
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0, -1, 0), (0, 1, 0, 0), (0, 30, 0, 1) )
        matrix4d xformOp:transform:xform1 = ( (-1, 0, -0, 0), (0, 1, -0, 0), (0, 0, -1, 0), (0, 0, -3, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform:xform1"]
    }
}

def Xform "lights"
{
    def RectLight "visibleRect_light" (
        prepend apiSchemas = ["KarmaLightAPI", "LightAPI"]    )
    {
        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:height = 1
        float inputs:intensity = 1
        bool inputs:normalize = 0
        float inputs:specular = 1
        asset inputs:texture:file = @./dome_grid_2k.exr@
        custom bool inputs:visibility:camera = 1
        float inputs:width = 1
        custom bool karma:light:renderlightgeo = 1
        rel light:filters = None
        float primvars:arnold:camera = 1 (
            interpolation = "constant"
        )
        int primvars:ri:attributes:visibility:camera = 1 (
            interpolation = "constant"
        )
        custom bool visibleInPrimaryRay = 1
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            2: ( (0.9396926207859084, 0, -0.3420201433256687, 0), (0, 1, 0, 0), (0.3420201433256687, 0, 0.9396926207859084, 0), (0, 0, 0, 1) ),
            3: ( (0.766044443118978, 0, -0.6427876096865393, 0), (0, 1, 0, 0), (0.6427876096865393, 0, 0.766044443118978, 0), (0, 0, 0, 1) ),
            4: ( (0.5000000000000001, 0, -0.8660254037844386, 0), (0, 1, 0, 0), (0.8660254037844386, 0, 0.5000000000000001, 0), (0, 0, 0, 1) ),
            5: ( (0.17364817766693041, 0, -0.984807753012208, 0), (0, 1, 0, 0), (0.984807753012208, 0, 0.17364817766693041, 0), (0, 0, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

