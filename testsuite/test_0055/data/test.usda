#usda 1.0
(
    defaultPrim = "persp"
    framesPerSecond = 24
    timeCodesPerSecond = 24
    renderSettingsPrimPath = "/rendersettings1"
)

def ArnoldBoxFilter "_forced_box_filter"
{
    string arnold:name = "_forced_box_filter"
}

def RenderSettings "rendersettings1"
{
    int arnold:global:AA_samples = 3
    rel camera = </persp/perspShape>
    uniform float4 dataWindowNDC = (0, 0, 1, 1)
    uniform token[] includedPurposes = ["default"]
    uniform bool instantaneousShutter = 0
    uniform token[] materialBindingPurposes = ["full", "allPurpose"]
    uniform float pixelAspectRatio = 1
	int2 resolution = (160, 120)
}


def Xform "persp"
{
    def Camera "perspShape"
    {
        float2 clippingRange = (0.1, 10000)
        float2[] primvars:arnold:screen_window_max = [(0.8012426, 0.8012426)]
        float2[] primvars:arnold:screen_window_min = [(-0.8012426, -0.8012426)]
        token projection = "orthographic"
        matrix4d xformOp:transform = ( (0.7071067690849304, 0, -0.7071067690849304, 0), (-0.5132428407669067, 0.6878688931465149, -0.5132428407669067, 0), (0.4863967299461365, 0.7258349657058716, 0.4863967299461365, 0), (0.6757960319519043, 1.0016694068908691, 0.6757960319519043, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "pPlane1"
{
    def Mesh "pPlaneShape1"
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </mtl/surfaceShader1>
        uniform token orientation = "rightHanded"
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        uint primvars:arnold:id = 3518428338
        uchar primvars:arnold:subdiv_iterations = 1
        string primvars:dcc_name = "pPlaneShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        vector3f[] primvars:normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            elementSize = 4
            interpolation = "faceVarying"
        )
        int[] primvars:normals:indices = [0, 1, 2, 3]
        float2[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
            elementSize = 4
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        uniform token subdivisionScheme = "none"
    }
}

def Scope "mtl"
{
    def Material "surfaceShader1"
    {
        token outputs:arnold:surface.connect = </mtl/surfaceShader1/surfaceShader1.outputs:surface>

        def Shader "surfaceShader1"
        {
            uniform token info:id = "arnold:standard_surface"
            float inputs:base = 0
            float inputs:emission = 1
            color3f inputs:emission_color = (1, 1, 1)
            prepend color3f inputs:emission_color.connect = </mtl/surfaceShader1/checker1.outputs:out>
            float inputs:specular = 0
            token outputs:surface
        }

        def Shader "checker1"
        {
            uniform token info:id = "arnold:checkerboard"
            color3f inputs:color1 = (1, 0, 0)
            color3f inputs:color2 = (1, 1, 1)
            color3f outputs:out
        }
    }
}

