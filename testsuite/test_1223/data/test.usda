#usda 1.0
(
    renderSettingsPrimPath = "/Render/TertiarySettings"
)

def Scope "Render"
{
    def RenderSettings "PrimarySettings"
    {
        rel camera = </World/main_cam0002>
        rel products = </Render/PrimaryProduct>
    }

    def RenderSettings "SecondarySettings"
    {
        rel camera = </World/main_cam0001>
        rel products = </Render/PrimaryProduct>
    }

    def RenderSettings "TertiarySettings"
    {
        rel camera = </World/main_cam>
        rel products = </Render/PrimaryProduct>
    }

    def RenderProduct "PrimaryProduct"
    {
        rel camera = </World/main_cam>
    }

}

def "World"
{
    def Camera "main_cam"
    {
        matrix4d xformOp:transform.timeSamples = {
            1: ( (-0.8191520442889908, 1.6321175169494996e-15, -0.5735764363510479, 0), (-0.15809909227474528, 0.9612616959383157, 0.22578890349991687, 0), (0.551357057957064, 0.2756373558170103, -0.7874194833245733, 0), (12.157394811434061, 6.323548585074947, -16.733218418488544, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def DomeLight "light"
    {
        float inputs:intensity = 0.1
    }

    def Xform "Plane"
    {
        matrix4d xformOp:transform = ( (0.8840559124946594, 0.46738117933273315, 0, 0), (-0.35344699025154114, 0.6685483455657959, 0.6543075442314148, 0), (0.3058110177516937, -0.5784444212913513, 0.7562285661697388, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Plane"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            normal3f[] normals = [(-0.16940932, -0.16940932, 0.9708764), (-0.16940932, -0.16940932, 0.9708764), (-0.16940932, -0.16940932, 0.9708764), (-0.16940932, -0.16940932, 0.9708764)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1, -1, 0), (1, -1, 0), (-1, 1, 0), (1, 1, 0.69796455)]
            color3f[] primvars:displayColor = [(0.6666666, 0.090014055, 0.090014055)]
            texCoord2f[] primvars:UVMap = [(1, 1), (2, 1), (2, 2), (1, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }

    def Camera "main_cam0001"
    {
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange.timeSamples = {
            1: (1, 1000000),
        }
        float focalLength.timeSamples = {
            1: 49.999996,
        }
        float focusDistance.timeSamples = {
            1: 0,
        }
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture.timeSamples = {
            1: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            1: 0,
        }
        token projection.timeSamples = {
            1: "perspective",
        }
        float verticalAperture.timeSamples = {
            1: 8.980715,
        }
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            1: ( (-0.7986355100472944, 1.4787140733094438e-15, -0.6018150231520465, 0), (-0.1455922312013086, 0.9702957262759928, 0.1932074164838614, 0), (0.5839385449731187, 0.24192189559968225, -0.7749126222511372, 0), (12.157394811434061, 6.323548585074947, -16.733218418488544, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "main_cam0002"
    {
        float4[] clippingPlanes.timeSamples = {
            1: [],
        }
        float2 clippingRange.timeSamples = {
            1: (1, 1000000),
        }
        float focalLength.timeSamples = {
            1: 49.999996,
        }
        float focusDistance.timeSamples = {
            1: 0,
        }
        float fStop.timeSamples = {
            1: 0,
        }
        float horizontalAperture.timeSamples = {
            1: 20.955,
        }
        float horizontalApertureOffset.timeSamples = {
            1: 0,
        }
        token projection.timeSamples = {
            1: "perspective",
        }
        float verticalAperture.timeSamples = {
            1: 8.980715,
        }
        float verticalApertureOffset.timeSamples = {
            1: 0,
        }
        matrix4d xformOp:transform.timeSamples = {
            1: ( (-0.7986355100472973, 7.853356648234202e-16, -0.6018150231520436, 0), (-0.23514786313800393, 0.9205048534524346, 0.3120517540923984, 0), (0.5539736496920457, 0.39073112848928726, -0.7351478631379975, 0), (12.157394811434061, 6.323548585074947, -16.733218418488544, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

