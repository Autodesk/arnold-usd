#usda 1.0
(
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def ArnoldOptions "options"
{
    int AA_samples = 3
    string camera = "/cameras/camera1"
    float frame = 1
    int GI_diffuse_depth = 1
    int GI_specular_depth = 1
    int GI_transmission_depth = 8
    string[] outputs = ["RGBA RGBA /defaultArnoldFilter_gaussian_filter /defaultArnoldDriver_driver_tiff_RGBA"]
    int threads = 40
    int xres = 160
    int yres = 120
}

def ArnoldGaussianFilter "defaultArnoldFilter_gaussian_filter"
{
}

def ArnoldDriverTiff "defaultArnoldDriver_driver_tiff_RGBA"
{
    string color_space = ""
    string filename = "testrender.tif"
}
def Xform "cameras"
{
    def Camera "camera1"
    {
        float2 clippingRange = (1, 1000000)
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        custom float houdini:guidescale = 1
        custom bool houdini:inviewermenu = 1
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.11787187
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (0.6663834321403478, 4.440892098500626e-16, 0.7456092283286537, 0), (0.42818029014729025, 0.8186666466607542, -0.3826833688241735, 0), (-0.6104054066751317, 0.5742690324623434, 0.5455458897806226, 0), (-26.06580347464057, 23.229411149472966, 22.473649562523576, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def PointInstancer "masterInstancer"
{
    point3f[] positions = [(0, -5, 0), (0, 5, 0), (0, 10, 0) ]
    int[] protoIndices = [0, 0, 0]
    rel prototypes = </masterInstancer/childInstancer>

    def PointInstancer "childInstancer"
    {
        int64[] invisibleIds = []
        quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
        point3f[] positions = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)]
        color3f[] primvars:my_color (
            interpolation = "varying"
        )
        color3f[] primvars:my_color = [(0.16164958, 0.82059467, 0.0883019), (0.20843911, 0.6383748, 0.9079925), (0.618428, 0.7032281, 0.5686729), (0.99998665, 0.9814347, 0.81789684), (0.5640477, 0.81823623, 0.30014765), (0.7001499, 0.892465, 0.25016654), (0.35176837, 0.47468472, 0.7136358), (0.118261576, 0.045334816, 0.88435924), (0.35346138, 0.08893204, 0.9758816), (0.0015593767, 0.83247864, 0.95786357), (0.3020271, 0.23173237, 0.6060116), (0.8411627, 0.49881458, 0.42714882), (0.16587341, 0.20053256, 0.23414087), (0.7757642, 0.346444, 0.14269161), (0.47455096, 0.28503478, 0.62758386), (0.36936665, 0.4749899, 0.5755354), (0.37431908, 0.11744678, 0.9850626), (0.15309489, 0.84197915, 0.017240524), (0.052724004, 0.76693773, 0.4574207), (0.62844336, 0.31444287, 0.70657027), (0.7450324, 0.8512907, 0.86093366), (0.5213094, 0.6876191, 0.9350761), (0.87060153, 0.13693047, 0.33767056), (0.23634171, 0.8781606, 0.7205827), (0.5463505, 0.401901, 0.983938), (0.9645487, 0.9752146, 0.5755124), (0.49188006, 0.43018055, 0.69695437), (0.7523421, 0.21793973, 0.71013), (0.40507066, 0.93547356, 0.38537836), (0.5158578, 0.24234045, 0.56047595), (0.4819168, 0.45776582, 0.7623582), (0.09089899, 0.18477201, 0.6414088), (0.10704374, 0.7883705, 0.807696), (0.12266433, 0.13399005, 0.09055817), (0.7682744, 0.18086195, 0.7883954), (0.2885461, 0.6976297, 0.13700318), (0.4892527, 0.38058734, 0.54184866), (0.80940926, 0.9683702, 0.46360564), (0.9487858, 0.12409639, 0.23216319), (0.6187577, 0.9801589, 0.7743337), (0.07524884, 0.84432256, 0.3998078), (0.35932016, 0.38700855, 0.5165709), (0.9136658, 0.240013, 0.52420104), (0.5284445, 0.064338684, 0.9860163), (0.6709831, 0.6664977, 0.31357932), (0.8239052, 0.47102726, 0.62762105), (0.5859568, 0.72845066, 0.98746145), (0.43956757, 0.963603, 0.681378), (0.22336137, 0.05748737, 0.036932945), (0.36700475, 0.6909368, 0.28897476), (0.79328, 0.91667736, 0.1757344), (0.7402351, 0.20420814, 0.6648568), (0.6610676, 0.07331014, 0.42145574), (0.6876546, 0.8498776, 0.6388029), (0.5303706, 0.037127614, 0.9128734), (0.015744328, 0.71163833, 0.7316197), (0.814778, 0.22632277, 0.76038086), (0.44161463, 0.7529626, 0.92837834), (0.29393482, 0.036748767, 0.8086014), (0.23854554, 0.9268055, 0.6359813), (0.8596854, 0.55902934, 0.596346), (0.37896335, 0.47157323, 0.92628765), (0.44877183, 0.29149222, 0.6036774), (0.96646154, 0.49726164, 0.08985019), (0.16962731, 0.20138836, 0.28031826), (0.24452138, 0.95135295, 0.5114908), (0.017677426, 0.15882313, 0.7271292), (0.9033495, 0.61045337, 0.17531168), (0.954808, 0.98554945, 0.5540142), (0.6124877, 0.70417416, 0.9348881), (0.22461879, 0.60040116, 0.38991976), (0.9568664, 0.5218004, 0.7679299), (0.6900556, 0.25060678, 0.09534192), (0.49439788, 0.06129718, 0.42543328), (0.8584883, 0.82584035, 0.510797), (0.2851317, 0.4209876, 0.6951473), (0.33036852, 0.9318534, 0.6597978), (0.5609729, 0.42613387, 0.71394), (0.9778701, 0.27983844, 0.6371596), (0.47884536, 0.92999387, 0.47587597), (0.4332503, 0.5448679, 0.9290613), (0.99490356, 0.27374506, 0.39774454), (0.93414176, 0.07621896, 0.40986145), (0.34936333, 0.037422538, 0.6920742), (0.65010214, 0.86123955, 0.1676116), (0.31526506, 0.15208423, 0.5691682), (0.43270504, 0.33285522, 0.6224325), (0.5723202, 0.90992594, 0.73113704), (0.463897, 0.109099746, 0.9185766), (0.84374154, 0.3528496, 0.016533017), (0.3483423, 0.7898232, 0.70932674), (0.9177052, 0.29583693, 0.43169713), (0.6884376, 0.03933549, 0.03962004), (0.1674614, 0.18937063, 0.9778348), (0.09193218, 0.24299157, 0.097218394), (0.49721622, 0.4275558, 0.37693334), (0.13387036, 0.010441542, 0.20384383), (0.012017012, 0.4535302, 0.4403416), (0.7796041, 0.4236871, 0.44318974), (0.39325094, 0.44569778, 0.59382284)]

        int[] protoIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        rel prototypes = </masterInstancer/childInstancer/Prototypes/Root/cube1>

        def Scope "Prototypes"
        {
            def Xform "Root"
            {
                def Cube "cube1"
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    rel material:binding = </masterInstancer/childInstancer/Prototypes/Root/materials/arnold_materialbuilder1>
                    color3f primvars:my_color = (0, 1, 0) (
                        interpolation = "constant"
                    )
                    double size = 2
                    matrix4d xformOp:transform = ( (0.2, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.2, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Scope "materials"
                {
                    def Material "arnold_materialbuilder1"
                    {
                        token outputs:arnold:surface.connect = </masterInstancer/childInstancer/Prototypes/Root/materials/arnold_materialbuilder1/standard_surface1.outputs:shader>

                        def Shader "standard_surface1"
                        {
                            uniform token info:id = "arnold:standard_surface"
                            float inputs:base = 1
                            color3f inputs:base_color = (0.8, 0.8, 0.8)
                            color3f inputs:base_color.connect = </masterInstancer/childInstancer/Prototypes/Root/materials/arnold_materialbuilder1/user_data_rgb1.outputs:rgb>
                            token outputs:shader
                        }

                        def Shader "user_data_rgb1"
                        {
                            uniform token info:id = "arnold:user_data_rgb"
                            string inputs:attribute = "my_color"
                            float inputs:b = 0
                            color3f inputs:default = (0.1, 0.1, 0.1)
                            float inputs:g = 0
                            float inputs:r = 0
                            color3f inputs:rgb = (0, 0, 0)
                            color3f outputs:rgb
                        }
                    }
                }
            }
        }
    }
}

def Xform "lights"
{
    def DomeLight "domelight1"
    {
        color3f color = (1, 1, 1)
        float diffuse = 1
        bool enableColorTemperature = 0
        float exposure = 0
        rel filters = None
        custom float houdini:guidescale = 1
        float intensity = 1
        bool normalize = 0
        rel portals = None
        float specular = 1
        asset texture:file = @@
        token texture:format = "automatic"
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

