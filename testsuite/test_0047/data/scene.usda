#usda 1.0

def "pointLight1"
{
    def SphereLight "pointLightShape1"
    {
        color3f color = (1, 0, 0)
        float diffuse = 1
        float exposure = 4
        float intensity = 2
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        string primvars:dcc_name = "pointLightShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        float specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-9.067680358886719, 1.4753198623657227, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "pointLight2"
{
    def SphereLight "pointLightShape2"
    {
        float diffuse = 1
        float exposure = 3
        float intensity = 2
        bool enableColorTemperature = true
        float colorTemperature = 2000
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        string primvars:dcc_name = "pointLightShape2" (
            elementSize = 1
            interpolation = "constant"
        )
        float specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-3.0358829498291016, 1.4753198623657227, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "pointLight3"
{
    def SphereLight "pointLightShape3"
    {
        color3f color = (2, 2, 2)
        bool enableColorTemperature = true
        float colorTemperature = 12000
        
        float diffuse = 1
        float exposure = 3
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        string primvars:dcc_name = "pointLightShape3" (
            elementSize = 1
            interpolation = "constant"
        )
        float specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.853314161300659, 1.4753198623657227, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "pointLight4"
{
    def SphereLight "pointLightShape4"
    {
        color3f color = (1, 0.5, 0.5)
        float diffuse = 1
        float intensity = 30
        bool enableColorTemperature = false
        float colorTemperature = 12000
        
        vector3f[] primvars:arnold:position = [(0, 0, 0)]
        string primvars:dcc_name = "pointLightShape4" (
            elementSize = 1
            interpolation = "constant"
        )
        float specular = 1
        bool treatAsPoint = 1
        matrix4d xformOp:transform.timeSamples = {
            0: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (7.873787879943848, 1.4753198623657227, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}
def DomeLight "dome"
{
    color3f color = (1, 1, 1)
    prepend color3f color.connect = </domeShader.outputs:out>
    float intensity = 0.5
    float exposure = -1
    bool enableColorTemperature = true
    float colorTemperature = 2000
}

def Shader "domeShader"
{
    uniform token info:id = "arnold:flat"
    color3f inputs:color = (0, 1, 0)
    color3f outputs:out
}


def "pPlane1"
{
    def Mesh "pPlaneShape1"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        rel material:binding = </materials/lambert1>
        uniform token orientation = "rightHanded"
        point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
        uint primvars:arnold:id = 3518428338
        bool primvars:arnold:smoothing = 1
        uchar primvars:arnold:subdiv_iterations = 1
        string primvars:dcc_name = "pPlaneShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        vector3f[] primvars:normals (
            elementSize = 4
            interpolation = "faceVarying"
        )
        vector3f[] primvars:normals.timeSamples = {
            0: [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)],
        }
        int[] primvars:normals:indices = [0, 1, 2, 3]
        float2[] primvars:uv = [(0, 0), (1, 0), (0, 1), (1, 1)] (
            elementSize = 4
            interpolation = "faceVarying"
        )
        int[] primvars:uv:indices = [0, 1, 3, 2]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform.timeSamples = {
            0: ( (56.71624755859375, 0, 0, 0), (0, 56.71624755859375, 0, 0), (0, 0, 56.71624755859375, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "materials"
{
    def Material "lambert1"
    {
        token outputs:arnold:surface.connect = </shader1.outputs:surface>
    }
}

def Shader "shader1"
{
    uniform token info:id = "arnold:standard_surface"
    token outputs:surface
}

