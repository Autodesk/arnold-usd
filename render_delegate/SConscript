# Copyright 2019 Autodesk, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
from utils import system, build_tools, dependencies

Import('env')
local_env = env.Clone()

src_dir = os.path.join(env['ROOT_DIR'], 'render_delegate')
source_files = [
    'basis_curves.cpp',
    'camera.cpp',
    'config.cpp',
    'debug_codes.cpp',
    'instancer.cpp',
    'light.cpp',
    'material.cpp',
    'mesh.cpp',
    'openvdb_asset.cpp',
    'points.cpp',
    'render_buffer.cpp',
    'render_delegate.cpp',
    'render_param.cpp',
    'render_pass.cpp',
    'renderer_plugin.cpp',
    'shape.cpp',
    'utils.cpp',
    'volume.cpp',
    os.path.join('nodes', 'driver_aov.cpp'),
    os.path.join('nodes', 'driver_main.cpp'),
    os.path.join('nodes', 'nodes.cpp'),
]

if not system.IS_WINDOWS:
    local_env.Append(CXXFLAGS = Split('-fPIC'))

if local_env['USD_HAS_UPDATED_COMPOSITOR']:
    local_env.Append(CPPDEFINES=['USD_HAS_UPDATED_COMPOSITOR'])

if local_env['USD_HAS_FULLSCREEN_SHADER']:
    local_env.Append(CPPDEFINES=['USD_HAS_FULLSCREEN_SHADER'])

local_env.Append(CPPDEFINES=['HDARNOLD_EXPORTS'])
local_env.Append(CPPPATH = [os.path.join(env['BUILD_ROOT_DIR'], 'render_delegate')])
local_env.Append(LIBS = ['ai'])

source_files, usd_deps = dependencies.render_delegate(local_env, source_files)
local_env.Append(LIBS = usd_deps)

# Otherwise we are getting a build error.
if not system.IS_WINDOWS:
    local_env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
source_files.append([local_env.Object(target = os.path.join(local_env['BUILD_ROOT_DIR'], 'render_delegate', 'common', '%s.o' % os.path.basename(src)), source = src) for src in local_env['COMMON_SRC']])
RENDERDELEGATE = local_env.SharedLibrary('hdArnold', source_files)
Return('RENDERDELEGATE')
