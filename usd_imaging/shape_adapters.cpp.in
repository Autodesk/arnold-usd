// Copyright 2022 Autodesk, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#include "shape_adapter.h"

PXR_NAMESPACE_OPEN_SCOPE

#define XARNOLDUSDSTRINGIZE(x) ARNOLDUSDSTRINGIZE(x)
#define ARNOLDUSDSTRINGIZE(x) #x

#define CREATE_ADAPTER_CLASS(suffix)                                                              \
    TF_DEFINE_PRIVATE_TOKENS(_##suffix##tokens, ((suffix, "Arnold" ARNOLDUSDSTRINGIZE(suffix)))); \
                                                                                                  \
    class UsdImagingArnold##suffix##Adapter : public UsdImagingArnoldShapeAdapter {               \
    public:                                                                                       \
        UsdImagingArnold##suffix##Adapter() : UsdImagingArnoldShapeAdapter()                      \
        {                                                                                         \
            _CacheParamNames(_##suffix##tokens->suffix);                                          \
        }                                                                                         \
        ~UsdImagingArnold##suffix##Adapter() = default;                                           \
        TfToken ArnoldDelegatePrimType() const override { return _##suffix##tokens->suffix; }     \
    }

#define REGISTER_ADAPTER_CLASS(suffix)                                             \
    {                                                                              \
        using Adapter = UsdImagingArnold##suffix##Adapter;                         \
        TfType t = TfType::Define<Adapter, TfType::Bases<Adapter::BaseAdapter>>(); \
        t.SetFactory<UsdImagingPrimAdapterFactory<Adapter>>();                     \
    }

${CREATE_ADAPTER_CLASSES}

TF_REGISTRY_FUNCTION(TfType)
{
    // clang-format off
    ${REGISTER_ADAPTER_CLASSES}
    // clang-format on
}

PXR_NAMESPACE_CLOSE_SCOPE
