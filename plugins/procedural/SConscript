# vim: filetype=python
# Copyright 2022 Autodesk, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
## load our own python modules
from utils import system
from utils.build_tools  import link_usd_libraries
from utils.dependencies import get_tbb_lib

import os

# import build env
Import('env')
local_env = env.Clone()

src_proc_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'procedural')
source_files = [os.path.join('main.cpp')]
src_reader_dir  = os.path.join(local_env['ROOT_DIR'], 'libs', 'translator', 'reader')
src_writer_dir  = os.path.join(local_env['ROOT_DIR'], 'libs', 'translator', 'writer')

# Compiler flags
if not system.IS_WINDOWS:
    local_env.Append(CXXFLAGS = Split('-fPIC -Wno-deprecated-register'))

if env['ARNOLD_HAS_SCENE_FORMAT_API']:
    local_env.Append(CPPDEFINES=['ARNOLD_HAS_SCENE_FORMAT_API'])

local_env.Append(CPPDEFINES=['USD_PROCEDURAL_NAME=%s' % env['USD_PROCEDURAL_NAME']])

# Include paths
includePaths = [
    '.',
    src_reader_dir,
    src_writer_dir
]
local_env.Append(CPPPATH = includePaths)

local_env.Append(LIBS = ['ai'])

usd_deps = []

if system.IS_LINUX:
    local_env.Append(LIBS = ['dl'])

if local_env['USD_BUILD_MODE'] == 'monolithic': # shared_monolithic
    usd_deps = [
        local_env['USD_MONOLITHIC_LIBRARY'],
        get_tbb_lib(env),
    ]
elif local_env['USD_BUILD_MODE'] == 'static': # static_monolithic
    # static builds rely on a monolithic static library
    if system.IS_WINDOWS:
        usd_deps = [
            '-WHOLEARCHIVE:libusd_m',
            'Ws2_32',
            'Dbghelp',
            'Shlwapi',
            'advapi32'
        ]
        if not local_env['TBB_STATIC']:
            usd_deps += [get_tbb_lib(env)]

        extra_static_libs = local_env["EXTRA_STATIC_LIBS"]
        if extra_static_libs:
            extra_static_libs_list = extra_static_libs.split(';')
            for extra_lib in extra_static_libs_list:
                usd_deps.append('-WHOLEARCHIVE:{}'.format(extra_lib))
    else:
        whole_archives = ['%s/libusd_m.a' % local_env.subst(local_env['USD_LIB'])]
        if local_env['TBB_STATIC']:
            whole_archives.append('%s/libtbb.a' % local_env.subst(local_env['TBB_LIB']))
        else:
            usd_deps = [get_tbb_lib(env)]
        whole_archives.extend(local_env["EXTRA_STATIC_LIBS"].split(';'))
        if system.IS_LINUX:
            local_env.Append(LINKFLAGS=['-Wl,--whole-archive,%s,--no-whole-archive' % ','.join(whole_archives)])
            local_env.Append(LIBS = ['pthread'])
        elif system.IS_DARWIN:
            for whole_archive in whole_archives:
                local_env.Append(LINKFLAGS=['-Wl,-force_load,{}'.format(whole_archive)])
            extra_frameworks = local_env['EXTRA_FRAMEWORKS']
            if extra_frameworks:
                extra_frameworks = extra_frameworks.split(';')
                local_env.Append(FRAMEWORKS = extra_frameworks)

else:  # shared libs
    usd_libs = [
        'sdf',
        'tf',
        'usd',
        'ar',
        'arch',
        'pcp',
        'usdGeom',
        'usdShade',
        'usdUtils',
        'vt',
        'usdLux',
        'gf',
        'usdVol',
        'usdSkel',
        'usdRender',
        'work',
        'plug', # render_delegate
        'trace', # render_delegate
        'vt', # render_delegate
        'gf', # render_delegate
        'work', # render_delegate
        'hf', # render_delegate
        'hd', # render_delegate
        'hdx', # render_delegate
        'sdf', # render_delegate
        'usdImaging', # render_delegate
        'usdLux', # render_delegate
        'pxOsd', # render_delegate
        'cameraUtil', # render_delegate
        'usdShade', # render_delegate
        'ndr',
        'sdr'
    ]

    usd_deps += [get_tbb_lib(env)]

    usd_libs, usd_sources = link_usd_libraries(local_env, usd_libs)
    usd_deps = usd_deps + usd_libs
    source_files = source_files + usd_sources


# FIXME:extract outside of here


translator_lib_path = os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'libs', 'translator'))
local_env.Append(LIBPATH = [translator_lib_path])
local_env.Append(LIBS = ['usd_translator'])

procedural_libs = ['common']
procedural_lib_paths = [os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'libs', 'common'))]

if local_env['ENABLE_HYDRA_IN_USD_PROCEDURAL']:
    procedural_libs += ['render_delegate']
    procedural_lib_paths += [os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'libs', 'render_delegate'))]
    # for static USD builds we ,eed to include ndr & usdImaging in the procedural lib
    if local_env['USD_BUILD_MODE'] == 'static':
        if system.IS_WINDOWS:
            procedural_libs += ['-WHOLEARCHIVE:ndrArnold']
            procedural_libs += ['-WHOLEARCHIVE:usdImagingArnold']
        elif system.IS_LINUX:
            local_env.Append(LINKFLAGS = ['-Wl,--whole-archive,{},--no-whole-archive'.format(os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'ndr', 'libndrArnold.a')))])
            local_env.Append(LINKFLAGS = ['-Wl,--whole-archive,{},--no-whole-archive'.format(os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'usd_imaging', 'libusdImagingArnold.a')))])
        else:
            local_env.Append(LINKFLAGS=['-Wl,-force_load,{}'.format(os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'ndr', 'libndrArnold.a')))])
            local_env.Append(LINKFLAGS=['-Wl,-force_load,{}'.format(os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'usd_imaging', 'libusdImagingArnold.a')))])

        procedural_lib_paths += [os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'ndr'))]
        procedural_lib_paths += [os.path.abspath(os.path.join(local_env['BUILD_BASE_DIR'], 'plugins', 'usd_imaging'))]
    
    local_env.Append(CPPDEFINES = ['ENABLE_HYDRA_IN_USD_PROCEDURAL'])

local_env.Append(LIBPATH = procedural_lib_paths)
local_env.Append(LIBS = procedural_libs)

local_env.Append(LIBS = usd_deps)
if local_env['USD_HAS_PYTHON_SUPPORT']:
    local_env.Append(LIBS = [local_env['PYTHON_LIB_NAME'], local_env['BOOST_LIB_NAME'] % 'python'])

#if system.IS_LINUX:
#    plugin_map = os.path.join(src_proc_dir, 'plugin.map')
#    local_env.Append(LINKFLAGS = [ '-Wl,--version-script={}'.format(plugin_map) ])
#    local_env.Append(LINKFLAGS = [ '-Wl,--exclude-libs=ALL' ])
#    local_env.Append(CXXFLAGS = [ '-fvisibility=hidden' ])
#elif system.IS_DARWIN:
#    # On Mac, we only hide symbols if we're linking against a static usd.
#    # Otherwise we get crashes e.g. with mayaUSD (see #1226)
#    if local_env['USD_BUILD_MODE'] == 'static':
#        if local_env['ARNOLD_HAS_SCENE_FORMAT_API']:
#            export_list = os.path.join(src_proc_dir, 'macos_export_list')
#        else:
#            export_list = os.path.join(src_proc_dir, 'macos_export_list_no_scene')
#        local_env.Append(LINKFLAGS = Split('-Xlinker -S -Xlinker -x -Xlinker -exported_symbols_list -Xlinker {} '.format(export_list)))

# Build shared library for the usd procedural
USD = local_env.SharedLibrary('%s_proc' % local_env['USD_PROCEDURAL_NAME'], source_files, SHLIBPREFIX='')
Return('USD')
